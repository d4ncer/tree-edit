;;; tree-edit-generate-grammars.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;;

(require 'dash)
(require 'json)
(require 'tree-edit)

(defvar tree-edit--grammar-template
  ";;; tree-edit-%1$s-grammar.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;; Author: Ethan Leba <ethanleba5@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;; This is an autogenerated file from 'tree-edit-generate-grammars.el' that contains the grammar
;; and other precalculations for the %1$s language. Please do not manually modify this!
;;
;;; Code:
(require 'mode-local)
(require 'tree-edit)

(setq-mode-local
 %s

 tree-edit-grammar
 %s

 tree-edit--identifier-regex
 %s

 tree-edit--supertypes
 %s

 tree-edit--subtypes
 %s

 tree-edit--containing-types
 %s)

(provide 'tree-edit-%1$s-grammar)
;;; tree-edit-%1$s-grammar.el ends here")

(defun tree-edit--invert-supertypes (supertypes)
  "Invert SUPERTYPES alist into subtypes."
  (let ((subtypes '()))
    (progn
      (mapc (-lambda ((sub . supers))
              (mapc
               (lambda (super)
                 (if-let ((record (assoc super subtypes)))
                     (setcdr record (cons sub (cdr record)))
                   (setq subtypes `((,super . (,sub)) . ,subtypes))))
               supers))
            supertypes)
      subtypes)))

(defun tree-edit--generate-supertype (type grammar)
  "Return TYPE's supertypes (and itself) in GRAMMAR."
  (condition-case nil
      (->> (-map #'car grammar)
           (--filter (reazon-run 1 q (tree-edit-parseo (alist-get it grammar) `(,type) '())))
           (--mapcat `(,it . ,(tree-edit--generate-supertype it grammar)))
           (-uniq)
           (cons type))
    (error (message (format "failed to parse %s" type)))))

(defun tree-edit--generate-supertypes (grammar)
  "Return an alist of a type to it's supertypes (and itself) in GRAMMAR."
  (--map
   (let ((type (car it)))
     `(,type . ,(tree-edit--generate-supertype type grammar)))
   grammar))

(defun tree-edit--invert-supertypes (supertypes)
  "Invert SUPERTYPES alist into subtypes."
  (let ((subtypes '()))
    (progn
      (mapc (-lambda ((sub . supers))
              (mapc
               (lambda (super)
                 (if-let ((record (assoc super subtypes)))
                     (setcdr record (cons sub (cdr record)))
                   (setq subtypes `((,super . (,sub)) . ,subtypes))))
               supers))
            supertypes)
      subtypes)))

(defun tree-edit--generate-containing-types (grammar)
  "Return an alist of a type to all the types it contained in it's GRAMMAR."
  (--map `(,(car it) . ,(tree-edit--extract-types (cdr it))) grammar))

(defun tree-edit--extract-types (grammar)
  "Return a list of all the symbol types in GRAMMAR."
  (pcase grammar
    ((and `((type . ,type)
            (value . ,_)
            (content . ,content))
          (guard (string-prefix-p "PREC" type)))
     ;; Silence the foolish linter.
     (ignore type)
     (tree-edit--extract-types content))
    (`((type . "SEQ")
       (members . ,members))
     (-mapcat #'tree-edit--extract-types (append members '())))
    (`((type . "ALIAS")
       (content . ,content)
       (named . ,_)
       (value . ,_))
     (tree-edit--extract-types content))
    (`((type . "REPEAT")
       (content . ,content))
     (tree-edit--extract-types content))
    (`((type . "REPEAT1")
       (content . ,content))
     (tree-edit--extract-types content))
    (`((type . "FIELD")
       (name . ,_)
       (content . ,content))
     (tree-edit--extract-types content))
    (`((type . "SYMBOL")
       (name . ,name))
     `(,name))
    (`((type . "CHOICE")
       (members . ,members))
     (-mapcat #'tree-edit--extract-types members))
    (_ '())))

(defun tree-edit--inline-type (node grammar)
  "Inlines anonymous nodes for NODE in GRAMMAR.

https://tree-sitter.github.io/tree-sitter/using-parsers#named-vs-anonymous-nodes"
  (pcase node
    ((and `((type . ,type)
            (value . ,value)
            (content . ,content))
          (guard (string-prefix-p "PREC" type)))
     `((type . ,type)
       (value . ,value)
       (content . ,(tree-edit--inline-type content grammar))))
    (`((type . "SEQ")
       (members . ,members))
     `((type . "SEQ")
       (members . ,(--map (tree-edit--inline-type it grammar) members))))
    (`((type . "ALIAS")
       (content . ,content)
       (named . ,named)
       (value . ,value))
     `((type . "ALIAS")
       (content . ,(tree-edit--inline-type content grammar))
       (named . ,named)
       (value . ,value)))
    (`((type . "REPEAT")
       (content . ,content))
     `((type . "REPEAT")
       (content . ,(tree-edit--inline-type content grammar))))
    (`((type . "REPEAT1")
       (content . ,content))
     `((type . "REPEAT1")
       (content . ,(tree-edit--inline-type content grammar))))
    (`((type . "FIELD")
       (name . ,name)
       (content . ,content))
     `((type . "FIELD")
       (name . ,name)
       (content . ,(tree-edit--inline-type content grammar))))
    ((and `((type . "SYMBOL")
            (name . ,name))
          (guard (and (string-prefix-p "_" (if (symbolp name) (symbol-name name) name))
                      (alist-get (if (symbolp name) name (intern name)) grammar))))
     (tree-edit--inline-type (alist-get (if (symbolp name) name (intern name)) grammar) grammar))
    (`((type . "CHOICE")
       (members . ,members))
     `((type . "CHOICE")
       (members . ,(--map (tree-edit--inline-type it grammar) members))))
    (other other)))

(defun tree-edit--process-node-type (obj)
  "Convert vectors to lists and strings to symbols in OBJ."
  (-tree-map-nodes
   #'-cons-pair-p
   (lambda (it) (pcase it
             (`(type . ,type)
              `(type . ,(intern type)))
             (_ it)))
   obj))

(defun tree-edit--process-grammar (obj)
  "Convert strings to symbols in OBJ."
  (-tree-map-nodes
   #'-cons-pair-p
   (lambda (it)
     (pcase it
       (`(name . ,name)
        `(name . ,(intern name)))
       (`(,a . ,d) `(,a . ,(tree-edit--process-grammar d)))))
   obj))

(defun tree-edit--extract-word-regex (grammar)
  "Extract regex for words in GRAMMAR."
  (let ((identifier-node (alist-get (intern (alist-get 'word grammar)) (alist-get 'rules grammar))))
    (pcase identifier-node
      (`((type . "PATTERN")
         (value . ,regex)) regex)
      (_ (error "Expected regex node, found %s" identifier-node)))))


(defun tree-edit--extract-grammar (raw-grammar)
  "Retrieve and format grammar rules for RAW-GRAMMAR."
  (let ((grammar (alist-get 'rules raw-grammar)))
    (map-apply (lambda (node node-grammar) (cons node (tree-edit--inline-type node-grammar grammar))) grammar)))

(defun tree-edit--generate-grammar-file (path name mode)
  "Generate file contents based on the grammar at PATH for NAME and MODE."
  (let* ((raw-grammar (tree-edit--process-grammar
                       (let ((json-array-type 'list)) (json-read-file path))))
         (grammar (tree-edit--extract-grammar raw-grammar))
         (supertypes (tree-edit--generate-supertypes grammar)))
    ;; FIXME: Formatting this huge string is very slow
    (format tree-edit--grammar-template
            name
            mode
            `',(prin1-to-string grammar)
            (prin1-to-string (tree-edit--extract-word-regex raw-grammar))
            `',(prin1-to-string supertypes)
            `',(prin1-to-string (tree-edit--invert-supertypes supertypes))
            `',(prin1-to-string (tree-edit--generate-containing-types grammar)))))

(-let* (((path name mode) command-line-args-left)
        (file-name (format "tree-edit-%s-grammar.el" name)))
  (message (format "Parsing %s grammar at %s." name path))
  (with-temp-file (format "tree-edit-%s-grammar.el" name)
    (let ((time-start (float-time))
          (templated-string (tree-edit--generate-grammar-file path name mode)))
      (insert templated-string)
      (message
       (format "Wrote grammar to %s after %s seconds."
               file-name
               (round (- (float-time) time-start)))))))

(provide 'tree-edit-generate-grammars)
;;; tree-edit-generate-grammars.el ends here
