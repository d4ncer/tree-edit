;;; tree-edit-java-grammar.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;; Author: Ethan Leba <ethanleba5@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.0"))
;; Homepage: https://github.com/ethan-leba/tree-edit
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;; This is an autogenerated file from 'tree-edit-generate-grammars.el' that contains the grammar
;; and other precalculations for the java language. Please do not manually modify this!
;;
;;; Code:
(require 'mode-local)
(require 'tree-edit)

(setq-mode-local
 java-mode

 tree-edit-grammar
 '
((program
  (type . "REPEAT")
  (content (type . "SYMBOL") (name . statement)))
 (_literal (type . "CHOICE")
	   (members ((type . "SYMBOL")
		     (name . decimal_integer_literal))
		    ((type . "SYMBOL")
		     (name . hex_integer_literal))
		    ((type . "SYMBOL")
		     (name . octal_integer_literal))
		    ((type . "SYMBOL")
		     (name . binary_integer_literal))
		    ((type . "SYMBOL")
		     (name . decimal_floating_point_literal))
		    ((type . "SYMBOL")
		     (name . hex_floating_point_literal))
		    ((type . "SYMBOL")
		     (name . true))
		    ((type . "SYMBOL")
		     (name . false))
		    ((type . "SYMBOL")
		     (name . character_literal))
		    ((type . "SYMBOL")
		     (name . string_literal))
		    ((type . "SYMBOL")
		     (name . null_literal))))
 (decimal_integer_literal (type . "TOKEN")
			  (content (type . "SEQ")
				   (members ((type . "TOKEN")
					     (content (type . "SEQ")
						      (members ((type . "PATTERN")
								(value . "[0-9]+"))
							       ((type . "REPEAT")
								(content (type . "SEQ")
									 (members ((type . "PATTERN")
										   (value . "_+"))
										  ((type . "PATTERN")
										   (value . "[0-9]+"))))))))
					    ((type . "CHOICE")
					     (members ((type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "l"))
								((type . "STRING")
								 (value . "L"))))
						      ((type . "BLANK")))))))
 (hex_integer_literal (type . "TOKEN")
		      (content (type . "SEQ")
			       (members ((type . "CHOICE")
					 (members ((type . "STRING")
						   (value . "0x"))
						  ((type . "STRING")
						   (value . "0X"))))
					((type . "TOKEN")
					 (content (type . "SEQ")
						  (members ((type . "PATTERN")
							    (value . "[A-Fa-f0-9]+"))
							   ((type . "REPEAT")
							    (content (type . "SEQ")
								     (members ((type . "STRING")
									       (value . "_"))
									      ((type . "PATTERN")
									       (value . "[A-Fa-f0-9]+"))))))))
					((type . "CHOICE")
					 (members ((type . "CHOICE")
						   (members ((type . "STRING")
							     (value . "l"))
							    ((type . "STRING")
							     (value . "L"))))
						  ((type . "BLANK")))))))
 (octal_integer_literal (type . "TOKEN")
			(content (type . "SEQ")
				 (members ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "0o"))
						    ((type . "STRING")
						     (value . "0O"))))
					  ((type . "SEQ")
					   (members ((type . "PATTERN")
						     (value . "[0-7]+"))
						    ((type . "REPEAT")
						     (content (type . "SEQ")
							      (members ((type . "STRING")
									(value . "_"))
								       ((type . "PATTERN")
									(value . "[0-7]+")))))))
					  ((type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "STRING")
							       (value . "l"))
							      ((type . "STRING")
							       (value . "L"))))
						    ((type . "BLANK")))))))
 (binary_integer_literal (type . "TOKEN")
			 (content (type . "SEQ")
				  (members ((type . "CHOICE")
					    (members ((type . "STRING")
						      (value . "0b"))
						     ((type . "STRING")
						      (value . "0B"))))
					   ((type . "SEQ")
					    (members ((type . "PATTERN")
						      (value . "[01]+"))
						     ((type . "REPEAT")
						      (content (type . "SEQ")
							       (members ((type . "STRING")
									 (value . "_"))
									((type . "PATTERN")
									 (value . "[01]+")))))))
					   ((type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "STRING")
								(value . "l"))
							       ((type . "STRING")
								(value . "L"))))
						     ((type . "BLANK")))))))
 (decimal_floating_point_literal (type . "TOKEN")
				 (content (type . "CHOICE")
					  (members ((type . "SEQ")
						    (members ((type . "TOKEN")
							      (content (type . "SEQ")
								       (members ((type . "PATTERN")
										 (value . "[0-9]+"))
										((type . "REPEAT")
										 (content (type . "SEQ")
											  (members ((type . "PATTERN")
												    (value . "_+"))
												   ((type . "PATTERN")
												    (value . "[0-9]+"))))))))
							     ((type . "STRING")
							      (value . "."))
							     ((type . "CHOICE")
							      (members ((type . "TOKEN")
									(content (type . "SEQ")
										 (members ((type . "PATTERN")
											   (value . "[0-9]+"))
											  ((type . "REPEAT")
											   (content (type . "SEQ")
												    (members ((type . "PATTERN")
													      (value . "_+"))
													     ((type . "PATTERN")
													      (value . "[0-9]+"))))))))
								       ((type . "BLANK"))))
							     ((type . "CHOICE")
							      (members ((type . "SEQ")
									(members ((type . "PATTERN")
										  (value . "[eE]"))
										 ((type . "CHOICE")
										  (members ((type . "CHOICE")
											    (members ((type . "STRING")
												      (value . "-"))
												     ((type . "STRING")
												      (value . "+"))))
											   ((type . "BLANK"))))
										 ((type . "TOKEN")
										  (content (type . "SEQ")
											   (members ((type . "PATTERN")
												     (value . "[0-9]+"))
												    ((type . "REPEAT")
												     (content (type . "SEQ")
													      (members ((type . "PATTERN")
															(value . "_+"))
														       ((type . "PATTERN")
															(value . "[0-9]+"))))))))))
								       ((type . "BLANK"))))
							     ((type . "CHOICE")
							      (members ((type . "PATTERN")
									(value . "[fFdD]"))
								       ((type . "BLANK"))))))
						   ((type . "SEQ")
						    (members ((type . "STRING")
							      (value . "."))
							     ((type . "TOKEN")
							      (content (type . "SEQ")
								       (members ((type . "PATTERN")
										 (value . "[0-9]+"))
										((type . "REPEAT")
										 (content (type . "SEQ")
											  (members ((type . "PATTERN")
												    (value . "_+"))
												   ((type . "PATTERN")
												    (value . "[0-9]+"))))))))
							     ((type . "CHOICE")
							      (members ((type . "SEQ")
									(members ((type . "PATTERN")
										  (value . "[eE]"))
										 ((type . "CHOICE")
										  (members ((type . "CHOICE")
											    (members ((type . "STRING")
												      (value . "-"))
												     ((type . "STRING")
												      (value . "+"))))
											   ((type . "BLANK"))))
										 ((type . "TOKEN")
										  (content (type . "SEQ")
											   (members ((type . "PATTERN")
												     (value . "[0-9]+"))
												    ((type . "REPEAT")
												     (content (type . "SEQ")
													      (members ((type . "PATTERN")
															(value . "_+"))
														       ((type . "PATTERN")
															(value . "[0-9]+"))))))))))
								       ((type . "BLANK"))))
							     ((type . "CHOICE")
							      (members ((type . "PATTERN")
									(value . "[fFdD]"))
								       ((type . "BLANK"))))))
						   ((type . "SEQ")
						    (members ((type . "TOKEN")
							      (content (type . "SEQ")
								       (members ((type . "PATTERN")
										 (value . "[0-9]+"))
										((type . "REPEAT")
										 (content (type . "SEQ")
											  (members ((type . "PATTERN")
												    (value . "_+"))
												   ((type . "PATTERN")
												    (value . "[0-9]+"))))))))
							     ((type . "PATTERN")
							      (value . "[eEpP]"))
							     ((type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "STRING")
										  (value . "-"))
										 ((type . "STRING")
										  (value . "+"))))
								       ((type . "BLANK"))))
							     ((type . "TOKEN")
							      (content (type . "SEQ")
								       (members ((type . "PATTERN")
										 (value . "[0-9]+"))
										((type . "REPEAT")
										 (content (type . "SEQ")
											  (members ((type . "PATTERN")
												    (value . "_+"))
												   ((type . "PATTERN")
												    (value . "[0-9]+"))))))))
							     ((type . "CHOICE")
							      (members ((type . "PATTERN")
									(value . "[fFdD]"))
								       ((type . "BLANK"))))))
						   ((type . "SEQ")
						    (members ((type . "TOKEN")
							      (content (type . "SEQ")
								       (members ((type . "PATTERN")
										 (value . "[0-9]+"))
										((type . "REPEAT")
										 (content (type . "SEQ")
											  (members ((type . "PATTERN")
												    (value . "_+"))
												   ((type . "PATTERN")
												    (value . "[0-9]+"))))))))
							     ((type . "CHOICE")
							      (members ((type . "SEQ")
									(members ((type . "PATTERN")
										  (value . "[eE]"))
										 ((type . "CHOICE")
										  (members ((type . "CHOICE")
											    (members ((type . "STRING")
												      (value . "-"))
												     ((type . "STRING")
												      (value . "+"))))
											   ((type . "BLANK"))))
										 ((type . "TOKEN")
										  (content (type . "SEQ")
											   (members ((type . "PATTERN")
												     (value . "[0-9]+"))
												    ((type . "REPEAT")
												     (content (type . "SEQ")
													      (members ((type . "PATTERN")
															(value . "_+"))
														       ((type . "PATTERN")
															(value . "[0-9]+"))))))))))
								       ((type . "BLANK"))))
							     ((type . "PATTERN")
							      (value . "[fFdD]")))))))
 (hex_floating_point_literal (type . "TOKEN")
			     (content (type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . "0x"))
							 ((type . "STRING")
							  (value . "0X"))))
					       ((type . "CHOICE")
						(members ((type . "SEQ")
							  (members ((type . "TOKEN")
								    (content (type . "SEQ")
									     (members ((type . "PATTERN")
										       (value . "[A-Fa-f0-9]+"))
										      ((type . "REPEAT")
										       (content (type . "SEQ")
												(members ((type . "STRING")
													  (value . "_"))
													 ((type . "PATTERN")
													  (value . "[A-Fa-f0-9]+"))))))))
								   ((type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "."))
									     ((type . "BLANK"))))))
							 ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "TOKEN")
									      (content (type . "SEQ")
										       (members ((type . "PATTERN")
												 (value . "[A-Fa-f0-9]+"))
												((type . "REPEAT")
												 (content (type . "SEQ")
													  (members ((type . "STRING")
														    (value . "_"))
														   ((type . "PATTERN")
														    (value . "[A-Fa-f0-9]+"))))))))
									     ((type . "BLANK"))))
								   ((type . "STRING")
								    (value . "."))
								   ((type . "TOKEN")
								    (content (type . "SEQ")
									     (members ((type . "PATTERN")
										       (value . "[A-Fa-f0-9]+"))
										      ((type . "REPEAT")
										       (content (type . "SEQ")
												(members ((type . "STRING")
													  (value . "_"))
													 ((type . "PATTERN")
													  (value . "[A-Fa-f0-9]+"))))))))))))
					       ((type . "CHOICE")
						(members ((type . "SEQ")
							  (members ((type . "PATTERN")
								    (value . "[eEpP]"))
								   ((type . "CHOICE")
								    (members ((type . "CHOICE")
									      (members ((type . "STRING")
											(value . "-"))
										       ((type . "STRING")
											(value . "+"))))
									     ((type . "BLANK"))))
								   ((type . "TOKEN")
								    (content (type . "SEQ")
									     (members ((type . "PATTERN")
										       (value . "[0-9]+"))
										      ((type . "REPEAT")
										       (content (type . "SEQ")
												(members ((type . "PATTERN")
													  (value . "_+"))
													 ((type . "PATTERN")
													  (value . "[0-9]+"))))))))
								   ((type . "CHOICE")
								    (members ((type . "PATTERN")
									      (value . "[fFdD]"))
									     ((type . "BLANK"))))))
							 ((type . "BLANK")))))))
 (true (type . "STRING") (value . "true"))
 (false (type . "STRING") (value . "false"))
 (character_literal (type . "TOKEN")
		    (content (type . "SEQ")
			     (members ((type . "STRING")
				       (value . "'"))
				      ((type . "REPEAT1")
				       (content (type . "CHOICE")
						(members ((type . "PATTERN")
							  (value . "[^\\\\'\\n]"))
							 ((type . "PATTERN")
							  (value . "\\\\."))
							 ((type . "PATTERN")
							  (value . "\\\\\\n")))))
				      ((type . "STRING")
				       (value . "'")))))
 (string_literal (type . "TOKEN")
		 (content (type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "STRING")
					      (value . "\""))
					     ((type . "REPEAT")
					      (content (type . "CHOICE")
						       (members ((type . "PATTERN")
								 (value . "[^\\\\\"\\n]"))
								((type . "PATTERN")
								 (value . "\\\\(.|\\n)")))))
					     ((type . "STRING")
					      (value . "\"")))))))
 (null_literal (type . "STRING") (value . "null"))
 (expression (type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . assignment_expression))
		      ((type . "SYMBOL")
		       (name . binary_expression))
		      ((type . "SYMBOL")
		       (name . instanceof_expression))
		      ((type . "SYMBOL")
		       (name . lambda_expression))
		      ((type . "SYMBOL")
		       (name . ternary_expression))
		      ((type . "SYMBOL")
		       (name . update_expression))
		      ((type . "SYMBOL")
		       (name . primary_expression))
		      ((type . "SYMBOL")
		       (name . unary_expression))
		      ((type . "SYMBOL")
		       (name . cast_expression))))
 (cast_expression (type . "PREC")
		  (value . 15)
		  (content (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "type")
					       (content (type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "CHOICE")
									    (members ((type . "SYMBOL")
										      (name . void_type))
										     ((type . "SYMBOL")
										      (name . integral_type))
										     ((type . "SYMBOL")
										      (name . floating_point_type))
										     ((type . "SYMBOL")
										      (name . boolean_type))
										     ((type . "ALIAS")
										      (content (type . "SYMBOL")
											       (name . identifier))
										      (named . t)
										      (value . type_identifier))
										     ((type . "SYMBOL")
										      (name . scoped_type_identifier))
										     ((type . "SYMBOL")
										      (name . generic_type))))
									   ((type . "SYMBOL")
									    (name . array_type))))
								 ((type . "SYMBOL")
								  (name . annotated_type)))))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . "&"))
								 ((type . "FIELD")
								  (name . "type")
								  (content (type . "CHOICE")
									   (members ((type . "CHOICE")
										     (members ((type . "CHOICE")
											       (members ((type . "SYMBOL")
													 (name . void_type))
													((type . "SYMBOL")
													 (name . integral_type))
													((type . "SYMBOL")
													 (name . floating_point_type))
													((type . "SYMBOL")
													 (name . boolean_type))
													((type . "ALIAS")
													 (content (type . "SYMBOL")
														  (name . identifier))
													 (named . t)
													 (value . type_identifier))
													((type . "SYMBOL")
													 (name . scoped_type_identifier))
													((type . "SYMBOL")
													 (name . generic_type))))
											      ((type . "SYMBOL")
											       (name . array_type))))
										    ((type . "SYMBOL")
										     (name . annotated_type))))))))))
				    ((type . "STRING")
				     (value . ")"))
				    ((type . "FIELD")
				     (name . "value")
				     (content (type . "SYMBOL")
					      (name . expression))))))
 (assignment_expression (type . "PREC_RIGHT")
			(value . 0)
			(content (type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "left")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "ALIAS")
							      (content (type . "CHOICE")
								       (members ((type . "STRING")
										 (value . "open"))
										((type . "STRING")
										 (value . "module"))))
							      (named . t)
							      (value . identifier))
							     ((type . "SYMBOL")
							      (name . field_access))
							     ((type . "SYMBOL")
							      (name . array_access)))))
					  ((type . "FIELD")
					   (name . "operator")
					   (content (type . "CHOICE")
						    (members ((type . "STRING")
							      (value . "="))
							     ((type . "STRING")
							      (value . "+="))
							     ((type . "STRING")
							      (value . "-="))
							     ((type . "STRING")
							      (value . "*="))
							     ((type . "STRING")
							      (value . "/="))
							     ((type . "STRING")
							      (value . "&="))
							     ((type . "STRING")
							      (value . "|="))
							     ((type . "STRING")
							      (value . "^="))
							     ((type . "STRING")
							      (value . "%="))
							     ((type . "STRING")
							      (value . "<<="))
							     ((type . "STRING")
							      (value . ">>="))
							     ((type . "STRING")
							      (value . ">>>=")))))
					  ((type . "FIELD")
					   (name . "right")
					   (content (type . "SYMBOL")
						    (name . expression))))))
 (binary_expression (type . "CHOICE")
		    (members ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "==")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "!=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 3)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 2)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "||")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 4)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "+")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 4)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "-")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "*")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "/")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 3)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 2)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "|")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 2)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "^")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "%")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<<")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">>")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">>>")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))))
 (instanceof_expression (type . "PREC")
			(value . 5)
			(content (type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "left")
					   (content (type . "SYMBOL")
						    (name . expression)))
					  ((type . "STRING")
					   (value . "instanceof"))
					  ((type . "FIELD")
					   (name . "right")
					   (content (type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . void_type))
										 ((type . "SYMBOL")
										  (name . integral_type))
										 ((type . "SYMBOL")
										  (name . floating_point_type))
										 ((type . "SYMBOL")
										  (name . boolean_type))
										 ((type . "ALIAS")
										  (content (type . "SYMBOL")
											   (name . identifier))
										  (named . t)
										  (value . type_identifier))
										 ((type . "SYMBOL")
										  (name . scoped_type_identifier))
										 ((type . "SYMBOL")
										  (name . generic_type))))
								       ((type . "SYMBOL")
									(name . array_type))))
							     ((type . "SYMBOL")
							      (name . annotated_type))))))))
 (lambda_expression (type . "SEQ")
		    (members ((type . "FIELD")
			      (name . "parameters")
			      (content (type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . identifier))
						((type . "SYMBOL")
						 (name . formal_parameters))
						((type . "SYMBOL")
						 (name . inferred_parameters)))))
			     ((type . "STRING")
			      (value . "->"))
			     ((type . "FIELD")
			      (name . "body")
			      (content (type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . expression))
						((type . "SYMBOL")
						 (name . block)))))))
 (inferred_parameters (type . "SEQ")
		      (members ((type . "STRING")
				(value . "("))
			       ((type . "SEQ")
				(members ((type . "SYMBOL")
					  (name . identifier))
					 ((type . "REPEAT")
					  (content (type . "SEQ")
						   (members ((type . "STRING")
							     (value . ","))
							    ((type . "SYMBOL")
							     (name . identifier)))))))
			       ((type . "STRING")
				(value . ")"))))
 (ternary_expression (type . "PREC_RIGHT")
		     (value . 1)
		     (content (type . "SEQ")
			      (members ((type . "FIELD")
					(name . "condition")
					(content (type . "SYMBOL")
						 (name . expression)))
				       ((type . "STRING")
					(value . "?"))
				       ((type . "FIELD")
					(name . "consequence")
					(content (type . "SYMBOL")
						 (name . expression)))
				       ((type . "STRING")
					(value . ":"))
				       ((type . "FIELD")
					(name . "alternative")
					(content (type . "SYMBOL")
						 (name . expression))))))
 (unary_expression (type . "CHOICE")
		   (members ((type . "PREC_LEFT")
			     (value . 9)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "+")))
					       ((type . "FIELD")
						(name . "operand")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . 9)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "-")))
					       ((type . "FIELD")
						(name . "operand")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . 8)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "!")))
					       ((type . "FIELD")
						(name . "operand")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . 8)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "~")))
					       ((type . "FIELD")
						(name . "operand")
						(content (type . "SYMBOL")
							 (name . expression))))))))
 (update_expression (type . "PREC_LEFT")
		    (value . 10)
		    (content (type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "SYMBOL")
						 (name . expression))
						((type . "STRING")
						 (value . "++"))))
				      ((type . "SEQ")
				       (members ((type . "SYMBOL")
						 (name . expression))
						((type . "STRING")
						 (value . "--"))))
				      ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "++"))
						((type . "SYMBOL")
						 (name . expression))))
				      ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "--"))
						((type . "SYMBOL")
						 (name . expression)))))))
 (primary_expression (type . "CHOICE")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . decimal_integer_literal))
					((type . "SYMBOL")
					 (name . hex_integer_literal))
					((type . "SYMBOL")
					 (name . octal_integer_literal))
					((type . "SYMBOL")
					 (name . binary_integer_literal))
					((type . "SYMBOL")
					 (name . decimal_floating_point_literal))
					((type . "SYMBOL")
					 (name . hex_floating_point_literal))
					((type . "SYMBOL")
					 (name . true))
					((type . "SYMBOL")
					 (name . false))
					((type . "SYMBOL")
					 (name . character_literal))
					((type . "SYMBOL")
					 (name . string_literal))
					((type . "SYMBOL")
					 (name . null_literal))))
			      ((type . "SYMBOL")
			       (name . class_literal))
			      ((type . "SYMBOL")
			       (name . this))
			      ((type . "SYMBOL")
			       (name . identifier))
			      ((type . "ALIAS")
			       (content (type . "CHOICE")
					(members ((type . "STRING")
						  (value . "open"))
						 ((type . "STRING")
						  (value . "module"))))
			       (named . t)
			       (value . identifier))
			      ((type . "SYMBOL")
			       (name . parenthesized_expression))
			      ((type . "SYMBOL")
			       (name . object_creation_expression))
			      ((type . "SYMBOL")
			       (name . field_access))
			      ((type . "SYMBOL")
			       (name . array_access))
			      ((type . "SYMBOL")
			       (name . method_invocation))
			      ((type . "SYMBOL")
			       (name . method_reference))
			      ((type . "SYMBOL")
			       (name . array_creation_expression))))
 (array_creation_expression (type . "PREC_RIGHT")
			    (value . 0)
			    (content (type . "SEQ")
				     (members ((type . "STRING")
					       (value . "new"))
					      ((type . "FIELD")
					       (name . "type")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . void_type))
								 ((type . "SYMBOL")
								  (name . integral_type))
								 ((type . "SYMBOL")
								  (name . floating_point_type))
								 ((type . "SYMBOL")
								  (name . boolean_type))
								 ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . identifier))
								  (named . t)
								  (value . type_identifier))
								 ((type . "SYMBOL")
								  (name . scoped_type_identifier))
								 ((type . "SYMBOL")
								  (name . generic_type)))))
					      ((type . "CHOICE")
					       (members ((type . "SEQ")
							 (members ((type . "FIELD")
								   (name . "dimensions")
								   (content (type . "REPEAT1")
									    (content (type . "SYMBOL")
										     (name . dimensions_expr))))
								  ((type . "FIELD")
								   (name . "dimensions")
								   (content (type . "CHOICE")
									    (members ((type . "SYMBOL")
										      (name . dimensions))
										     ((type . "BLANK")))))))
							((type . "SEQ")
							 (members ((type . "FIELD")
								   (name . "dimensions")
								   (content (type . "SYMBOL")
									    (name . dimensions)))
								  ((type . "FIELD")
								   (name . "value")
								   (content (type . "SYMBOL")
									    (name . array_initializer))))))))))
 (dimensions_expr (type . "SEQ")
		  (members ((type . "REPEAT")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . marker_annotation))
					      ((type . "SYMBOL")
					       (name . annotation)))))
			   ((type . "STRING")
			    (value . "["))
			   ((type . "SYMBOL")
			    (name . expression))
			   ((type . "STRING")
			    (value . "]"))))
 (parenthesized_expression (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "SYMBOL")
				     (name . expression))
				    ((type . "STRING")
				     (value . ")"))))
 (class_literal (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . void_type))
					     ((type . "SYMBOL")
					      (name . integral_type))
					     ((type . "SYMBOL")
					      (name . floating_point_type))
					     ((type . "SYMBOL")
					      (name . boolean_type))
					     ((type . "ALIAS")
					      (content (type . "SYMBOL")
						       (name . identifier))
					      (named . t)
					      (value . type_identifier))
					     ((type . "SYMBOL")
					      (name . scoped_type_identifier))
					     ((type . "SYMBOL")
					      (name . generic_type))))
				   ((type . "SYMBOL")
				    (name . array_type))))
			 ((type . "STRING")
			  (value . "."))
			 ((type . "STRING")
			  (value . "class"))))
 (object_creation_expression (type . "CHOICE")
			     (members ((type . "PREC_RIGHT")
				       (value . 0)
				       (content (type . "SEQ")
						(members ((type . "STRING")
							  (value . "new"))
							 ((type . "FIELD")
							  (name . "type_arguments")
							  (content (type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . type_arguments))
									    ((type . "BLANK")))))
							 ((type . "FIELD")
							  (name . "type")
							  (content (type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . void_type))
									    ((type . "SYMBOL")
									     (name . integral_type))
									    ((type . "SYMBOL")
									     (name . floating_point_type))
									    ((type . "SYMBOL")
									     (name . boolean_type))
									    ((type . "ALIAS")
									     (content (type . "SYMBOL")
										      (name . identifier))
									     (named . t)
									     (value . type_identifier))
									    ((type . "SYMBOL")
									     (name . scoped_type_identifier))
									    ((type . "SYMBOL")
									     (name . generic_type)))))
							 ((type . "FIELD")
							  (name . "arguments")
							  (content (type . "SYMBOL")
								   (name . argument_list)))
							 ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . class_body))
								   ((type . "BLANK")))))))
				      ((type . "SEQ")
				       (members ((type . "SYMBOL")
						 (name . primary_expression))
						((type . "STRING")
						 (value . "."))
						((type . "PREC_RIGHT")
						 (value . 0)
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . "new"))
								   ((type . "FIELD")
								    (name . "type_arguments")
								    (content (type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . type_arguments))
										      ((type . "BLANK")))))
								   ((type . "FIELD")
								    (name . "type")
								    (content (type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . void_type))
										      ((type . "SYMBOL")
										       (name . integral_type))
										      ((type . "SYMBOL")
										       (name . floating_point_type))
										      ((type . "SYMBOL")
										       (name . boolean_type))
										      ((type . "ALIAS")
										       (content (type . "SYMBOL")
												(name . identifier))
										       (named . t)
										       (value . type_identifier))
										      ((type . "SYMBOL")
										       (name . scoped_type_identifier))
										      ((type . "SYMBOL")
										       (name . generic_type)))))
								   ((type . "FIELD")
								    (name . "arguments")
								    (content (type . "SYMBOL")
									     (name . argument_list)))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . class_body))
									     ((type . "BLANK")))))))))))
 (_unqualified_object_creation_expression (type . "PREC_RIGHT")
					  (value . 0)
					  (content (type . "SEQ")
						   (members ((type . "STRING")
							     (value . "new"))
							    ((type . "FIELD")
							     (name . "type_arguments")
							     (content (type . "CHOICE")
								      (members ((type . "SYMBOL")
										(name . type_arguments))
									       ((type . "BLANK")))))
							    ((type . "FIELD")
							     (name . "type")
							     (content (type . "CHOICE")
								      (members ((type . "SYMBOL")
										(name . void_type))
									       ((type . "SYMBOL")
										(name . integral_type))
									       ((type . "SYMBOL")
										(name . floating_point_type))
									       ((type . "SYMBOL")
										(name . boolean_type))
									       ((type . "ALIAS")
										(content (type . "SYMBOL")
											 (name . identifier))
										(named . t)
										(value . type_identifier))
									       ((type . "SYMBOL")
										(name . scoped_type_identifier))
									       ((type . "SYMBOL")
										(name . generic_type)))))
							    ((type . "FIELD")
							     (name . "arguments")
							     (content (type . "SYMBOL")
								      (name . argument_list)))
							    ((type . "CHOICE")
							     (members ((type . "SYMBOL")
								       (name . class_body))
								      ((type . "BLANK")))))))
 (field_access (type . "SEQ")
	       (members ((type . "FIELD")
			 (name . "object")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . primary_expression))
					   ((type . "SYMBOL")
					    (name . super)))))
			((type . "CHOICE")
			 (members ((type . "SEQ")
				   (members ((type . "STRING")
					     (value . "."))
					    ((type . "SYMBOL")
					     (name . super))))
				  ((type . "BLANK"))))
			((type . "STRING")
			 (value . "."))
			((type . "FIELD")
			 (name . "field")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . identifier))
					   ((type . "ALIAS")
					    (content (type . "CHOICE")
						     (members ((type . "STRING")
							       (value . "open"))
							      ((type . "STRING")
							       (value . "module"))))
					    (named . t)
					    (value . identifier))
					   ((type . "SYMBOL")
					    (name . this)))))))
 (array_access (type . "SEQ")
	       (members ((type . "FIELD")
			 (name . "array")
			 (content (type . "SYMBOL")
				  (name . primary_expression)))
			((type . "STRING")
			 (value . "["))
			((type . "FIELD")
			 (name . "index")
			 (content (type . "SYMBOL") (name . expression)))
			((type . "STRING")
			 (value . "]"))))
 (method_invocation (type . "SEQ")
		    (members ((type . "CHOICE")
			      (members ((type . "FIELD")
					(name . "name")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier)))))
				       ((type . "SEQ")
					(members ((type . "FIELD")
						  (name . "object")
						  (content (type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . primary_expression))
								    ((type . "SYMBOL")
								     (name . super)))))
						 ((type . "STRING")
						  (value . "."))
						 ((type . "CHOICE")
						  (members ((type . "SEQ")
							    (members ((type . "SYMBOL")
								      (name . super))
								     ((type . "STRING")
								      (value . "."))))
							   ((type . "BLANK"))))
						 ((type . "FIELD")
						  (name . "type_arguments")
						  (content (type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . type_arguments))
								    ((type . "BLANK")))))
						 ((type . "FIELD")
						  (name . "name")
						  (content (type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . identifier))
								    ((type . "ALIAS")
								     (content (type . "CHOICE")
									      (members ((type . "STRING")
											(value . "open"))
										       ((type . "STRING")
											(value . "module"))))
								     (named . t)
								     (value . identifier)))))))))
			     ((type . "FIELD")
			      (name . "arguments")
			      (content (type . "SYMBOL")
				       (name . argument_list)))))
 (argument_list (type . "SEQ")
		(members ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "SYMBOL")
					      (name . expression))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "SYMBOL")
								 (name . expression)))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ")"))))
 (method_reference (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . void_type))
								    ((type . "SYMBOL")
								     (name . integral_type))
								    ((type . "SYMBOL")
								     (name . floating_point_type))
								    ((type . "SYMBOL")
								     (name . boolean_type))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . type_identifier))
								    ((type . "SYMBOL")
								     (name . scoped_type_identifier))
								    ((type . "SYMBOL")
								     (name . generic_type))))
							  ((type . "SYMBOL")
							   (name . array_type))))
						((type . "SYMBOL")
						 (name . annotated_type))))
				      ((type . "SYMBOL")
				       (name . primary_expression))
				      ((type . "SYMBOL")
				       (name . super))))
			    ((type . "STRING")
			     (value . "::"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . type_arguments))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "new"))
				      ((type . "SYMBOL")
				       (name . identifier))))))
 (type_arguments (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "<"))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "CHOICE")
					       (members ((type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . void_type))
										      ((type . "SYMBOL")
										       (name . integral_type))
										      ((type . "SYMBOL")
										       (name . floating_point_type))
										      ((type . "SYMBOL")
										       (name . boolean_type))
										      ((type . "ALIAS")
										       (content (type . "SYMBOL")
												(name . identifier))
										       (named . t)
										       (value . type_identifier))
										      ((type . "SYMBOL")
										       (name . scoped_type_identifier))
										      ((type . "SYMBOL")
										       (name . generic_type))))
									    ((type . "SYMBOL")
									     (name . array_type))))
								  ((type . "SYMBOL")
								   (name . annotated_type))))
							((type . "SYMBOL")
							 (name . wildcard))))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "CHOICE")
								  (members ((type . "CHOICE")
									    (members ((type . "CHOICE")
										      (members ((type . "CHOICE")
												(members ((type . "SYMBOL")
													  (name . void_type))
													 ((type . "SYMBOL")
													  (name . integral_type))
													 ((type . "SYMBOL")
													  (name . floating_point_type))
													 ((type . "SYMBOL")
													  (name . boolean_type))
													 ((type . "ALIAS")
													  (content (type . "SYMBOL")
														   (name . identifier))
													  (named . t)
													  (value . type_identifier))
													 ((type . "SYMBOL")
													  (name . scoped_type_identifier))
													 ((type . "SYMBOL")
													  (name . generic_type))))
											       ((type . "SYMBOL")
												(name . array_type))))
										     ((type . "SYMBOL")
										      (name . annotated_type))))
									   ((type . "SYMBOL")
									    (name . wildcard)))))))))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . ">"))))
 (wildcard (type . "SEQ")
	   (members ((type . "REPEAT")
		     (content (type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . marker_annotation))
				       ((type . "SYMBOL")
					(name . annotation)))))
		    ((type . "STRING")
		     (value . "?"))
		    ((type . "CHOICE")
		     (members ((type . "CHOICE")
			       (members ((type . "SEQ")
					 (members ((type . "STRING")
						   (value . "extends"))
						  ((type . "CHOICE")
						   (members ((type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . void_type))
										((type . "SYMBOL")
										 (name . integral_type))
										((type . "SYMBOL")
										 (name . floating_point_type))
										((type . "SYMBOL")
										 (name . boolean_type))
										((type . "ALIAS")
										 (content (type . "SYMBOL")
											  (name . identifier))
										 (named . t)
										 (value . type_identifier))
										((type . "SYMBOL")
										 (name . scoped_type_identifier))
										((type . "SYMBOL")
										 (name . generic_type))))
								      ((type . "SYMBOL")
								       (name . array_type))))
							    ((type . "SYMBOL")
							     (name . annotated_type))))))
					((type . "SEQ")
					 (members ((type . "SYMBOL")
						   (name . super))
						  ((type . "CHOICE")
						   (members ((type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . void_type))
										((type . "SYMBOL")
										 (name . integral_type))
										((type . "SYMBOL")
										 (name . floating_point_type))
										((type . "SYMBOL")
										 (name . boolean_type))
										((type . "ALIAS")
										 (content (type . "SYMBOL")
											  (name . identifier))
										 (named . t)
										 (value . type_identifier))
										((type . "SYMBOL")
										 (name . scoped_type_identifier))
										((type . "SYMBOL")
										 (name . generic_type))))
								      ((type . "SYMBOL")
								       (name . array_type))))
							    ((type . "SYMBOL")
							     (name . annotated_type))))))))
			      ((type . "BLANK"))))))
 (_wildcard_bounds (type . "CHOICE")
		   (members ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "extends"))
				      ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . void_type))
								    ((type . "SYMBOL")
								     (name . integral_type))
								    ((type . "SYMBOL")
								     (name . floating_point_type))
								    ((type . "SYMBOL")
								     (name . boolean_type))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . type_identifier))
								    ((type . "SYMBOL")
								     (name . scoped_type_identifier))
								    ((type . "SYMBOL")
								     (name . generic_type))))
							  ((type . "SYMBOL")
							   (name . array_type))))
						((type . "SYMBOL")
						 (name . annotated_type))))))
			    ((type . "SEQ")
			     (members ((type . "SYMBOL")
				       (name . super))
				      ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . void_type))
								    ((type . "SYMBOL")
								     (name . integral_type))
								    ((type . "SYMBOL")
								     (name . floating_point_type))
								    ((type . "SYMBOL")
								     (name . boolean_type))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . type_identifier))
								    ((type . "SYMBOL")
								     (name . scoped_type_identifier))
								    ((type . "SYMBOL")
								     (name . generic_type))))
							  ((type . "SYMBOL")
							   (name . array_type))))
						((type . "SYMBOL")
						 (name . annotated_type))))))))
 (dimensions (type . "PREC_RIGHT")
	     (value . 0)
	     (content (type . "REPEAT1")
		      (content (type . "SEQ")
			       (members ((type . "REPEAT")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . marker_annotation))
							   ((type . "SYMBOL")
							    (name . annotation)))))
					((type . "STRING")
					 (value . "["))
					((type . "STRING")
					 (value . "]"))))))
 (statement (type . "CHOICE")
	    (members ((type . "SYMBOL")
		      (name . declaration))
		     ((type . "SYMBOL")
		      (name . expression_statement))
		     ((type . "SYMBOL")
		      (name . labeled_statement))
		     ((type . "SYMBOL")
		      (name . if_statement))
		     ((type . "SYMBOL")
		      (name . while_statement))
		     ((type . "SYMBOL")
		      (name . for_statement))
		     ((type . "SYMBOL")
		      (name . enhanced_for_statement))
		     ((type . "SYMBOL")
		      (name . block))
		     ((type . "STRING")
		      (value . ";"))
		     ((type . "SYMBOL")
		      (name . assert_statement))
		     ((type . "SYMBOL")
		      (name . switch_statement))
		     ((type . "SYMBOL")
		      (name . do_statement))
		     ((type . "SYMBOL")
		      (name . break_statement))
		     ((type . "SYMBOL")
		      (name . continue_statement))
		     ((type . "SYMBOL")
		      (name . return_statement))
		     ((type . "SYMBOL")
		      (name . synchronized_statement))
		     ((type . "SYMBOL")
		      (name . local_variable_declaration))
		     ((type . "SYMBOL")
		      (name . throw_statement))
		     ((type . "SYMBOL")
		      (name . try_statement))
		     ((type . "SYMBOL")
		      (name . try_with_resources_statement))))
 (block (type . "SEQ")
	(members ((type . "STRING")
		  (value . "{"))
		 ((type . "REPEAT")
		  (content (type . "SYMBOL") (name . statement)))
		 ((type . "STRING")
		  (value . "}"))))
 (expression_statement (type . "SEQ")
		       (members ((type . "SYMBOL")
				 (name . expression))
				((type . "STRING")
				 (value . ";"))))
 (labeled_statement (type . "SEQ")
		    (members ((type . "SYMBOL")
			      (name . identifier))
			     ((type . "STRING")
			      (value . ":"))
			     ((type . "SYMBOL")
			      (name . statement))))
 (assert_statement (type . "CHOICE")
		   (members ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "assert"))
				      ((type . "SYMBOL")
				       (name . expression))
				      ((type . "STRING")
				       (value . ";"))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "assert"))
				      ((type . "SYMBOL")
				       (name . expression))
				      ((type . "STRING")
				       (value . ":"))
				      ((type . "SYMBOL")
				       (name . expression))
				      ((type . "STRING")
				       (value . ";"))))))
 (switch_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "switch"))
			    ((type . "FIELD")
			     (name . "condition")
			     (content (type . "SYMBOL")
				      (name . parenthesized_expression)))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "SYMBOL")
				      (name . switch_block)))))
 (switch_block (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "{"))
			((type . "REPEAT")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . switch_label))
					   ((type . "SYMBOL")
					    (name . statement)))))
			((type . "STRING")
			 (value . "}"))))
 (switch_label (type . "CHOICE")
	       (members ((type . "SEQ")
			 (members ((type . "STRING")
				   (value . "case"))
				  ((type . "SYMBOL")
				   (name . expression))
				  ((type . "STRING")
				   (value . ":"))))
			((type . "SEQ")
			 (members ((type . "STRING")
				   (value . "default"))
				  ((type . "STRING")
				   (value . ":"))))))
 (do_statement (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "do"))
			((type . "FIELD")
			 (name . "body")
			 (content (type . "SYMBOL") (name . statement)))
			((type . "STRING")
			 (value . "while"))
			((type . "FIELD")
			 (name . "condition")
			 (content (type . "SYMBOL")
				  (name . parenthesized_expression)))
			((type . "STRING")
			 (value . ";"))))
 (break_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "break"))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . identifier))
				     ((type . "BLANK"))))
			   ((type . "STRING")
			    (value . ";"))))
 (continue_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "continue"))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . identifier))
					((type . "BLANK"))))
			      ((type . "STRING")
			       (value . ";"))))
 (return_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "return"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . expression))
				      ((type . "BLANK"))))
			    ((type . "STRING")
			     (value . ";"))))
 (synchronized_statement (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "synchronized"))
				  ((type . "SYMBOL")
				   (name . parenthesized_expression))
				  ((type . "FIELD")
				   (name . "body")
				   (content (type . "SYMBOL") (name . block)))))
 (throw_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "throw"))
			   ((type . "SYMBOL")
			    (name . expression))
			   ((type . "STRING")
			    (value . ";"))))
 (try_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "try"))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "SYMBOL") (name . block)))
			 ((type . "CHOICE")
			  (members ((type . "REPEAT1")
				    (content (type . "SYMBOL")
					     (name . catch_clause)))
				   ((type . "SEQ")
				    (members ((type . "REPEAT")
					      (content (type . "SYMBOL")
						       (name . catch_clause)))
					     ((type . "SYMBOL")
					      (name . finally_clause))))))))
 (catch_clause (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "catch"))
			((type . "STRING")
			 (value . "("))
			((type . "SYMBOL")
			 (name . catch_formal_parameter))
			((type . "STRING")
			 (value . ")"))
			((type . "FIELD")
			 (name . "body")
			 (content (type . "SYMBOL") (name . block)))))
 (catch_formal_parameter (type . "SEQ")
			 (members ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . modifiers))
					    ((type . "BLANK"))))
				  ((type . "SYMBOL")
				   (name . catch_type))
				  ((type . "SEQ")
				   (members ((type . "FIELD")
					     (name . "name")
					     (content (type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . identifier))
							       ((type . "ALIAS")
								(content (type . "CHOICE")
									 (members ((type . "STRING")
										   (value . "open"))
										  ((type . "STRING")
										   (value . "module"))))
								(named . t)
								(value . identifier)))))
					    ((type . "FIELD")
					     (name . "dimensions")
					     (content (type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . dimensions))
							       ((type . "BLANK")))))))))
 (catch_type (type . "SEQ")
	     (members ((type . "CHOICE")
		       (members ((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . void_type))
					  ((type . "SYMBOL")
					   (name . integral_type))
					  ((type . "SYMBOL")
					   (name . floating_point_type))
					  ((type . "SYMBOL")
					   (name . boolean_type))
					  ((type . "ALIAS")
					   (content (type . "SYMBOL")
						    (name . identifier))
					   (named . t)
					   (value . type_identifier))
					  ((type . "SYMBOL")
					   (name . scoped_type_identifier))
					  ((type . "SYMBOL")
					   (name . generic_type))))
				((type . "SYMBOL")
				 (name . array_type))))
		      ((type . "REPEAT")
		       (content (type . "SEQ")
				(members ((type . "STRING")
					  (value . "|"))
					 ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . void_type))
							     ((type . "SYMBOL")
							      (name . integral_type))
							     ((type . "SYMBOL")
							      (name . floating_point_type))
							     ((type . "SYMBOL")
							      (name . boolean_type))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . type_identifier))
							     ((type . "SYMBOL")
							      (name . scoped_type_identifier))
							     ((type . "SYMBOL")
							      (name . generic_type))))
						   ((type . "SYMBOL")
						    (name . array_type)))))))))
 (finally_clause (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "finally"))
			  ((type . "SYMBOL")
			   (name . block))))
 (try_with_resources_statement (type . "SEQ")
			       (members ((type . "STRING")
					 (value . "try"))
					((type . "FIELD")
					 (name . "resources")
					 (content (type . "SYMBOL")
						  (name . resource_specification)))
					((type . "FIELD")
					 (name . "body")
					 (content (type . "SYMBOL")
						  (name . block)))
					((type . "REPEAT")
					 (content (type . "SYMBOL")
						  (name . catch_clause)))
					((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . finally_clause))
						  ((type . "BLANK"))))))
 (resource_specification (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "("))
				  ((type . "SEQ")
				   (members ((type . "SYMBOL")
					     (name . resource))
					    ((type . "REPEAT")
					     (content (type . "SEQ")
						      (members ((type . "STRING")
								(value . ";"))
							       ((type . "SYMBOL")
								(name . resource)))))))
				  ((type . "CHOICE")
				   (members ((type . "STRING")
					     (value . ";"))
					    ((type . "BLANK"))))
				  ((type . "STRING")
				   (value . ")"))))
 (resource (type . "CHOICE")
	   (members ((type . "SEQ")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . modifiers))
					((type . "BLANK"))))
			      ((type . "FIELD")
			       (name . "type")
			       (content (type . "CHOICE")
					(members ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . void_type))
							   ((type . "SYMBOL")
							    (name . integral_type))
							   ((type . "SYMBOL")
							    (name . floating_point_type))
							   ((type . "SYMBOL")
							    (name . boolean_type))
							   ((type . "ALIAS")
							    (content (type . "SYMBOL")
								     (name . identifier))
							    (named . t)
							    (value . type_identifier))
							   ((type . "SYMBOL")
							    (name . scoped_type_identifier))
							   ((type . "SYMBOL")
							    (name . generic_type))))
						 ((type . "SYMBOL")
						  (name . array_type)))))
			      ((type . "SEQ")
			       (members ((type . "FIELD")
					 (name . "name")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . identifier))
							   ((type . "ALIAS")
							    (content (type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "open"))
									      ((type . "STRING")
									       (value . "module"))))
							    (named . t)
							    (value . identifier)))))
					((type . "FIELD")
					 (name . "dimensions")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . dimensions))
							   ((type . "BLANK")))))))
			      ((type . "STRING")
			       (value . "="))
			      ((type . "FIELD")
			       (name . "value")
			       (content (type . "SYMBOL")
					(name . expression)))))
		    ((type . "SYMBOL")
		     (name . identifier))
		    ((type . "SYMBOL")
		     (name . field_access))))
 (if_statement (type . "PREC_RIGHT")
	       (value . 0)
	       (content (type . "SEQ")
			(members ((type . "STRING")
				  (value . "if"))
				 ((type . "FIELD")
				  (name . "condition")
				  (content (type . "SYMBOL")
					   (name . parenthesized_expression)))
				 ((type . "FIELD")
				  (name . "consequence")
				  (content (type . "SYMBOL")
					   (name . statement)))
				 ((type . "CHOICE")
				  (members ((type . "SEQ")
					    (members ((type . "STRING")
						      (value . "else"))
						     ((type . "FIELD")
						      (name . "alternative")
						      (content (type . "SYMBOL")
							       (name . statement)))))
					   ((type . "BLANK")))))))
 (while_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "while"))
			   ((type . "FIELD")
			    (name . "condition")
			    (content (type . "SYMBOL")
				     (name . parenthesized_expression)))
			   ((type . "FIELD")
			    (name . "body")
			    (content (type . "SYMBOL") (name . statement)))))
 (for_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "for"))
			 ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "FIELD")
				    (name . "init")
				    (content (type . "SYMBOL")
					     (name . local_variable_declaration)))
				   ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "SEQ")
							(members ((type . "FIELD")
								  (name . "init")
								  (content (type . "SYMBOL")
									   (name . expression)))
								 ((type . "REPEAT")
								  (content (type . "SEQ")
									   (members ((type . "STRING")
										     (value . ","))
										    ((type . "FIELD")
										     (name . "init")
										     (content (type . "SYMBOL")
											      (name . expression))))))))
						       ((type . "BLANK"))))
					     ((type . "STRING")
					      (value . ";"))))))
			 ((type . "FIELD")
			  (name . "condition")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . expression))
					    ((type . "BLANK")))))
			 ((type . "STRING")
			  (value . ";"))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "FIELD")
					      (name . "update")
					      (content (type . "SYMBOL")
						       (name . expression)))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "FIELD")
								 (name . "update")
								 (content (type . "SYMBOL")
									  (name . expression))))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ")"))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "SYMBOL") (name . statement)))))
 (enhanced_for_statement (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "for"))
				  ((type . "STRING")
				   (value . "("))
				  ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . modifiers))
					    ((type . "BLANK"))))
				  ((type . "FIELD")
				   (name . "type")
				   (content (type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . void_type))
							       ((type . "SYMBOL")
								(name . integral_type))
							       ((type . "SYMBOL")
								(name . floating_point_type))
							       ((type . "SYMBOL")
								(name . boolean_type))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . identifier))
								(named . t)
								(value . type_identifier))
							       ((type . "SYMBOL")
								(name . scoped_type_identifier))
							       ((type . "SYMBOL")
								(name . generic_type))))
						     ((type . "SYMBOL")
						      (name . array_type)))))
				  ((type . "SEQ")
				   (members ((type . "FIELD")
					     (name . "name")
					     (content (type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . identifier))
							       ((type . "ALIAS")
								(content (type . "CHOICE")
									 (members ((type . "STRING")
										   (value . "open"))
										  ((type . "STRING")
										   (value . "module"))))
								(named . t)
								(value . identifier)))))
					    ((type . "FIELD")
					     (name . "dimensions")
					     (content (type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . dimensions))
							       ((type . "BLANK")))))))
				  ((type . "STRING")
				   (value . ":"))
				  ((type . "FIELD")
				   (name . "value")
				   (content (type . "SYMBOL")
					    (name . expression)))
				  ((type . "STRING")
				   (value . ")"))
				  ((type . "FIELD")
				   (name . "body")
				   (content (type . "SYMBOL")
					    (name . statement)))))
 (_annotation (type . "CHOICE")
	      (members ((type . "SYMBOL")
			(name . marker_annotation))
		       ((type . "SYMBOL")
			(name . annotation))))
 (marker_annotation (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "@"))
			     ((type . "FIELD")
			      (name . "name")
			      (content (type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . identifier))
						((type . "ALIAS")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "open"))
								   ((type . "STRING")
								    (value . "module"))))
						 (named . t)
						 (value . identifier))
						((type . "SYMBOL")
						 (name . scoped_identifier)))))))
 (annotation (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "@"))
		      ((type . "FIELD")
		       (name . "name")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . identifier))
					 ((type . "ALIAS")
					  (content (type . "CHOICE")
						   (members ((type . "STRING")
							     (value . "open"))
							    ((type . "STRING")
							     (value . "module"))))
					  (named . t)
					  (value . identifier))
					 ((type . "SYMBOL")
					  (name . scoped_identifier)))))
		      ((type . "FIELD")
		       (name . "arguments")
		       (content (type . "SYMBOL")
				(name . annotation_argument_list)))))
 (annotation_argument_list (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "CHOICE")
				     (members ((type . "PREC")
					       (value . 1)
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . expression))
								 ((type . "SYMBOL")
								  (name . element_value_array_initializer))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . marker_annotation))
									   ((type . "SYMBOL")
									    (name . annotation)))))))
					      ((type . "CHOICE")
					       (members ((type . "SEQ")
							 (members ((type . "SYMBOL")
								   (name . element_value_pair))
								  ((type . "REPEAT")
								   (content (type . "SEQ")
									    (members ((type . "STRING")
										      (value . ","))
										     ((type . "SYMBOL")
										      (name . element_value_pair)))))))
							((type . "BLANK"))))))
				    ((type . "STRING")
				     (value . ")"))))
 (element_value_pair (type . "SEQ")
		     (members ((type . "FIELD")
			       (name . "key")
			       (content (type . "SYMBOL")
					(name . identifier)))
			      ((type . "STRING")
			       (value . "="))
			      ((type . "FIELD")
			       (name . "value")
			       (content (type . "PREC")
					(value . 1)
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . expression))
							  ((type . "SYMBOL")
							   (name . element_value_array_initializer))
							  ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . marker_annotation))
								    ((type . "SYMBOL")
								     (name . annotation))))))))))
 (_element_value (type . "PREC")
		 (value . 1)
		 (content (type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . expression))
				   ((type . "SYMBOL")
				    (name . element_value_array_initializer))
				   ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . marker_annotation))
					     ((type . "SYMBOL")
					      (name . annotation)))))))
 (element_value_array_initializer (type . "SEQ")
				  (members ((type . "STRING")
					    (value . "{"))
					   ((type . "CHOICE")
					    (members ((type . "SEQ")
						      (members ((type . "PREC")
								(value . 1)
								(content (type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . expression))
										  ((type . "SYMBOL")
										   (name . element_value_array_initializer))
										  ((type . "CHOICE")
										   (members ((type . "SYMBOL")
											     (name . marker_annotation))
											    ((type . "SYMBOL")
											     (name . annotation)))))))
							       ((type . "REPEAT")
								(content (type . "SEQ")
									 (members ((type . "STRING")
										   (value . ","))
										  ((type . "PREC")
										   (value . 1)
										   (content (type . "CHOICE")
											    (members ((type . "SYMBOL")
												      (name . expression))
												     ((type . "SYMBOL")
												      (name . element_value_array_initializer))
												     ((type . "CHOICE")
												      (members ((type . "SYMBOL")
														(name . marker_annotation))
													       ((type . "SYMBOL")
														(name . annotation))))))))))))
						     ((type . "BLANK"))))
					   ((type . "CHOICE")
					    (members ((type . "STRING")
						      (value . ","))
						     ((type . "BLANK"))))
					   ((type . "STRING")
					    (value . "}"))))
 (declaration (type . "PREC")
	      (value . 1)
	      (content (type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . module_declaration))
				((type . "SYMBOL")
				 (name . package_declaration))
				((type . "SYMBOL")
				 (name . import_declaration))
				((type . "SYMBOL")
				 (name . class_declaration))
				((type . "SYMBOL")
				 (name . interface_declaration))
				((type . "SYMBOL")
				 (name . annotation_type_declaration))
				((type . "SYMBOL")
				 (name . enum_declaration)))))
 (module_declaration (type . "SEQ")
		     (members ((type . "REPEAT")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . marker_annotation))
						 ((type . "SYMBOL")
						  (name . annotation)))))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . "open"))
					((type . "BLANK"))))
			      ((type . "STRING")
			       (value . "module"))
			      ((type . "FIELD")
			       (name . "name")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . identifier))
						 ((type . "ALIAS")
						  (content (type . "CHOICE")
							   (members ((type . "STRING")
								     (value . "open"))
								    ((type . "STRING")
								     (value . "module"))))
						  (named . t)
						  (value . identifier))
						 ((type . "SYMBOL")
						  (name . scoped_identifier)))))
			      ((type . "FIELD")
			       (name . "body")
			       (content (type . "SYMBOL")
					(name . module_body)))))
 (module_body (type . "SEQ")
	      (members ((type . "STRING")
			(value . "{"))
		       ((type . "REPEAT")
			(content (type . "SYMBOL") (name . module_directive)))
		       ((type . "STRING")
			(value . "}"))))
 (module_directive (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "requires"))
						((type . "REPEAT")
						 (content (type . "SYMBOL")
							  (name . requires_modifier)))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier))
							  ((type . "SYMBOL")
							   (name . scoped_identifier))))))
				      ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "exports"))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier))
							  ((type . "SYMBOL")
							   (name . scoped_identifier))))
						((type . "CHOICE")
						 (members ((type . "STRING")
							   (value . "to"))
							  ((type . "BLANK"))))
						((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . identifier))
								    ((type . "ALIAS")
								     (content (type . "CHOICE")
									      (members ((type . "STRING")
											(value . "open"))
										       ((type . "STRING")
											(value . "module"))))
								     (named . t)
								     (value . identifier))
								    ((type . "SYMBOL")
								     (name . scoped_identifier))))
							  ((type . "BLANK"))))
						((type . "REPEAT")
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . ","))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "ALIAS")
									      (content (type . "CHOICE")
										       (members ((type . "STRING")
												 (value . "open"))
												((type . "STRING")
												 (value . "module"))))
									      (named . t)
									      (value . identifier))
									     ((type . "SYMBOL")
									      (name . scoped_identifier)))))))))
				      ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "opens"))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier))
							  ((type . "SYMBOL")
							   (name . scoped_identifier))))
						((type . "CHOICE")
						 (members ((type . "STRING")
							   (value . "to"))
							  ((type . "BLANK"))))
						((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . identifier))
								    ((type . "ALIAS")
								     (content (type . "CHOICE")
									      (members ((type . "STRING")
											(value . "open"))
										       ((type . "STRING")
											(value . "module"))))
								     (named . t)
								     (value . identifier))
								    ((type . "SYMBOL")
								     (name . scoped_identifier))))
							  ((type . "BLANK"))))
						((type . "REPEAT")
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . ","))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "ALIAS")
									      (content (type . "CHOICE")
										       (members ((type . "STRING")
												 (value . "open"))
												((type . "STRING")
												 (value . "module"))))
									      (named . t)
									      (value . identifier))
									     ((type . "SYMBOL")
									      (name . scoped_identifier)))))))))
				      ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "uses"))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier))
							  ((type . "SYMBOL")
							   (name . scoped_identifier))))))
				      ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "provides"))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier))
							  ((type . "SYMBOL")
							   (name . scoped_identifier))))
						((type . "STRING")
						 (value . "with"))
						((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "ALIAS")
							   (content (type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "open"))
									     ((type . "STRING")
									      (value . "module"))))
							   (named . t)
							   (value . identifier))
							  ((type . "SYMBOL")
							   (name . scoped_identifier))))
						((type . "REPEAT")
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . ","))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "ALIAS")
									      (content (type . "CHOICE")
										       (members ((type . "STRING")
												 (value . "open"))
												((type . "STRING")
												 (value . "module"))))
									      (named . t)
									      (value . identifier))
									     ((type . "SYMBOL")
									      (name . scoped_identifier)))))))))))
			    ((type . "STRING")
			     (value . ";"))))
 (requires_modifier (type . "CHOICE")
		    (members ((type . "STRING")
			      (value . "transitive"))
			     ((type . "STRING")
			      (value . "static"))))
 (package_declaration (type . "SEQ")
		      (members ((type . "REPEAT")
				(content (type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . marker_annotation))
						  ((type . "SYMBOL")
						   (name . annotation)))))
			       ((type . "STRING")
				(value . "package"))
			       ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . identifier))
					 ((type . "ALIAS")
					  (content (type . "CHOICE")
						   (members ((type . "STRING")
							     (value . "open"))
							    ((type . "STRING")
							     (value . "module"))))
					  (named . t)
					  (value . identifier))
					 ((type . "SYMBOL")
					  (name . scoped_identifier))))
			       ((type . "STRING")
				(value . ";"))))
 (import_declaration (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "import"))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . "static"))
					((type . "BLANK"))))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . identifier))
					((type . "ALIAS")
					 (content (type . "CHOICE")
						  (members ((type . "STRING")
							    (value . "open"))
							   ((type . "STRING")
							    (value . "module"))))
					 (named . t)
					 (value . identifier))
					((type . "SYMBOL")
					 (name . scoped_identifier))))
			      ((type . "CHOICE")
			       (members ((type . "SEQ")
					 (members ((type . "STRING")
						   (value . "."))
						  ((type . "SYMBOL")
						   (name . asterisk))))
					((type . "BLANK"))))
			      ((type . "STRING")
			       (value . ";"))))
 (asterisk (type . "STRING") (value . "*"))
 (enum_declaration (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . modifiers))
				      ((type . "BLANK"))))
			    ((type . "STRING")
			     (value . "enum"))
			    ((type . "FIELD")
			     (name . "name")
			     (content (type . "SYMBOL") (name . identifier)))
			    ((type . "FIELD")
			     (name . "interfaces")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . super_interfaces))
					       ((type . "BLANK")))))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "SYMBOL") (name . enum_body)))))
 (enum_body (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "{"))
		     ((type . "CHOICE")
		      (members ((type . "SEQ")
				(members ((type . "SYMBOL")
					  (name . enum_constant))
					 ((type . "REPEAT")
					  (content (type . "SEQ")
						   (members ((type . "STRING")
							     (value . ","))
							    ((type . "SYMBOL")
							     (name . enum_constant)))))))
			       ((type . "BLANK"))))
		     ((type . "CHOICE")
		      (members ((type . "STRING")
				(value . ","))
			       ((type . "BLANK"))))
		     ((type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . enum_body_declarations))
			       ((type . "BLANK"))))
		     ((type . "STRING")
		      (value . "}"))))
 (enum_body_declarations (type . "SEQ")
			 (members ((type . "STRING")
				   (value . ";"))
				  ((type . "REPEAT")
				   (content (type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . field_declaration))
						     ((type . "SYMBOL")
						      (name . method_declaration))
						     ((type . "SYMBOL")
						      (name . class_declaration))
						     ((type . "SYMBOL")
						      (name . interface_declaration))
						     ((type . "SYMBOL")
						      (name . annotation_type_declaration))
						     ((type . "SYMBOL")
						      (name . enum_declaration))
						     ((type . "SYMBOL")
						      (name . block))
						     ((type . "SYMBOL")
						      (name . static_initializer))
						     ((type . "SYMBOL")
						      (name . constructor_declaration))
						     ((type . "STRING")
						      (value . ";")))))))
 (enum_constant (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . modifiers))
				   ((type . "BLANK"))))
			 ((type . "FIELD")
			  (name . "name")
			  (content (type . "SYMBOL") (name . identifier)))
			 ((type . "FIELD")
			  (name . "arguments")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . argument_list))
					    ((type . "BLANK")))))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . class_body))
					    ((type . "BLANK")))))))
 (class_declaration (type . "SEQ")
		    (members ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . modifiers))
				       ((type . "BLANK"))))
			     ((type . "STRING")
			      (value . "class"))
			     ((type . "FIELD")
			      (name . "name")
			      (content (type . "SYMBOL") (name . identifier)))
			     ((type . "CHOICE")
			      (members ((type . "FIELD")
					(name . "type_parameters")
					(content (type . "SYMBOL")
						 (name . type_parameters)))
				       ((type . "BLANK"))))
			     ((type . "CHOICE")
			      (members ((type . "FIELD")
					(name . "superclass")
					(content (type . "SYMBOL")
						 (name . superclass)))
				       ((type . "BLANK"))))
			     ((type . "CHOICE")
			      (members ((type . "FIELD")
					(name . "interfaces")
					(content (type . "SYMBOL")
						 (name . super_interfaces)))
				       ((type . "BLANK"))))
			     ((type . "FIELD")
			      (name . "body")
			      (content (type . "SYMBOL") (name . class_body)))))
 (modifiers (type . "REPEAT1")
	    (content (type . "CHOICE")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . marker_annotation))
					((type . "SYMBOL")
					 (name . annotation))))
			      ((type . "STRING")
			       (value . "public"))
			      ((type . "STRING")
			       (value . "protected"))
			      ((type . "STRING")
			       (value . "private"))
			      ((type . "STRING")
			       (value . "abstract"))
			      ((type . "STRING")
			       (value . "static"))
			      ((type . "STRING")
			       (value . "final"))
			      ((type . "STRING")
			       (value . "strictfp"))
			      ((type . "STRING")
			       (value . "default"))
			      ((type . "STRING")
			       (value . "synchronized"))
			      ((type . "STRING")
			       (value . "native"))
			      ((type . "STRING")
			       (value . "transient"))
			      ((type . "STRING")
			       (value . "volatile")))))
 (type_parameters (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "<"))
			   ((type . "SEQ")
			    (members ((type . "SYMBOL")
				      (name . type_parameter))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "SYMBOL")
							 (name . type_parameter)))))))
			   ((type . "STRING")
			    (value . ">"))))
 (type_parameter (type . "SEQ")
		 (members ((type . "REPEAT")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . marker_annotation))
					     ((type . "SYMBOL")
					      (name . annotation)))))
			  ((type . "SYMBOL")
			   (name . identifier))
			  ((type . "CHOICE")
			   (members ((type . "SYMBOL")
				     (name . type_bound))
				    ((type . "BLANK"))))))
 (type_bound (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "extends"))
		      ((type . "CHOICE")
		       (members ((type . "CHOICE")
				 (members ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . void_type))
						    ((type . "SYMBOL")
						     (name . integral_type))
						    ((type . "SYMBOL")
						     (name . floating_point_type))
						    ((type . "SYMBOL")
						     (name . boolean_type))
						    ((type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . identifier))
						     (named . t)
						     (value . type_identifier))
						    ((type . "SYMBOL")
						     (name . scoped_type_identifier))
						    ((type . "SYMBOL")
						     (name . generic_type))))
					  ((type . "SYMBOL")
					   (name . array_type))))
				((type . "SYMBOL")
				 (name . annotated_type))))
		      ((type . "REPEAT")
		       (content (type . "SEQ")
				(members ((type . "STRING")
					  (value . "&"))
					 ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . void_type))
								       ((type . "SYMBOL")
									(name . integral_type))
								       ((type . "SYMBOL")
									(name . floating_point_type))
								       ((type . "SYMBOL")
									(name . boolean_type))
								       ((type . "ALIAS")
									(content (type . "SYMBOL")
										 (name . identifier))
									(named . t)
									(value . type_identifier))
								       ((type . "SYMBOL")
									(name . scoped_type_identifier))
								       ((type . "SYMBOL")
									(name . generic_type))))
							     ((type . "SYMBOL")
							      (name . array_type))))
						   ((type . "SYMBOL")
						    (name . annotated_type)))))))))
 (superclass (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "extends"))
		      ((type . "CHOICE")
		       (members ((type . "CHOICE")
				 (members ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . void_type))
						    ((type . "SYMBOL")
						     (name . integral_type))
						    ((type . "SYMBOL")
						     (name . floating_point_type))
						    ((type . "SYMBOL")
						     (name . boolean_type))
						    ((type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . identifier))
						     (named . t)
						     (value . type_identifier))
						    ((type . "SYMBOL")
						     (name . scoped_type_identifier))
						    ((type . "SYMBOL")
						     (name . generic_type))))
					  ((type . "SYMBOL")
					   (name . array_type))))
				((type . "SYMBOL")
				 (name . annotated_type))))))
 (super_interfaces (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "implements"))
			    ((type . "SYMBOL")
			     (name . interface_type_list))))
 (interface_type_list (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . void_type))
							     ((type . "SYMBOL")
							      (name . integral_type))
							     ((type . "SYMBOL")
							      (name . floating_point_type))
							     ((type . "SYMBOL")
							      (name . boolean_type))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . type_identifier))
							     ((type . "SYMBOL")
							      (name . scoped_type_identifier))
							     ((type . "SYMBOL")
							      (name . generic_type))))
						   ((type . "SYMBOL")
						    (name . array_type))))
					 ((type . "SYMBOL")
					  (name . annotated_type))))
			       ((type . "REPEAT")
				(content (type . "SEQ")
					 (members ((type . "STRING")
						   (value . ","))
						  ((type . "CHOICE")
						   (members ((type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . void_type))
										((type . "SYMBOL")
										 (name . integral_type))
										((type . "SYMBOL")
										 (name . floating_point_type))
										((type . "SYMBOL")
										 (name . boolean_type))
										((type . "ALIAS")
										 (content (type . "SYMBOL")
											  (name . identifier))
										 (named . t)
										 (value . type_identifier))
										((type . "SYMBOL")
										 (name . scoped_type_identifier))
										((type . "SYMBOL")
										 (name . generic_type))))
								      ((type . "SYMBOL")
								       (name . array_type))))
							    ((type . "SYMBOL")
							     (name . annotated_type)))))))))
 (class_body (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "{"))
		      ((type . "REPEAT")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . field_declaration))
					 ((type . "SYMBOL")
					  (name . method_declaration))
					 ((type . "SYMBOL")
					  (name . class_declaration))
					 ((type . "SYMBOL")
					  (name . interface_declaration))
					 ((type . "SYMBOL")
					  (name . annotation_type_declaration))
					 ((type . "SYMBOL")
					  (name . enum_declaration))
					 ((type . "SYMBOL")
					  (name . block))
					 ((type . "SYMBOL")
					  (name . static_initializer))
					 ((type . "SYMBOL")
					  (name . constructor_declaration))
					 ((type . "STRING")
					  (value . ";")))))
		      ((type . "STRING")
		       (value . "}"))))
 (_class_body_declaration (type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . field_declaration))
				   ((type . "SYMBOL")
				    (name . method_declaration))
				   ((type . "SYMBOL")
				    (name . class_declaration))
				   ((type . "SYMBOL")
				    (name . interface_declaration))
				   ((type . "SYMBOL")
				    (name . annotation_type_declaration))
				   ((type . "SYMBOL")
				    (name . enum_declaration))
				   ((type . "SYMBOL")
				    (name . block))
				   ((type . "SYMBOL")
				    (name . static_initializer))
				   ((type . "SYMBOL")
				    (name . constructor_declaration))
				   ((type . "STRING")
				    (value . ";"))))
 (static_initializer (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "static"))
			      ((type . "SYMBOL")
			       (name . block))))
 (constructor_declaration (type . "SEQ")
			  (members ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . modifiers))
					     ((type . "BLANK"))))
				   ((type . "SEQ")
				    (members ((type . "FIELD")
					      (name . "type_parameters")
					      (content (type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . type_parameters))
								((type . "BLANK")))))
					     ((type . "FIELD")
					      (name . "name")
					      (content (type . "SYMBOL")
						       (name . identifier)))
					     ((type . "FIELD")
					      (name . "parameters")
					      (content (type . "SYMBOL")
						       (name . formal_parameters)))))
				   ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . throws))
					     ((type . "BLANK"))))
				   ((type . "FIELD")
				    (name . "body")
				    (content (type . "SYMBOL")
					     (name . constructor_body)))))
 (_constructor_declarator (type . "SEQ")
			  (members ((type . "FIELD")
				    (name . "type_parameters")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . type_parameters))
						      ((type . "BLANK")))))
				   ((type . "FIELD")
				    (name . "name")
				    (content (type . "SYMBOL")
					     (name . identifier)))
				   ((type . "FIELD")
				    (name . "parameters")
				    (content (type . "SYMBOL")
					     (name . formal_parameters)))))
 (constructor_body (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "{"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . explicit_constructor_invocation))
				      ((type . "BLANK"))))
			    ((type . "REPEAT")
			     (content (type . "SYMBOL") (name . statement)))
			    ((type . "STRING")
			     (value . "}"))))
 (explicit_constructor_invocation (type . "SEQ")
				  (members ((type . "CHOICE")
					    (members ((type . "SEQ")
						      (members ((type . "FIELD")
								(name . "type_arguments")
								(content (type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . type_arguments))
										  ((type . "BLANK")))))
							       ((type . "FIELD")
								(name . "constructor")
								(content (type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . this))
										  ((type . "SYMBOL")
										   (name . super)))))))
						     ((type . "SEQ")
						      (members ((type . "FIELD")
								(name . "object")
								(content (type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . primary_expression)))))
							       ((type . "STRING")
								(value . "."))
							       ((type . "FIELD")
								(name . "type_arguments")
								(content (type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . type_arguments))
										  ((type . "BLANK")))))
							       ((type . "FIELD")
								(name . "constructor")
								(content (type . "SYMBOL")
									 (name . super)))))))
					   ((type . "FIELD")
					    (name . "arguments")
					    (content (type . "SYMBOL")
						     (name . argument_list)))
					   ((type . "STRING")
					    (value . ";"))))
 (_name (type . "CHOICE")
	(members ((type . "SYMBOL")
		  (name . identifier))
		 ((type . "ALIAS")
		  (content (type . "CHOICE")
			   (members ((type . "STRING")
				     (value . "open"))
				    ((type . "STRING")
				     (value . "module"))))
		  (named . t)
		  (value . identifier))
		 ((type . "SYMBOL")
		  (name . scoped_identifier))))
 (scoped_identifier (type . "SEQ")
		    (members ((type . "FIELD")
			      (name . "scope")
			      (content (type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . identifier))
						((type . "ALIAS")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "open"))
								   ((type . "STRING")
								    (value . "module"))))
						 (named . t)
						 (value . identifier))
						((type . "SYMBOL")
						 (name . scoped_identifier)))))
			     ((type . "STRING")
			      (value . "."))
			     ((type . "FIELD")
			      (name . "name")
			      (content (type . "SYMBOL") (name . identifier)))))
 (field_declaration (type . "SEQ")
		    (members ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . modifiers))
				       ((type . "BLANK"))))
			     ((type . "FIELD")
			      (name . "type")
			      (content (type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . void_type))
							  ((type . "SYMBOL")
							   (name . integral_type))
							  ((type . "SYMBOL")
							   (name . floating_point_type))
							  ((type . "SYMBOL")
							   (name . boolean_type))
							  ((type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . identifier))
							   (named . t)
							   (value . type_identifier))
							  ((type . "SYMBOL")
							   (name . scoped_type_identifier))
							  ((type . "SYMBOL")
							   (name . generic_type))))
						((type . "SYMBOL")
						 (name . array_type)))))
			     ((type . "SEQ")
			      (members ((type . "FIELD")
					(name . "declarator")
					(content (type . "SYMBOL")
						 (name . variable_declarator)))
				       ((type . "REPEAT")
					(content (type . "SEQ")
						 (members ((type . "STRING")
							   (value . ","))
							  ((type . "FIELD")
							   (name . "declarator")
							   (content (type . "SYMBOL")
								    (name . variable_declarator))))))))
			     ((type . "STRING")
			      (value . ";"))))
 (annotation_type_declaration (type . "SEQ")
			      (members ((type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . modifiers))
						 ((type . "BLANK"))))
				       ((type . "STRING")
					(value . "@interface"))
				       ((type . "FIELD")
					(name . "name")
					(content (type . "SYMBOL")
						 (name . identifier)))
				       ((type . "FIELD")
					(name . "body")
					(content (type . "SYMBOL")
						 (name . annotation_type_body)))))
 (annotation_type_body (type . "SEQ")
		       (members ((type . "STRING")
				 (value . "{"))
				((type . "REPEAT")
				 (content (type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . annotation_type_element_declaration))
						   ((type . "SYMBOL")
						    (name . constant_declaration))
						   ((type . "SYMBOL")
						    (name . class_declaration))
						   ((type . "SYMBOL")
						    (name . interface_declaration))
						   ((type . "SYMBOL")
						    (name . annotation_type_declaration)))))
				((type . "STRING")
				 (value . "}"))))
 (annotation_type_element_declaration (type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . modifiers))
							 ((type . "BLANK"))))
					       ((type . "FIELD")
						(name . "type")
						(content (type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . void_type))
									    ((type . "SYMBOL")
									     (name . integral_type))
									    ((type . "SYMBOL")
									     (name . floating_point_type))
									    ((type . "SYMBOL")
									     (name . boolean_type))
									    ((type . "ALIAS")
									     (content (type . "SYMBOL")
										      (name . identifier))
									     (named . t)
									     (value . type_identifier))
									    ((type . "SYMBOL")
									     (name . scoped_type_identifier))
									    ((type . "SYMBOL")
									     (name . generic_type))))
								  ((type . "SYMBOL")
								   (name . array_type)))))
					       ((type . "FIELD")
						(name . "name")
						(content (type . "SYMBOL")
							 (name . identifier)))
					       ((type . "STRING")
						(value . "("))
					       ((type . "STRING")
						(value . ")"))
					       ((type . "FIELD")
						(name . "dimensions")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . dimensions))
								  ((type . "BLANK")))))
					       ((type . "CHOICE")
						(members ((type . "SEQ")
							  (members ((type . "STRING")
								    (value . "default"))
								   ((type . "FIELD")
								    (name . "value")
								    (content (type . "PREC")
									     (value . 1)
									     (content (type . "CHOICE")
										      (members ((type . "SYMBOL")
												(name . expression))
											       ((type . "SYMBOL")
												(name . element_value_array_initializer))
											       ((type . "CHOICE")
												(members ((type . "SYMBOL")
													  (name . marker_annotation))
													 ((type . "SYMBOL")
													  (name . annotation))))))))))
							 ((type . "BLANK"))))
					       ((type . "STRING")
						(value . ";"))))
 (_default_value (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "default"))
			  ((type . "FIELD")
			   (name . "value")
			   (content (type . "PREC")
				    (value . 1)
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . expression))
						      ((type . "SYMBOL")
						       (name . element_value_array_initializer))
						      ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . marker_annotation))
								((type . "SYMBOL")
								 (name . annotation))))))))))
 (interface_declaration (type . "SEQ")
			(members ((type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . modifiers))
					   ((type . "BLANK"))))
				 ((type . "STRING")
				  (value . "interface"))
				 ((type . "FIELD")
				  (name . "name")
				  (content (type . "SYMBOL")
					   (name . identifier)))
				 ((type . "FIELD")
				  (name . "type_parameters")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . type_parameters))
						    ((type . "BLANK")))))
				 ((type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . extends_interfaces))
					   ((type . "BLANK"))))
				 ((type . "FIELD")
				  (name . "body")
				  (content (type . "SYMBOL")
					   (name . interface_body)))))
 (extends_interfaces (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "extends"))
			      ((type . "SYMBOL")
			       (name . interface_type_list))))
 (interface_body (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "{"))
			  ((type . "REPEAT")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . constant_declaration))
					     ((type . "SYMBOL")
					      (name . enum_declaration))
					     ((type . "SYMBOL")
					      (name . method_declaration))
					     ((type . "SYMBOL")
					      (name . class_declaration))
					     ((type . "SYMBOL")
					      (name . interface_declaration))
					     ((type . "SYMBOL")
					      (name . annotation_type_declaration))
					     ((type . "STRING")
					      (value . ";")))))
			  ((type . "STRING")
			   (value . "}"))))
 (constant_declaration (type . "SEQ")
		       (members ((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . modifiers))
					  ((type . "BLANK"))))
				((type . "FIELD")
				 (name . "type")
				 (content (type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . void_type))
							     ((type . "SYMBOL")
							      (name . integral_type))
							     ((type . "SYMBOL")
							      (name . floating_point_type))
							     ((type . "SYMBOL")
							      (name . boolean_type))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . type_identifier))
							     ((type . "SYMBOL")
							      (name . scoped_type_identifier))
							     ((type . "SYMBOL")
							      (name . generic_type))))
						   ((type . "SYMBOL")
						    (name . array_type)))))
				((type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "declarator")
					   (content (type . "SYMBOL")
						    (name . variable_declarator)))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "STRING")
							      (value . ","))
							     ((type . "FIELD")
							      (name . "declarator")
							      (content (type . "SYMBOL")
								       (name . variable_declarator))))))))
				((type . "STRING")
				 (value . ";"))))
 (_variable_declarator_list (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "declarator")
				      (content (type . "SYMBOL")
					       (name . variable_declarator)))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "FIELD")
							 (name . "declarator")
							 (content (type . "SYMBOL")
								  (name . variable_declarator))))))))
 (variable_declarator (type . "SEQ")
		      (members ((type . "SEQ")
				(members ((type . "FIELD")
					  (name . "name")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . identifier))
							    ((type . "ALIAS")
							     (content (type . "CHOICE")
								      (members ((type . "STRING")
										(value . "open"))
									       ((type . "STRING")
										(value . "module"))))
							     (named . t)
							     (value . identifier)))))
					 ((type . "FIELD")
					  (name . "dimensions")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . dimensions))
							    ((type . "BLANK")))))))
			       ((type . "CHOICE")
				(members ((type . "SEQ")
					  (members ((type . "STRING")
						    (value . "="))
						   ((type . "FIELD")
						    (name . "value")
						    (content (type . "CHOICE")
							     (members ((type . "SYMBOL")
								       (name . expression))
								      ((type . "SYMBOL")
								       (name . array_initializer)))))))
					 ((type . "BLANK"))))))
 (_variable_declarator_id (type . "SEQ")
			  (members ((type . "FIELD")
				    (name . "name")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . identifier))
						      ((type . "ALIAS")
						       (content (type . "CHOICE")
								(members ((type . "STRING")
									  (value . "open"))
									 ((type . "STRING")
									  (value . "module"))))
						       (named . t)
						       (value . identifier)))))
				   ((type . "FIELD")
				    (name . "dimensions")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . dimensions))
						      ((type . "BLANK")))))))
 (_variable_initializer (type . "CHOICE")
			(members ((type . "SYMBOL")
				  (name . expression))
				 ((type . "SYMBOL")
				  (name . array_initializer))))
 (array_initializer (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "{"))
			     ((type . "CHOICE")
			      (members ((type . "SEQ")
					(members ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . expression))
							   ((type . "SYMBOL")
							    (name . array_initializer))))
						 ((type . "REPEAT")
						  (content (type . "SEQ")
							   (members ((type . "STRING")
								     (value . ","))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . expression))
									      ((type . "SYMBOL")
									       (name . array_initializer)))))))))
				       ((type . "BLANK"))))
			     ((type . "CHOICE")
			      (members ((type . "STRING")
					(value . ","))
				       ((type . "BLANK"))))
			     ((type . "STRING")
			      (value . "}"))))
 (_type (type . "CHOICE")
	(members ((type . "CHOICE")
		  (members ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . void_type))
				     ((type . "SYMBOL")
				      (name . integral_type))
				     ((type . "SYMBOL")
				      (name . floating_point_type))
				     ((type . "SYMBOL")
				      (name . boolean_type))
				     ((type . "ALIAS")
				      (content (type . "SYMBOL")
					       (name . identifier))
				      (named . t)
				      (value . type_identifier))
				     ((type . "SYMBOL")
				      (name . scoped_type_identifier))
				     ((type . "SYMBOL")
				      (name . generic_type))))
			   ((type . "SYMBOL")
			    (name . array_type))))
		 ((type . "SYMBOL")
		  (name . annotated_type))))
 (_unannotated_type (type . "CHOICE")
		    (members ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . void_type))
				       ((type . "SYMBOL")
					(name . integral_type))
				       ((type . "SYMBOL")
					(name . floating_point_type))
				       ((type . "SYMBOL")
					(name . boolean_type))
				       ((type . "ALIAS")
					(content (type . "SYMBOL")
						 (name . identifier))
					(named . t)
					(value . type_identifier))
				       ((type . "SYMBOL")
					(name . scoped_type_identifier))
				       ((type . "SYMBOL")
					(name . generic_type))))
			     ((type . "SYMBOL")
			      (name . array_type))))
 (_simple_type (type . "CHOICE")
	       (members ((type . "SYMBOL")
			 (name . void_type))
			((type . "SYMBOL")
			 (name . integral_type))
			((type . "SYMBOL")
			 (name . floating_point_type))
			((type . "SYMBOL")
			 (name . boolean_type))
			((type . "ALIAS")
			 (content (type . "SYMBOL") (name . identifier))
			 (named . t)
			 (value . type_identifier))
			((type . "SYMBOL")
			 (name . scoped_type_identifier))
			((type . "SYMBOL")
			 (name . generic_type))))
 (annotated_type (type . "SEQ")
		 (members ((type . "REPEAT1")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . marker_annotation))
					     ((type . "SYMBOL")
					      (name . annotation)))))
			  ((type . "CHOICE")
			   (members ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . void_type))
					      ((type . "SYMBOL")
					       (name . integral_type))
					      ((type . "SYMBOL")
					       (name . floating_point_type))
					      ((type . "SYMBOL")
					       (name . boolean_type))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . type_identifier))
					      ((type . "SYMBOL")
					       (name . scoped_type_identifier))
					      ((type . "SYMBOL")
					       (name . generic_type))))
				    ((type . "SYMBOL")
				     (name . array_type))))))
 (scoped_type_identifier (type . "SEQ")
			 (members ((type . "CHOICE")
				   (members ((type . "ALIAS")
					     (content (type . "SYMBOL")
						      (name . identifier))
					     (named . t)
					     (value . type_identifier))
					    ((type . "SYMBOL")
					     (name . scoped_type_identifier))
					    ((type . "SYMBOL")
					     (name . generic_type))))
				  ((type . "STRING")
				   (value . "."))
				  ((type . "REPEAT")
				   (content (type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . marker_annotation))
						     ((type . "SYMBOL")
						      (name . annotation)))))
				  ((type . "ALIAS")
				   (content (type . "SYMBOL")
					    (name . identifier))
				   (named . t)
				   (value . type_identifier))))
 (generic_type (type . "PREC_DYNAMIC")
	       (value . 10)
	       (content (type . "SEQ")
			(members ((type . "CHOICE")
				  (members ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . identifier))
					    (named . t)
					    (value . type_identifier))
					   ((type . "SYMBOL")
					    (name . scoped_type_identifier))))
				 ((type . "SYMBOL")
				  (name . type_arguments)))))
 (array_type (type . "SEQ")
	     (members ((type . "FIELD")
		       (name . "element")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . void_type))
						   ((type . "SYMBOL")
						    (name . integral_type))
						   ((type . "SYMBOL")
						    (name . floating_point_type))
						   ((type . "SYMBOL")
						    (name . boolean_type))
						   ((type . "ALIAS")
						    (content (type . "SYMBOL")
							     (name . identifier))
						    (named . t)
						    (value . type_identifier))
						   ((type . "SYMBOL")
						    (name . scoped_type_identifier))
						   ((type . "SYMBOL")
						    (name . generic_type))))
					 ((type . "SYMBOL")
					  (name . array_type)))))
		      ((type . "FIELD")
		       (name . "dimensions")
		       (content (type . "SYMBOL") (name . dimensions)))))
 (integral_type (type . "CHOICE")
		(members ((type . "STRING")
			  (value . "byte"))
			 ((type . "STRING")
			  (value . "short"))
			 ((type . "STRING")
			  (value . "int"))
			 ((type . "STRING")
			  (value . "long"))
			 ((type . "STRING")
			  (value . "char"))))
 (floating_point_type (type . "CHOICE")
		      (members ((type . "STRING")
				(value . "float"))
			       ((type . "STRING")
				(value . "double"))))
 (boolean_type (type . "STRING") (value . "boolean"))
 (void_type (type . "STRING") (value . "void"))
 (_method_header (type . "SEQ")
		 (members ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "type_parameters")
					       (content (type . "SYMBOL")
							(name . type_parameters)))
					      ((type . "REPEAT")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . marker_annotation))
								 ((type . "SYMBOL")
								  (name . annotation)))))))
				    ((type . "BLANK"))))
			  ((type . "FIELD")
			   (name . "type")
			   (content (type . "CHOICE")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . void_type))
						       ((type . "SYMBOL")
							(name . integral_type))
						       ((type . "SYMBOL")
							(name . floating_point_type))
						       ((type . "SYMBOL")
							(name . boolean_type))
						       ((type . "ALIAS")
							(content (type . "SYMBOL")
								 (name . identifier))
							(named . t)
							(value . type_identifier))
						       ((type . "SYMBOL")
							(name . scoped_type_identifier))
						       ((type . "SYMBOL")
							(name . generic_type))))
					     ((type . "SYMBOL")
					      (name . array_type)))))
			  ((type . "SEQ")
			   (members ((type . "FIELD")
				     (name . "name")
				     (content (type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . identifier))
						       ((type . "ALIAS")
							(content (type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "open"))
									  ((type . "STRING")
									   (value . "module"))))
							(named . t)
							(value . identifier)))))
				    ((type . "FIELD")
				     (name . "parameters")
				     (content (type . "SYMBOL")
					      (name . formal_parameters)))
				    ((type . "FIELD")
				     (name . "dimensions")
				     (content (type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . dimensions))
						       ((type . "BLANK")))))))
			  ((type . "CHOICE")
			   (members ((type . "SYMBOL")
				     (name . throws))
				    ((type . "BLANK"))))))
 (_method_declarator (type . "SEQ")
		     (members ((type . "FIELD")
			       (name . "name")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . identifier))
						 ((type . "ALIAS")
						  (content (type . "CHOICE")
							   (members ((type . "STRING")
								     (value . "open"))
								    ((type . "STRING")
								     (value . "module"))))
						  (named . t)
						  (value . identifier)))))
			      ((type . "FIELD")
			       (name . "parameters")
			       (content (type . "SYMBOL")
					(name . formal_parameters)))
			      ((type . "FIELD")
			       (name . "dimensions")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . dimensions))
						 ((type . "BLANK")))))))
 (formal_parameters (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "("))
			     ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . receiver_parameter))
				       ((type . "BLANK"))))
			     ((type . "CHOICE")
			      (members ((type . "SEQ")
					(members ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . formal_parameter))
							   ((type . "SYMBOL")
							    (name . spread_parameter))))
						 ((type . "REPEAT")
						  (content (type . "SEQ")
							   (members ((type . "STRING")
								     (value . ","))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . formal_parameter))
									      ((type . "SYMBOL")
									       (name . spread_parameter)))))))))
				       ((type . "BLANK"))))
			     ((type . "STRING")
			      (value . ")"))))
 (formal_parameter (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . modifiers))
				      ((type . "BLANK"))))
			    ((type . "FIELD")
			     (name . "type")
			     (content (type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . void_type))
							 ((type . "SYMBOL")
							  (name . integral_type))
							 ((type . "SYMBOL")
							  (name . floating_point_type))
							 ((type . "SYMBOL")
							  (name . boolean_type))
							 ((type . "ALIAS")
							  (content (type . "SYMBOL")
								   (name . identifier))
							  (named . t)
							  (value . type_identifier))
							 ((type . "SYMBOL")
							  (name . scoped_type_identifier))
							 ((type . "SYMBOL")
							  (name . generic_type))))
					       ((type . "SYMBOL")
						(name . array_type)))))
			    ((type . "SEQ")
			     (members ((type . "FIELD")
				       (name . "name")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . identifier))
							 ((type . "ALIAS")
							  (content (type . "CHOICE")
								   (members ((type . "STRING")
									     (value . "open"))
									    ((type . "STRING")
									     (value . "module"))))
							  (named . t)
							  (value . identifier)))))
				      ((type . "FIELD")
				       (name . "dimensions")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . dimensions))
							 ((type . "BLANK")))))))))
 (receiver_parameter (type . "SEQ")
		     (members ((type . "REPEAT")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . marker_annotation))
						 ((type . "SYMBOL")
						  (name . annotation)))))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . void_type))
						  ((type . "SYMBOL")
						   (name . integral_type))
						  ((type . "SYMBOL")
						   (name . floating_point_type))
						  ((type . "SYMBOL")
						   (name . boolean_type))
						  ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . identifier))
						   (named . t)
						   (value . type_identifier))
						  ((type . "SYMBOL")
						   (name . scoped_type_identifier))
						  ((type . "SYMBOL")
						   (name . generic_type))))
					((type . "SYMBOL")
					 (name . array_type))))
			      ((type . "CHOICE")
			       (members ((type . "SEQ")
					 (members ((type . "SYMBOL")
						   (name . identifier))
						  ((type . "STRING")
						   (value . "."))))
					((type . "BLANK"))))
			      ((type . "SYMBOL")
			       (name . this))))
 (spread_parameter (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . modifiers))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . void_type))
						((type . "SYMBOL")
						 (name . integral_type))
						((type . "SYMBOL")
						 (name . floating_point_type))
						((type . "SYMBOL")
						 (name . boolean_type))
						((type . "ALIAS")
						 (content (type . "SYMBOL")
							  (name . identifier))
						 (named . t)
						 (value . type_identifier))
						((type . "SYMBOL")
						 (name . scoped_type_identifier))
						((type . "SYMBOL")
						 (name . generic_type))))
				      ((type . "SYMBOL")
				       (name . array_type))))
			    ((type . "STRING")
			     (value . "..."))
			    ((type . "SYMBOL")
			     (name . variable_declarator))))
 (throws (type . "SEQ")
	 (members ((type . "STRING")
		   (value . "throws"))
		  ((type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . void_type))
							  ((type . "SYMBOL")
							   (name . integral_type))
							  ((type . "SYMBOL")
							   (name . floating_point_type))
							  ((type . "SYMBOL")
							   (name . boolean_type))
							  ((type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . identifier))
							   (named . t)
							   (value . type_identifier))
							  ((type . "SYMBOL")
							   (name . scoped_type_identifier))
							  ((type . "SYMBOL")
							   (name . generic_type))))
						((type . "SYMBOL")
						 (name . array_type))))
				      ((type . "SYMBOL")
				       (name . annotated_type))))
			    ((type . "REPEAT")
			     (content (type . "SEQ")
				      (members ((type . "STRING")
						(value . ","))
					       ((type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . void_type))
									     ((type . "SYMBOL")
									      (name . integral_type))
									     ((type . "SYMBOL")
									      (name . floating_point_type))
									     ((type . "SYMBOL")
									      (name . boolean_type))
									     ((type . "ALIAS")
									      (content (type . "SYMBOL")
										       (name . identifier))
									      (named . t)
									      (value . type_identifier))
									     ((type . "SYMBOL")
									      (name . scoped_type_identifier))
									     ((type . "SYMBOL")
									      (name . generic_type))))
								   ((type . "SYMBOL")
								    (name . array_type))))
							 ((type . "SYMBOL")
							  (name . annotated_type)))))))))))
 (local_variable_declaration (type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . modifiers))
						((type . "BLANK"))))
				      ((type . "FIELD")
				       (name . "type")
				       (content (type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . void_type))
								   ((type . "SYMBOL")
								    (name . integral_type))
								   ((type . "SYMBOL")
								    (name . floating_point_type))
								   ((type . "SYMBOL")
								    (name . boolean_type))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . identifier))
								    (named . t)
								    (value . type_identifier))
								   ((type . "SYMBOL")
								    (name . scoped_type_identifier))
								   ((type . "SYMBOL")
								    (name . generic_type))))
							 ((type . "SYMBOL")
							  (name . array_type)))))
				      ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "declarator")
						 (content (type . "SYMBOL")
							  (name . variable_declarator)))
						((type . "REPEAT")
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . ","))
								   ((type . "FIELD")
								    (name . "declarator")
								    (content (type . "SYMBOL")
									     (name . variable_declarator))))))))
				      ((type . "STRING")
				       (value . ";"))))
 (method_declaration (type . "SEQ")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . modifiers))
					((type . "BLANK"))))
			      ((type . "SEQ")
			       (members ((type . "CHOICE")
					 (members ((type . "SEQ")
						   (members ((type . "FIELD")
							     (name . "type_parameters")
							     (content (type . "SYMBOL")
								      (name . type_parameters)))
							    ((type . "REPEAT")
							     (content (type . "CHOICE")
								      (members ((type . "SYMBOL")
										(name . marker_annotation))
									       ((type . "SYMBOL")
										(name . annotation)))))))
						  ((type . "BLANK"))))
					((type . "FIELD")
					 (name . "type")
					 (content (type . "CHOICE")
						  (members ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . void_type))
								     ((type . "SYMBOL")
								      (name . integral_type))
								     ((type . "SYMBOL")
								      (name . floating_point_type))
								     ((type . "SYMBOL")
								      (name . boolean_type))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . identifier))
								      (named . t)
								      (value . type_identifier))
								     ((type . "SYMBOL")
								      (name . scoped_type_identifier))
								     ((type . "SYMBOL")
								      (name . generic_type))))
							   ((type . "SYMBOL")
							    (name . array_type)))))
					((type . "SEQ")
					 (members ((type . "FIELD")
						   (name . "name")
						   (content (type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . identifier))
								     ((type . "ALIAS")
								      (content (type . "CHOICE")
									       (members ((type . "STRING")
											 (value . "open"))
											((type . "STRING")
											 (value . "module"))))
								      (named . t)
								      (value . identifier)))))
						  ((type . "FIELD")
						   (name . "parameters")
						   (content (type . "SYMBOL")
							    (name . formal_parameters)))
						  ((type . "FIELD")
						   (name . "dimensions")
						   (content (type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . dimensions))
								     ((type . "BLANK")))))))
					((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . throws))
						  ((type . "BLANK"))))))
			      ((type . "CHOICE")
			       (members ((type . "FIELD")
					 (name . "body")
					 (content (type . "SYMBOL")
						  (name . block)))
					((type . "STRING")
					 (value . ";"))))))
 (_reserved_identifier (type . "ALIAS")
		       (content (type . "CHOICE")
				(members ((type . "STRING")
					  (value . "open"))
					 ((type . "STRING")
					  (value . "module"))))
		       (named . t)
		       (value . identifier))
 (this (type . "STRING") (value . "this"))
 (super (type . "STRING") (value . "super"))
 (identifier (type . "PATTERN") (value . "[\\p{L}_$][\\p{L}\\p{Nd}_$]*"))
 (comment (type . "TOKEN")
	  (content (type . "PREC")
		   (value . 1)
		   (content (type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "STRING")
						(value . "//"))
					       ((type . "PATTERN")
						(value . ".*"))))
				     ((type . "SEQ")
				      (members ((type . "STRING")
						(value . "/*"))
					       ((type . "PATTERN")
						(value . "[^*]*\\*+([^/*][^*]*\\*+)*"))
					       ((type . "STRING")
						(value . "/")))))))))


 tree-edit--identifier-regex
 nil

 tree-edit--supertypes
 '
((program
  program)
 (_literal _literal)
 (decimal_integer_literal decimal_integer_literal
			  _literal
			  primary_expression
			  expression
			  _element_value
			  _variable_initializer)
 (hex_integer_literal hex_integer_literal
		      _literal
		      primary_expression
		      expression
		      _element_value
		      _variable_initializer)
 (octal_integer_literal octal_integer_literal
			_literal
			primary_expression
			expression
			_element_value
			_variable_initializer)
 (binary_integer_literal binary_integer_literal
			 _literal
			 primary_expression
			 expression
			 _element_value
			 _variable_initializer)
 (decimal_floating_point_literal decimal_floating_point_literal
				 _literal
				 primary_expression
				 expression
				 _element_value
				 _variable_initializer)
 (hex_floating_point_literal hex_floating_point_literal
			     _literal
			     primary_expression
			     expression
			     _element_value
			     _variable_initializer)
 (true true
       _literal
       primary_expression
       expression
       _element_value
       _variable_initializer)
 (false false
	_literal
	primary_expression
	expression
	_element_value
	_variable_initializer)
 (character_literal character_literal
		    _literal
		    primary_expression
		    expression
		    _element_value
		    _variable_initializer)
 (string_literal string_literal
		 _literal
		 primary_expression
		 expression
		 _element_value
		 _variable_initializer)
 (null_literal null_literal
	       _literal
	       primary_expression
	       expression
	       _element_value
	       _variable_initializer)
 (expression expression _element_value _variable_initializer)
 (cast_expression cast_expression
		  expression
		  _element_value
		  _variable_initializer)
 (assignment_expression assignment_expression
			expression
			_element_value
			_variable_initializer)
 (binary_expression binary_expression
		    expression
		    _element_value
		    _variable_initializer)
 (instanceof_expression instanceof_expression
			expression
			_element_value
			_variable_initializer)
 (lambda_expression lambda_expression
		    expression
		    _element_value
		    _variable_initializer)
 (inferred_parameters inferred_parameters)
 (ternary_expression ternary_expression
		     expression
		     _element_value
		     _variable_initializer)
 (unary_expression unary_expression
		   expression
		   _element_value
		   _variable_initializer)
 (update_expression update_expression
		    expression
		    _element_value
		    _variable_initializer)
 (primary_expression primary_expression
		     expression
		     _element_value
		     _variable_initializer)
 (array_creation_expression array_creation_expression
			    primary_expression
			    expression
			    _element_value
			    _variable_initializer)
 (dimensions_expr dimensions_expr)
 (parenthesized_expression parenthesized_expression
			   primary_expression
			   expression
			   _element_value
			   _variable_initializer)
 (class_literal class_literal
		primary_expression
		expression
		_element_value
		_variable_initializer)
 (object_creation_expression object_creation_expression
			     primary_expression
			     expression
			     _element_value
			     _variable_initializer)
 (_unqualified_object_creation_expression _unqualified_object_creation_expression)
 (field_access field_access
	       primary_expression
	       expression
	       _element_value
	       _variable_initializer)
 (array_access array_access
	       primary_expression
	       expression
	       _element_value
	       _variable_initializer)
 (method_invocation method_invocation
		    primary_expression
		    expression
		    _element_value
		    _variable_initializer)
 (argument_list argument_list)
 (method_reference method_reference
		   primary_expression
		   expression
		   _element_value
		   _variable_initializer)
 (type_arguments type_arguments)
 (wildcard wildcard)
 (_wildcard_bounds _wildcard_bounds)
 (dimensions dimensions)
 (statement statement)
 (block block statement _class_body_declaration)
 (expression_statement expression_statement statement)
 (labeled_statement labeled_statement statement)
 (assert_statement assert_statement statement)
 (switch_statement switch_statement statement)
 (switch_block switch_block)
 (switch_label switch_label)
 (do_statement do_statement statement)
 (break_statement break_statement statement)
 (continue_statement continue_statement statement)
 (return_statement return_statement statement)
 (synchronized_statement synchronized_statement statement)
 (throw_statement throw_statement statement)
 (try_statement try_statement statement)
 (catch_clause catch_clause)
 (catch_formal_parameter catch_formal_parameter)
 (catch_type catch_type)
 (finally_clause finally_clause)
 (try_with_resources_statement try_with_resources_statement statement)
 (resource_specification resource_specification)
 (resource resource)
 (if_statement if_statement statement)
 (while_statement while_statement statement)
 (for_statement for_statement statement)
 (enhanced_for_statement enhanced_for_statement statement)
 (_annotation _annotation)
 (marker_annotation marker_annotation _annotation _element_value)
 (annotation annotation _annotation _element_value)
 (annotation_argument_list annotation_argument_list)
 (element_value_pair element_value_pair)
 (_element_value _element_value)
 (element_value_array_initializer element_value_array_initializer
				  _element_value)
 (declaration declaration statement)
 (module_declaration module_declaration declaration statement)
 (module_body module_body)
 (module_directive module_directive)
 (requires_modifier requires_modifier)
 (package_declaration package_declaration declaration statement)
 (import_declaration import_declaration declaration statement)
 (asterisk asterisk)
 (enum_declaration enum_declaration
		   declaration
		   statement
		   _class_body_declaration)
 (enum_body enum_body)
 (enum_body_declarations enum_body_declarations)
 (enum_constant enum_constant)
 (class_declaration class_declaration
		    declaration
		    statement
		    _class_body_declaration)
 (modifiers modifiers)
 (type_parameters type_parameters)
 (type_parameter type_parameter)
 (type_bound type_bound)
 (superclass superclass)
 (super_interfaces super_interfaces)
 (interface_type_list interface_type_list)
 (class_body class_body)
 (_class_body_declaration _class_body_declaration)
 (static_initializer static_initializer _class_body_declaration)
 (constructor_declaration constructor_declaration _class_body_declaration)
 (_constructor_declarator _constructor_declarator)
 (constructor_body constructor_body)
 (explicit_constructor_invocation explicit_constructor_invocation)
 (_name _name)
 (scoped_identifier scoped_identifier _name)
 (field_declaration field_declaration _class_body_declaration)
 (annotation_type_declaration annotation_type_declaration
			      declaration
			      statement
			      _class_body_declaration)
 (annotation_type_body annotation_type_body)
 (annotation_type_element_declaration annotation_type_element_declaration)
 (_default_value _default_value)
 (interface_declaration interface_declaration
			declaration
			statement
			_class_body_declaration)
 (extends_interfaces extends_interfaces)
 (interface_body interface_body)
 (constant_declaration constant_declaration)
 (_variable_declarator_list _variable_declarator_list)
 (variable_declarator variable_declarator _variable_declarator_list)
 (_variable_declarator_id _variable_declarator_id)
 (_variable_initializer _variable_initializer)
 (array_initializer array_initializer _variable_initializer)
 (_type _type)
 (_unannotated_type _unannotated_type)
 (_simple_type _simple_type)
 (annotated_type annotated_type _type)
 (scoped_type_identifier scoped_type_identifier
			 _type
			 _unannotated_type
			 _simple_type)
 (generic_type generic_type _type _unannotated_type _simple_type)
 (array_type array_type _type _unannotated_type)
 (integral_type integral_type _type _unannotated_type _simple_type)
 (floating_point_type floating_point_type
		      _type
		      _unannotated_type
		      _simple_type)
 (boolean_type boolean_type _type _unannotated_type _simple_type)
 (void_type void_type _type _unannotated_type _simple_type)
 (_method_header _method_header)
 (_method_declarator _method_declarator)
 (formal_parameters formal_parameters)
 (formal_parameter formal_parameter)
 (receiver_parameter receiver_parameter)
 (spread_parameter spread_parameter)
 (throws throws)
 (local_variable_declaration local_variable_declaration statement)
 (method_declaration method_declaration _class_body_declaration)
 (_reserved_identifier _reserved_identifier)
 (this this
       primary_expression
       expression
       _element_value
       _variable_initializer)
 (super super)
 (identifier identifier
	     primary_expression
	     expression
	     _element_value
	     _variable_initializer
	     _name
	     _variable_declarator_id
	     _reserved_identifier)
 (comment comment))


 tree-edit--subtypes
 '
((comment comment)
 (identifier identifier)
 (super super)
 (this this)
 (_reserved_identifier identifier _reserved_identifier)
 (method_declaration method_declaration)
 (local_variable_declaration local_variable_declaration)
 (throws throws)
 (spread_parameter spread_parameter)
 (receiver_parameter receiver_parameter)
 (formal_parameter formal_parameter)
 (formal_parameters formal_parameters)
 (_method_declarator _method_declarator)
 (_method_header _method_header)
 (void_type void_type)
 (boolean_type boolean_type)
 (floating_point_type floating_point_type)
 (integral_type integral_type)
 (array_type array_type)
 (generic_type generic_type)
 (scoped_type_identifier scoped_type_identifier)
 (annotated_type annotated_type)
 (_simple_type void_type
	       boolean_type
	       floating_point_type
	       integral_type
	       generic_type
	       scoped_type_identifier
	       _simple_type)
 (_unannotated_type void_type
		    boolean_type
		    floating_point_type
		    integral_type
		    array_type
		    generic_type
		    scoped_type_identifier
		    _unannotated_type)
 (_type void_type
	boolean_type
	floating_point_type
	integral_type
	array_type
	generic_type
	scoped_type_identifier
	annotated_type
	_type)
 (array_initializer array_initializer)
 (_variable_declarator_id identifier _variable_declarator_id)
 (variable_declarator variable_declarator)
 (_variable_declarator_list variable_declarator _variable_declarator_list)
 (constant_declaration constant_declaration)
 (interface_body interface_body)
 (extends_interfaces extends_interfaces)
 (interface_declaration interface_declaration)
 (_default_value _default_value)
 (annotation_type_element_declaration annotation_type_element_declaration)
 (annotation_type_body annotation_type_body)
 (annotation_type_declaration annotation_type_declaration)
 (field_declaration field_declaration)
 (scoped_identifier scoped_identifier)
 (_name identifier scoped_identifier _name)
 (explicit_constructor_invocation explicit_constructor_invocation)
 (constructor_body constructor_body)
 (_constructor_declarator _constructor_declarator)
 (constructor_declaration constructor_declaration)
 (static_initializer static_initializer)
 (class_body class_body)
 (interface_type_list interface_type_list)
 (super_interfaces super_interfaces)
 (superclass superclass)
 (type_bound type_bound)
 (type_parameter type_parameter)
 (type_parameters type_parameters)
 (modifiers modifiers)
 (class_declaration class_declaration)
 (enum_constant enum_constant)
 (enum_body_declarations enum_body_declarations)
 (enum_body enum_body)
 (enum_declaration enum_declaration)
 (asterisk asterisk)
 (import_declaration import_declaration)
 (package_declaration package_declaration)
 (requires_modifier requires_modifier)
 (module_directive module_directive)
 (module_body module_body)
 (module_declaration module_declaration)
 (declaration interface_declaration
	      annotation_type_declaration
	      class_declaration
	      enum_declaration
	      import_declaration
	      package_declaration
	      module_declaration
	      declaration)
 (element_value_array_initializer element_value_array_initializer)
 (element_value_pair element_value_pair)
 (annotation_argument_list annotation_argument_list)
 (annotation annotation)
 (marker_annotation marker_annotation)
 (_annotation annotation marker_annotation _annotation)
 (enhanced_for_statement enhanced_for_statement)
 (for_statement for_statement)
 (while_statement while_statement)
 (if_statement if_statement)
 (resource resource)
 (resource_specification resource_specification)
 (try_with_resources_statement try_with_resources_statement)
 (finally_clause finally_clause)
 (catch_type catch_type)
 (catch_formal_parameter catch_formal_parameter)
 (catch_clause catch_clause)
 (try_statement try_statement)
 (throw_statement throw_statement)
 (synchronized_statement synchronized_statement)
 (return_statement return_statement)
 (continue_statement continue_statement)
 (break_statement break_statement)
 (do_statement do_statement)
 (switch_label switch_label)
 (switch_block switch_block)
 (switch_statement switch_statement)
 (assert_statement assert_statement)
 (labeled_statement labeled_statement)
 (expression_statement expression_statement)
 (_class_body_declaration method_declaration
			  interface_declaration
			  annotation_type_declaration
			  field_declaration
			  constructor_declaration
			  static_initializer
			  _class_body_declaration
			  class_declaration
			  enum_declaration
			  block)
 (block block)
 (statement local_variable_declaration
	    interface_declaration
	    annotation_type_declaration
	    class_declaration
	    enum_declaration
	    import_declaration
	    package_declaration
	    module_declaration
	    declaration
	    enhanced_for_statement
	    for_statement
	    while_statement
	    if_statement
	    try_with_resources_statement
	    try_statement
	    throw_statement
	    synchronized_statement
	    return_statement
	    continue_statement
	    break_statement
	    do_statement
	    switch_statement
	    assert_statement
	    labeled_statement
	    expression_statement
	    block
	    statement)
 (dimensions dimensions)
 (_wildcard_bounds _wildcard_bounds)
 (wildcard wildcard)
 (type_arguments type_arguments)
 (method_reference method_reference)
 (argument_list argument_list)
 (method_invocation method_invocation)
 (array_access array_access)
 (field_access field_access)
 (_unqualified_object_creation_expression _unqualified_object_creation_expression)
 (object_creation_expression object_creation_expression)
 (class_literal class_literal)
 (parenthesized_expression parenthesized_expression)
 (dimensions_expr dimensions_expr)
 (array_creation_expression array_creation_expression)
 (update_expression update_expression)
 (unary_expression unary_expression)
 (ternary_expression ternary_expression)
 (inferred_parameters inferred_parameters)
 (lambda_expression lambda_expression)
 (instanceof_expression instanceof_expression)
 (binary_expression binary_expression)
 (assignment_expression assignment_expression)
 (cast_expression cast_expression)
 (null_literal null_literal)
 (string_literal string_literal)
 (character_literal character_literal)
 (false false)
 (true true)
 (hex_floating_point_literal hex_floating_point_literal)
 (decimal_floating_point_literal decimal_floating_point_literal)
 (binary_integer_literal binary_integer_literal)
 (octal_integer_literal octal_integer_literal)
 (hex_integer_literal hex_integer_literal)
 (_variable_initializer identifier
			this
			array_initializer
			_variable_initializer
			method_reference
			method_invocation
			array_access
			field_access
			object_creation_expression
			class_literal
			parenthesized_expression
			array_creation_expression
			primary_expression
			update_expression
			unary_expression
			ternary_expression
			lambda_expression
			instanceof_expression
			binary_expression
			assignment_expression
			cast_expression
			expression
			null_literal
			string_literal
			character_literal
			false
			true
			hex_floating_point_literal
			decimal_floating_point_literal
			binary_integer_literal
			octal_integer_literal
			hex_integer_literal
			decimal_integer_literal)
 (_element_value identifier
		 this
		 element_value_array_initializer
		 _element_value
		 annotation
		 marker_annotation
		 method_reference
		 method_invocation
		 array_access
		 field_access
		 object_creation_expression
		 class_literal
		 parenthesized_expression
		 array_creation_expression
		 primary_expression
		 update_expression
		 unary_expression
		 ternary_expression
		 lambda_expression
		 instanceof_expression
		 binary_expression
		 assignment_expression
		 cast_expression
		 expression
		 null_literal
		 string_literal
		 character_literal
		 false
		 true
		 hex_floating_point_literal
		 decimal_floating_point_literal
		 binary_integer_literal
		 octal_integer_literal
		 hex_integer_literal
		 decimal_integer_literal)
 (expression identifier
	     this
	     method_reference
	     method_invocation
	     array_access
	     field_access
	     object_creation_expression
	     class_literal
	     parenthesized_expression
	     array_creation_expression
	     primary_expression
	     update_expression
	     unary_expression
	     ternary_expression
	     lambda_expression
	     instanceof_expression
	     binary_expression
	     assignment_expression
	     cast_expression
	     expression
	     null_literal
	     string_literal
	     character_literal
	     false
	     true
	     hex_floating_point_literal
	     decimal_floating_point_literal
	     binary_integer_literal
	     octal_integer_literal
	     hex_integer_literal
	     decimal_integer_literal)
 (primary_expression identifier
		     this
		     method_reference
		     method_invocation
		     array_access
		     field_access
		     object_creation_expression
		     class_literal
		     parenthesized_expression
		     array_creation_expression
		     primary_expression
		     null_literal
		     string_literal
		     character_literal
		     false
		     true
		     hex_floating_point_literal
		     decimal_floating_point_literal
		     binary_integer_literal
		     octal_integer_literal
		     hex_integer_literal
		     decimal_integer_literal)
 (decimal_integer_literal decimal_integer_literal)
 (_literal null_literal
	   string_literal
	   character_literal
	   false
	   true
	   hex_floating_point_literal
	   decimal_floating_point_literal
	   binary_integer_literal
	   octal_integer_literal
	   hex_integer_literal
	   decimal_integer_literal
	   _literal)
 (program
  program))


 tree-edit--alias-map
 '
((program)
 (_literal)
 (decimal_integer_literal)
 (hex_integer_literal)
 (octal_integer_literal)
 (binary_integer_literal)
 (decimal_floating_point_literal)
 (hex_floating_point_literal)
 (true)
 (false)
 (character_literal)
 (string_literal)
 (null_literal)
 (expression)
 (cast_expression (identifier . type_identifier)
		  (identifier . type_identifier))
 (assignment_expression)
 (binary_expression)
 (instanceof_expression (identifier . type_identifier))
 (lambda_expression)
 (inferred_parameters)
 (ternary_expression)
 (unary_expression)
 (update_expression)
 (primary_expression)
 (array_creation_expression (identifier . type_identifier))
 (dimensions_expr)
 (parenthesized_expression)
 (class_literal (identifier . type_identifier))
 (object_creation_expression (identifier . type_identifier)
			     (identifier . type_identifier))
 (_unqualified_object_creation_expression (identifier . type_identifier))
 (field_access)
 (array_access)
 (method_invocation)
 (argument_list)
 (method_reference (identifier . type_identifier))
 (type_arguments (identifier . type_identifier)
		 (identifier . type_identifier))
 (wildcard (identifier . type_identifier) (identifier . type_identifier))
 (_wildcard_bounds (identifier . type_identifier)
		   (identifier . type_identifier))
 (dimensions)
 (statement)
 (block)
 (expression_statement)
 (labeled_statement)
 (assert_statement)
 (switch_statement)
 (switch_block)
 (switch_label)
 (do_statement)
 (break_statement)
 (continue_statement)
 (return_statement)
 (synchronized_statement)
 (throw_statement)
 (try_statement)
 (catch_clause)
 (catch_formal_parameter)
 (catch_type (identifier . type_identifier) (identifier . type_identifier))
 (finally_clause)
 (try_with_resources_statement)
 (resource_specification)
 (resource (identifier . type_identifier))
 (if_statement)
 (while_statement)
 (for_statement)
 (enhanced_for_statement (identifier . type_identifier))
 (_annotation)
 (marker_annotation)
 (annotation)
 (annotation_argument_list)
 (element_value_pair)
 (_element_value)
 (element_value_array_initializer)
 (declaration)
 (module_declaration)
 (module_body)
 (module_directive)
 (requires_modifier)
 (package_declaration)
 (import_declaration)
 (asterisk)
 (enum_declaration)
 (enum_body)
 (enum_body_declarations)
 (enum_constant)
 (class_declaration)
 (modifiers)
 (type_parameters)
 (type_parameter)
 (type_bound (identifier . type_identifier) (identifier . type_identifier))
 (superclass (identifier . type_identifier))
 (super_interfaces)
 (interface_type_list (identifier . type_identifier)
		      (identifier . type_identifier))
 (class_body)
 (_class_body_declaration)
 (static_initializer)
 (constructor_declaration)
 (_constructor_declarator)
 (constructor_body)
 (explicit_constructor_invocation)
 (_name)
 (scoped_identifier)
 (field_declaration (identifier . type_identifier))
 (annotation_type_declaration)
 (annotation_type_body)
 (annotation_type_element_declaration (identifier . type_identifier))
 (_default_value)
 (interface_declaration)
 (extends_interfaces)
 (interface_body)
 (constant_declaration (identifier . type_identifier))
 (_variable_declarator_list)
 (variable_declarator)
 (_variable_declarator_id)
 (_variable_initializer)
 (array_initializer)
 (_type (identifier . type_identifier))
 (_unannotated_type (identifier . type_identifier))
 (_simple_type (identifier . type_identifier))
 (annotated_type (identifier . type_identifier))
 (scoped_type_identifier (identifier . type_identifier)
			 (identifier . type_identifier))
 (generic_type (identifier . type_identifier))
 (array_type (identifier . type_identifier))
 (integral_type)
 (floating_point_type)
 (boolean_type)
 (void_type)
 (_method_header (identifier . type_identifier))
 (_method_declarator)
 (formal_parameters)
 (formal_parameter (identifier . type_identifier))
 (receiver_parameter (identifier . type_identifier))
 (spread_parameter (identifier . type_identifier))
 (throws (identifier . type_identifier) (identifier . type_identifier))
 (local_variable_declaration (identifier . type_identifier))
 (method_declaration (identifier . type_identifier))
 (_reserved_identifier)
 (this)
 (super)
 (identifier)
 (comment))


 tree-edit--containing-types
 '
((program
  statement)
 (_literal decimal_integer_literal
	   hex_integer_literal
	   octal_integer_literal
	   binary_integer_literal
	   decimal_floating_point_literal
	   hex_floating_point_literal
	   true
	   false
	   character_literal
	   string_literal
	   null_literal)
 (decimal_integer_literal)
 (hex_integer_literal)
 (octal_integer_literal)
 (binary_integer_literal)
 (decimal_floating_point_literal)
 (hex_floating_point_literal)
 (true)
 (false)
 (character_literal)
 (string_literal)
 (null_literal)
 (expression assignment_expression
	     binary_expression
	     instanceof_expression
	     lambda_expression
	     ternary_expression
	     update_expression
	     primary_expression
	     unary_expression
	     cast_expression)
 (cast_expression void_type
		  integral_type
		  floating_point_type
		  boolean_type
		  type_identifier
		  scoped_type_identifier
		  generic_type
		  array_type
		  annotated_type
		  void_type
		  integral_type
		  floating_point_type
		  boolean_type
		  type_identifier
		  scoped_type_identifier
		  generic_type
		  array_type
		  annotated_type
		  expression)
 (assignment_expression identifier
			identifier
			field_access
			array_access
			expression)
 (binary_expression expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression)
 (instanceof_expression expression
			void_type
			integral_type
			floating_point_type
			boolean_type
			type_identifier
			scoped_type_identifier
			generic_type
			array_type
			annotated_type)
 (lambda_expression identifier
		    formal_parameters
		    inferred_parameters
		    expression
		    block)
 (inferred_parameters identifier identifier)
 (ternary_expression expression expression expression)
 (unary_expression expression expression expression expression)
 (update_expression expression expression expression expression)
 (primary_expression decimal_integer_literal
		     hex_integer_literal
		     octal_integer_literal
		     binary_integer_literal
		     decimal_floating_point_literal
		     hex_floating_point_literal
		     true
		     false
		     character_literal
		     string_literal
		     null_literal
		     class_literal
		     this
		     identifier
		     identifier
		     parenthesized_expression
		     object_creation_expression
		     field_access
		     array_access
		     method_invocation
		     method_reference
		     array_creation_expression)
 (array_creation_expression void_type
			    integral_type
			    floating_point_type
			    boolean_type
			    type_identifier
			    scoped_type_identifier
			    generic_type
			    dimensions_expr
			    dimensions
			    dimensions
			    array_initializer)
 (dimensions_expr marker_annotation annotation expression)
 (parenthesized_expression expression)
 (class_literal void_type
		integral_type
		floating_point_type
		boolean_type
		type_identifier
		scoped_type_identifier
		generic_type
		array_type)
 (object_creation_expression type_arguments
			     void_type
			     integral_type
			     floating_point_type
			     boolean_type
			     type_identifier
			     scoped_type_identifier
			     generic_type
			     argument_list
			     class_body
			     primary_expression
			     type_arguments
			     void_type
			     integral_type
			     floating_point_type
			     boolean_type
			     type_identifier
			     scoped_type_identifier
			     generic_type
			     argument_list
			     class_body)
 (_unqualified_object_creation_expression type_arguments
					  void_type
					  integral_type
					  floating_point_type
					  boolean_type
					  type_identifier
					  scoped_type_identifier
					  generic_type
					  argument_list
					  class_body)
 (field_access primary_expression super super identifier identifier this)
 (array_access primary_expression expression)
 (method_invocation identifier
		    identifier
		    primary_expression
		    super
		    super
		    type_arguments
		    identifier
		    identifier
		    argument_list)
 (argument_list expression expression)
 (method_reference void_type
		   integral_type
		   floating_point_type
		   boolean_type
		   type_identifier
		   scoped_type_identifier
		   generic_type
		   array_type
		   annotated_type
		   primary_expression
		   super
		   type_arguments
		   identifier)
 (type_arguments void_type
		 integral_type
		 floating_point_type
		 boolean_type
		 type_identifier
		 scoped_type_identifier
		 generic_type
		 array_type
		 annotated_type
		 wildcard
		 void_type
		 integral_type
		 floating_point_type
		 boolean_type
		 type_identifier
		 scoped_type_identifier
		 generic_type
		 array_type
		 annotated_type
		 wildcard)
 (wildcard marker_annotation
	   annotation
	   void_type
	   integral_type
	   floating_point_type
	   boolean_type
	   type_identifier
	   scoped_type_identifier
	   generic_type
	   array_type
	   annotated_type
	   super
	   void_type
	   integral_type
	   floating_point_type
	   boolean_type
	   type_identifier
	   scoped_type_identifier
	   generic_type
	   array_type
	   annotated_type)
 (_wildcard_bounds void_type
		   integral_type
		   floating_point_type
		   boolean_type
		   type_identifier
		   scoped_type_identifier
		   generic_type
		   array_type
		   annotated_type
		   super
		   void_type
		   integral_type
		   floating_point_type
		   boolean_type
		   type_identifier
		   scoped_type_identifier
		   generic_type
		   array_type
		   annotated_type)
 (dimensions marker_annotation annotation)
 (statement declaration
	    expression_statement
	    labeled_statement
	    if_statement
	    while_statement
	    for_statement
	    enhanced_for_statement
	    block
	    assert_statement
	    switch_statement
	    do_statement
	    break_statement
	    continue_statement
	    return_statement
	    synchronized_statement
	    local_variable_declaration
	    throw_statement
	    try_statement
	    try_with_resources_statement)
 (block statement)
 (expression_statement expression)
 (labeled_statement identifier statement)
 (assert_statement expression expression expression)
 (switch_statement parenthesized_expression switch_block)
 (switch_block switch_label statement)
 (switch_label expression)
 (do_statement statement parenthesized_expression)
 (break_statement identifier)
 (continue_statement identifier)
 (return_statement expression)
 (synchronized_statement parenthesized_expression block)
 (throw_statement expression)
 (try_statement block catch_clause catch_clause finally_clause)
 (catch_clause catch_formal_parameter block)
 (catch_formal_parameter modifiers
			 catch_type
			 identifier
			 identifier
			 dimensions)
 (catch_type void_type
	     integral_type
	     floating_point_type
	     boolean_type
	     type_identifier
	     scoped_type_identifier
	     generic_type
	     array_type
	     void_type
	     integral_type
	     floating_point_type
	     boolean_type
	     type_identifier
	     scoped_type_identifier
	     generic_type
	     array_type)
 (finally_clause block)
 (try_with_resources_statement resource_specification
			       block
			       catch_clause
			       finally_clause)
 (resource_specification resource resource)
 (resource modifiers
	   void_type
	   integral_type
	   floating_point_type
	   boolean_type
	   type_identifier
	   scoped_type_identifier
	   generic_type
	   array_type
	   identifier
	   identifier
	   dimensions
	   expression
	   identifier
	   field_access)
 (if_statement parenthesized_expression statement statement)
 (while_statement parenthesized_expression statement)
 (for_statement local_variable_declaration
		expression
		expression
		expression
		expression
		expression
		statement)
 (enhanced_for_statement modifiers
			 void_type
			 integral_type
			 floating_point_type
			 boolean_type
			 type_identifier
			 scoped_type_identifier
			 generic_type
			 array_type
			 identifier
			 identifier
			 dimensions
			 expression
			 statement)
 (_annotation marker_annotation annotation)
 (marker_annotation identifier identifier scoped_identifier)
 (annotation identifier
	     identifier
	     scoped_identifier
	     annotation_argument_list)
 (annotation_argument_list expression
			   element_value_array_initializer
			   marker_annotation
			   annotation
			   element_value_pair
			   element_value_pair)
 (element_value_pair identifier
		     expression
		     element_value_array_initializer
		     marker_annotation
		     annotation)
 (_element_value expression
		 element_value_array_initializer
		 marker_annotation
		 annotation)
 (element_value_array_initializer expression
				  element_value_array_initializer
				  marker_annotation
				  annotation
				  expression
				  element_value_array_initializer
				  marker_annotation
				  annotation)
 (declaration module_declaration
	      package_declaration
	      import_declaration
	      class_declaration
	      interface_declaration
	      annotation_type_declaration
	      enum_declaration)
 (module_declaration marker_annotation
		     annotation
		     identifier
		     identifier
		     scoped_identifier
		     module_body)
 (module_body module_directive)
 (module_directive requires_modifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier
		   identifier
		   identifier
		   scoped_identifier)
 (requires_modifier)
 (package_declaration marker_annotation
		      annotation
		      identifier
		      identifier
		      scoped_identifier)
 (import_declaration identifier identifier scoped_identifier asterisk)
 (asterisk)
 (enum_declaration modifiers identifier super_interfaces enum_body)
 (enum_body enum_constant enum_constant enum_body_declarations)
 (enum_body_declarations field_declaration
			 method_declaration
			 class_declaration
			 interface_declaration
			 annotation_type_declaration
			 enum_declaration
			 block
			 static_initializer
			 constructor_declaration)
 (enum_constant modifiers identifier argument_list class_body)
 (class_declaration modifiers
		    identifier
		    type_parameters
		    superclass
		    super_interfaces
		    class_body)
 (modifiers marker_annotation annotation)
 (type_parameters type_parameter type_parameter)
 (type_parameter marker_annotation annotation identifier type_bound)
 (type_bound void_type
	     integral_type
	     floating_point_type
	     boolean_type
	     type_identifier
	     scoped_type_identifier
	     generic_type
	     array_type
	     annotated_type
	     void_type
	     integral_type
	     floating_point_type
	     boolean_type
	     type_identifier
	     scoped_type_identifier
	     generic_type
	     array_type
	     annotated_type)
 (superclass void_type
	     integral_type
	     floating_point_type
	     boolean_type
	     type_identifier
	     scoped_type_identifier
	     generic_type
	     array_type
	     annotated_type)
 (super_interfaces interface_type_list)
 (interface_type_list void_type
		      integral_type
		      floating_point_type
		      boolean_type
		      type_identifier
		      scoped_type_identifier
		      generic_type
		      array_type
		      annotated_type
		      void_type
		      integral_type
		      floating_point_type
		      boolean_type
		      type_identifier
		      scoped_type_identifier
		      generic_type
		      array_type
		      annotated_type)
 (class_body field_declaration
	     method_declaration
	     class_declaration
	     interface_declaration
	     annotation_type_declaration
	     enum_declaration
	     block
	     static_initializer
	     constructor_declaration)
 (_class_body_declaration field_declaration
			  method_declaration
			  class_declaration
			  interface_declaration
			  annotation_type_declaration
			  enum_declaration
			  block
			  static_initializer
			  constructor_declaration)
 (static_initializer block)
 (constructor_declaration modifiers
			  type_parameters
			  identifier
			  formal_parameters
			  throws
			  constructor_body)
 (_constructor_declarator type_parameters identifier formal_parameters)
 (constructor_body explicit_constructor_invocation statement)
 (explicit_constructor_invocation type_arguments
				  this
				  super
				  primary_expression
				  type_arguments
				  super
				  argument_list)
 (_name identifier identifier scoped_identifier)
 (scoped_identifier identifier identifier scoped_identifier identifier)
 (field_declaration modifiers
		    void_type
		    integral_type
		    floating_point_type
		    boolean_type
		    type_identifier
		    scoped_type_identifier
		    generic_type
		    array_type
		    variable_declarator
		    variable_declarator)
 (annotation_type_declaration modifiers identifier annotation_type_body)
 (annotation_type_body annotation_type_element_declaration
		       constant_declaration
		       class_declaration
		       interface_declaration
		       annotation_type_declaration)
 (annotation_type_element_declaration modifiers
				      void_type
				      integral_type
				      floating_point_type
				      boolean_type
				      type_identifier
				      scoped_type_identifier
				      generic_type
				      array_type
				      identifier
				      dimensions
				      expression
				      element_value_array_initializer
				      marker_annotation
				      annotation)
 (_default_value expression
		 element_value_array_initializer
		 marker_annotation
		 annotation)
 (interface_declaration modifiers
			identifier
			type_parameters
			extends_interfaces
			interface_body)
 (extends_interfaces interface_type_list)
 (interface_body constant_declaration
		 enum_declaration
		 method_declaration
		 class_declaration
		 interface_declaration
		 annotation_type_declaration)
 (constant_declaration modifiers
		       void_type
		       integral_type
		       floating_point_type
		       boolean_type
		       type_identifier
		       scoped_type_identifier
		       generic_type
		       array_type
		       variable_declarator
		       variable_declarator)
 (_variable_declarator_list variable_declarator variable_declarator)
 (variable_declarator identifier
		      identifier
		      dimensions
		      expression
		      array_initializer)
 (_variable_declarator_id identifier identifier dimensions)
 (_variable_initializer expression array_initializer)
 (array_initializer expression
		    array_initializer
		    expression
		    array_initializer)
 (_type void_type
	integral_type
	floating_point_type
	boolean_type
	type_identifier
	scoped_type_identifier
	generic_type
	array_type
	annotated_type)
 (_unannotated_type void_type
		    integral_type
		    floating_point_type
		    boolean_type
		    type_identifier
		    scoped_type_identifier
		    generic_type
		    array_type)
 (_simple_type void_type
	       integral_type
	       floating_point_type
	       boolean_type
	       type_identifier
	       scoped_type_identifier
	       generic_type)
 (annotated_type marker_annotation
		 annotation
		 void_type
		 integral_type
		 floating_point_type
		 boolean_type
		 type_identifier
		 scoped_type_identifier
		 generic_type
		 array_type)
 (scoped_type_identifier type_identifier
			 scoped_type_identifier
			 generic_type
			 marker_annotation
			 annotation
			 type_identifier)
 (generic_type type_identifier scoped_type_identifier type_arguments)
 (array_type void_type
	     integral_type
	     floating_point_type
	     boolean_type
	     type_identifier
	     scoped_type_identifier
	     generic_type
	     array_type
	     dimensions)
 (integral_type)
 (floating_point_type)
 (boolean_type)
 (void_type)
 (_method_header type_parameters
		 marker_annotation
		 annotation
		 void_type
		 integral_type
		 floating_point_type
		 boolean_type
		 type_identifier
		 scoped_type_identifier
		 generic_type
		 array_type
		 identifier
		 identifier
		 formal_parameters
		 dimensions
		 throws)
 (_method_declarator identifier identifier formal_parameters dimensions)
 (formal_parameters receiver_parameter
		    formal_parameter
		    spread_parameter
		    formal_parameter
		    spread_parameter)
 (formal_parameter modifiers
		   void_type
		   integral_type
		   floating_point_type
		   boolean_type
		   type_identifier
		   scoped_type_identifier
		   generic_type
		   array_type
		   identifier
		   identifier
		   dimensions)
 (receiver_parameter marker_annotation
		     annotation
		     void_type
		     integral_type
		     floating_point_type
		     boolean_type
		     type_identifier
		     scoped_type_identifier
		     generic_type
		     array_type
		     identifier
		     this)
 (spread_parameter modifiers
		   void_type
		   integral_type
		   floating_point_type
		   boolean_type
		   type_identifier
		   scoped_type_identifier
		   generic_type
		   array_type
		   variable_declarator)
 (throws void_type
	 integral_type
	 floating_point_type
	 boolean_type
	 type_identifier
	 scoped_type_identifier
	 generic_type
	 array_type
	 annotated_type
	 void_type
	 integral_type
	 floating_point_type
	 boolean_type
	 type_identifier
	 scoped_type_identifier
	 generic_type
	 array_type
	 annotated_type)
 (local_variable_declaration modifiers
			     void_type
			     integral_type
			     floating_point_type
			     boolean_type
			     type_identifier
			     scoped_type_identifier
			     generic_type
			     array_type
			     variable_declarator
			     variable_declarator)
 (method_declaration modifiers
		     type_parameters
		     marker_annotation
		     annotation
		     void_type
		     integral_type
		     floating_point_type
		     boolean_type
		     type_identifier
		     scoped_type_identifier
		     generic_type
		     array_type
		     identifier
		     identifier
		     formal_parameters
		     dimensions
		     throws
		     block)
 (_reserved_identifier identifier)
 (this)
 (super)
 (identifier)
 (comment))
)

(provide 'tree-edit-java-grammar)
;;; tree-edit-java-grammar.el ends here