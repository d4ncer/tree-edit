;;; tree-edit-typescript-grammar.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;; Author: Ethan Leba <ethanleba5@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.0"))
;; Homepage: https://github.com/ethan-leba/tree-edit
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;; This is an autogenerated file from 'tree-edit-generate-grammars.el' that contains the grammar
;; and other precalculations for the typescript language. Please do not manually modify this!
;;
;;; Code:
(require 'mode-local)
(require 'tree-edit)

(setq-mode-local
 typescript-mode

 tree-edit-grammar
 '
((program
  (type . "SEQ")
  (members ((type . "CHOICE")
	    (members ((type . "SYMBOL")
		      (name . hash_bang_line))
		     ((type . "BLANK"))))
	   ((type . "REPEAT")
	    (content (type . "SYMBOL") (name . statement)))))
 (hash_bang_line (type . "PATTERN") (value . "#!.*"))
 (export_statement (type . "CHOICE")
		   (members ((type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "STRING")
						 (value . "export"))
						((type . "CHOICE")
						 (members ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "*"))
								    ((type . "SEQ")
								     (members ((type . "STRING")
									       (value . "from"))
									      ((type . "FIELD")
									       (name . "source")
									       (content (type . "SYMBOL")
											(name . string)))))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . _automatic_semicolon))
									      ((type . "STRING")
									       (value . ";"))))))
							  ((type . "SEQ")
							   (members ((type . "SYMBOL")
								     (name . export_clause))
								    ((type . "SEQ")
								     (members ((type . "STRING")
									       (value . "from"))
									      ((type . "FIELD")
									       (name . "source")
									       (content (type . "SYMBOL")
											(name . string)))))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . _automatic_semicolon))
									      ((type . "STRING")
									       (value . ";"))))))
							  ((type . "SEQ")
							   (members ((type . "SYMBOL")
								     (name . export_clause))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . _automatic_semicolon))
									      ((type . "STRING")
									       (value . ";"))))))))))
				      ((type . "SEQ")
				       (members ((type . "REPEAT")
						 (content (type . "FIELD")
							  (name . "decorator")
							  (content (type . "SYMBOL")
								   (name . decorator))))
						((type . "STRING")
						 (value . "export"))
						((type . "CHOICE")
						 (members ((type . "FIELD")
							   (name . "declaration")
							   (content (type . "SYMBOL")
								    (name . declaration)))
							  ((type . "SEQ")
							   (members ((type . "STRING")
								     (value . "default"))
								    ((type . "FIELD")
								     (name . "value")
								     (content (type . "SYMBOL")
									      (name . expression)))
								    ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . _automatic_semicolon))
									      ((type . "STRING")
									       (value . ";"))))))))))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "export"))
				      ((type . "STRING")
				       (value . "="))
				      ((type . "SYMBOL")
				       (name . identifier))
				      ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . _automatic_semicolon))
						((type . "STRING")
						 (value . ";"))))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "export"))
				      ((type . "STRING")
				       (value . "as"))
				      ((type . "STRING")
				       (value . "namespace"))
				      ((type . "SYMBOL")
				       (name . identifier))
				      ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . _automatic_semicolon))
						((type . "STRING")
						 (value . ";"))))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "export"))
				      ((type . "STRING")
				       (value . "default"))
				      ((type . "SYMBOL")
				       (name . function_signature))))))
 (export_clause (type . "SEQ")
		(members ((type . "STRING")
			  (value . "{"))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "ALIAS")
					      (content (type . "SEQ")
						       (members ((type . "CHOICE")
								 (members ((type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "type"))
										    ((type . "STRING")
										     (value . "typeof"))))
									  ((type . "BLANK"))))
								((type . "SEQ")
								 (members ((type . "FIELD")
									   (name . "name")
									   (content (type . "SYMBOL")
										    (name . identifier)))
									  ((type . "CHOICE")
									   (members ((type . "SEQ")
										     (members ((type . "STRING")
											       (value . "as"))
											      ((type . "FIELD")
											       (name . "alias")
											       (content (type . "SYMBOL")
													(name . identifier)))))
										    ((type . "BLANK"))))))))
					      (named . t)
					      (value . export_specifier))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "ALIAS")
								 (content (type . "SEQ")
									  (members ((type . "CHOICE")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "type"))
												       ((type . "STRING")
													(value . "typeof"))))
											     ((type . "BLANK"))))
										   ((type . "SEQ")
										    (members ((type . "FIELD")
											      (name . "name")
											      (content (type . "SYMBOL")
												       (name . identifier)))
											     ((type . "CHOICE")
											      (members ((type . "SEQ")
													(members ((type . "STRING")
														  (value . "as"))
														 ((type . "FIELD")
														  (name . "alias")
														  (content (type . "SYMBOL")
															   (name . identifier)))))
												       ((type . "BLANK"))))))))
								 (named . t)
								 (value . export_specifier)))))))
				   ((type . "BLANK"))))
			 ((type . "CHOICE")
			  (members ((type . "STRING")
				    (value . ","))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . "}"))))
 (_import_export_specifier (type . "SEQ")
			   (members ((type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "STRING")
							 (value . "type"))
							((type . "STRING")
							 (value . "typeof"))))
					      ((type . "BLANK"))))
				    ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "name")
					       (content (type . "SYMBOL")
							(name . identifier)))
					      ((type . "CHOICE")
					       (members ((type . "SEQ")
							 (members ((type . "STRING")
								   (value . "as"))
								  ((type . "FIELD")
								   (name . "alias")
								   (content (type . "SYMBOL")
									    (name . identifier)))))
							((type . "BLANK"))))))))
 (declaration (type . "CHOICE")
	      (members ((type . "CHOICE")
			(members ((type . "SYMBOL")
				  (name . function_declaration))
				 ((type . "SYMBOL")
				  (name . generator_function_declaration))
				 ((type . "SYMBOL")
				  (name . class_declaration))
				 ((type . "SYMBOL")
				  (name . lexical_declaration))
				 ((type . "SYMBOL")
				  (name . variable_declaration))))
		       ((type . "SYMBOL")
			(name . function_signature))
		       ((type . "SYMBOL")
			(name . abstract_class_declaration))
		       ((type . "SYMBOL")
			(name . module))
		       ((type . "PREC")
			(value . "declaration")
			(content (type . "SYMBOL") (name . internal_module)))
		       ((type . "SYMBOL")
			(name . type_alias_declaration))
		       ((type . "SYMBOL")
			(name . enum_declaration))
		       ((type . "SYMBOL")
			(name . interface_declaration))
		       ((type . "SYMBOL")
			(name . import_alias))
		       ((type . "SYMBOL")
			(name . ambient_declaration))))
 (import (type . "TOKEN") (content (type . "STRING") (value . "import")))
 (import_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "import"))
			    ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "type"))
						((type . "STRING")
						 (value . "typeof"))))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "SYMBOL")
						 (name . import_clause))
						((type . "SEQ")
						 (members ((type . "STRING")
							   (value . "from"))
							  ((type . "FIELD")
							   (name . "source")
							   (content (type . "SYMBOL")
								    (name . string)))))))
				      ((type . "SYMBOL")
				       (name . import_require_clause))
				      ((type . "SYMBOL")
				       (name . string))))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . _automatic_semicolon))
				      ((type . "STRING")
				       (value . ";"))))))
 (import_clause (type . "CHOICE")
		(members ((type . "SYMBOL")
			  (name . namespace_import))
			 ((type . "SYMBOL")
			  (name . named_imports))
			 ((type . "SEQ")
			  (members ((type . "SYMBOL")
				    (name . identifier))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "STRING")
							(value . ","))
						       ((type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . namespace_import))
								 ((type . "SYMBOL")
								  (name . named_imports))))))
					     ((type . "BLANK"))))))))
 (_from_clause (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "from"))
			((type . "FIELD")
			 (name . "source")
			 (content (type . "SYMBOL") (name . string)))))
 (namespace_import (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "*"))
			    ((type . "STRING")
			     (value . "as"))
			    ((type . "SYMBOL")
			     (name . identifier))))
 (named_imports (type . "SEQ")
		(members ((type . "STRING")
			  (value . "{"))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "ALIAS")
					      (content (type . "SEQ")
						       (members ((type . "CHOICE")
								 (members ((type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "type"))
										    ((type . "STRING")
										     (value . "typeof"))))
									  ((type . "BLANK"))))
								((type . "SEQ")
								 (members ((type . "FIELD")
									   (name . "name")
									   (content (type . "SYMBOL")
										    (name . identifier)))
									  ((type . "CHOICE")
									   (members ((type . "SEQ")
										     (members ((type . "STRING")
											       (value . "as"))
											      ((type . "FIELD")
											       (name . "alias")
											       (content (type . "SYMBOL")
													(name . identifier)))))
										    ((type . "BLANK"))))))))
					      (named . t)
					      (value . import_specifier))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "ALIAS")
								 (content (type . "SEQ")
									  (members ((type . "CHOICE")
										    (members ((type . "CHOICE")
											      (members ((type . "STRING")
													(value . "type"))
												       ((type . "STRING")
													(value . "typeof"))))
											     ((type . "BLANK"))))
										   ((type . "SEQ")
										    (members ((type . "FIELD")
											      (name . "name")
											      (content (type . "SYMBOL")
												       (name . identifier)))
											     ((type . "CHOICE")
											      (members ((type . "SEQ")
													(members ((type . "STRING")
														  (value . "as"))
														 ((type . "FIELD")
														  (name . "alias")
														  (content (type . "SYMBOL")
															   (name . identifier)))))
												       ((type . "BLANK"))))))))
								 (named . t)
								 (value . import_specifier)))))))
				   ((type . "BLANK"))))
			 ((type . "CHOICE")
			  (members ((type . "STRING")
				    (value . ","))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . "}"))))
 (statement (type . "CHOICE")
	    (members ((type . "SYMBOL")
		      (name . export_statement))
		     ((type . "SYMBOL")
		      (name . import_statement))
		     ((type . "SYMBOL")
		      (name . debugger_statement))
		     ((type . "SYMBOL")
		      (name . expression_statement))
		     ((type . "SYMBOL")
		      (name . declaration))
		     ((type . "SYMBOL")
		      (name . statement_block))
		     ((type . "SYMBOL")
		      (name . if_statement))
		     ((type . "SYMBOL")
		      (name . switch_statement))
		     ((type . "SYMBOL")
		      (name . for_statement))
		     ((type . "SYMBOL")
		      (name . for_in_statement))
		     ((type . "SYMBOL")
		      (name . while_statement))
		     ((type . "SYMBOL")
		      (name . do_statement))
		     ((type . "SYMBOL")
		      (name . try_statement))
		     ((type . "SYMBOL")
		      (name . with_statement))
		     ((type . "SYMBOL")
		      (name . break_statement))
		     ((type . "SYMBOL")
		      (name . continue_statement))
		     ((type . "SYMBOL")
		      (name . return_statement))
		     ((type . "SYMBOL")
		      (name . throw_statement))
		     ((type . "SYMBOL")
		      (name . empty_statement))
		     ((type . "SYMBOL")
		      (name . labeled_statement))))
 (expression_statement (type . "SEQ")
		       (members ((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . expression))
					  ((type . "SYMBOL")
					   (name . sequence_expression))))
				((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . _automatic_semicolon))
					  ((type . "STRING")
					   (value . ";"))))))
 (variable_declaration (type . "SEQ")
		       (members ((type . "STRING")
				 (value . "var"))
				((type . "SEQ")
				 (members ((type . "SYMBOL")
					   (name . variable_declarator))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "STRING")
							      (value . ","))
							     ((type . "SYMBOL")
							      (name . variable_declarator)))))))
				((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . _automatic_semicolon))
					  ((type . "STRING")
					   (value . ";"))))))
 (lexical_declaration (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "STRING")
					  (value . "let"))
					 ((type . "STRING")
					  (value . "const"))))
			       ((type . "SEQ")
				(members ((type . "SYMBOL")
					  (name . variable_declarator))
					 ((type . "REPEAT")
					  (content (type . "SEQ")
						   (members ((type . "STRING")
							     (value . ","))
							    ((type . "SYMBOL")
							     (name . variable_declarator)))))))
			       ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . _automatic_semicolon))
					 ((type . "STRING")
					  (value . ";"))))))
 (variable_declarator (type . "CHOICE")
		      (members ((type . "SEQ")
				(members ((type . "FIELD")
					  (name . "name")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . identifier))
							    ((type . "CHOICE")
							     (members ((type . "SYMBOL")
								       (name . object_pattern))
								      ((type . "SYMBOL")
								       (name . array_pattern)))))))
					 ((type . "FIELD")
					  (name . "type")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . type_annotation))
							    ((type . "BLANK")))))
					 ((type . "CHOICE")
					  (members ((type . "SEQ")
						    (members ((type . "STRING")
							      (value . "="))
							     ((type . "FIELD")
							      (name . "value")
							      (content (type . "SYMBOL")
								       (name . expression)))))
						   ((type . "BLANK"))))))
			       ((type . "PREC")
				(value . "declaration")
				(content (type . "SEQ")
					 (members ((type . "FIELD")
						   (name . "name")
						   (content (type . "SYMBOL")
							    (name . identifier)))
						  ((type . "STRING")
						   (value . "!"))
						  ((type . "FIELD")
						   (name . "type")
						   (content (type . "SYMBOL")
							    (name . type_annotation))))))))
 (statement_block (type . "PREC_RIGHT")
		  (value . 0)
		  (content (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "{"))
				    ((type . "REPEAT")
				     (content (type . "SYMBOL")
					      (name . statement)))
				    ((type . "STRING")
				     (value . "}"))
				    ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . _automatic_semicolon))
					      ((type . "BLANK")))))))
 (else_clause (type . "SEQ")
	      (members ((type . "STRING")
			(value . "else"))
		       ((type . "SYMBOL")
			(name . statement))))
 (if_statement (type . "PREC_RIGHT")
	       (value . 0)
	       (content (type . "SEQ")
			(members ((type . "STRING")
				  (value . "if"))
				 ((type . "FIELD")
				  (name . "condition")
				  (content (type . "SYMBOL")
					   (name . parenthesized_expression)))
				 ((type . "FIELD")
				  (name . "consequence")
				  (content (type . "SYMBOL")
					   (name . statement)))
				 ((type . "CHOICE")
				  (members ((type . "FIELD")
					    (name . "alternative")
					    (content (type . "SYMBOL")
						     (name . else_clause)))
					   ((type . "BLANK")))))))
 (switch_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "switch"))
			    ((type . "FIELD")
			     (name . "value")
			     (content (type . "SYMBOL")
				      (name . parenthesized_expression)))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "SYMBOL") (name . switch_body)))))
 (for_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "for"))
			 ((type . "STRING")
			  (value . "("))
			 ((type . "FIELD")
			  (name . "initializer")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . lexical_declaration))
					    ((type . "SYMBOL")
					     (name . variable_declaration))
					    ((type . "SYMBOL")
					     (name . expression_statement))
					    ((type . "SYMBOL")
					     (name . empty_statement)))))
			 ((type . "FIELD")
			  (name . "condition")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . expression_statement))
					    ((type . "SYMBOL")
					     (name . empty_statement)))))
			 ((type . "FIELD")
			  (name . "increment")
			  (content (type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . expression))
						      ((type . "SYMBOL")
						       (name . sequence_expression))))
					    ((type . "BLANK")))))
			 ((type . "STRING")
			  (value . ")"))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "SYMBOL") (name . statement)))))
 (for_in_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "for"))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "await"))
				      ((type . "BLANK"))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "("))
				      ((type . "CHOICE")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "CHOICE")
									      (members ((type . "SYMBOL")
											(name . member_expression))
										       ((type . "SYMBOL")
											(name . subscript_expression))
										       ((type . "SYMBOL")
											(name . identifier))
										       ((type . "ALIAS")
											(content (type . "CHOICE")
												 (members ((type . "STRING")
													   (value . "declare"))
													  ((type . "STRING")
													   (value . "namespace"))
													  ((type . "STRING")
													   (value . "type"))
													  ((type . "STRING")
													   (value . "public"))
													  ((type . "STRING")
													   (value . "private"))
													  ((type . "STRING")
													   (value . "protected"))
													  ((type . "STRING")
													   (value . "readonly"))
													  ((type . "STRING")
													   (value . "module"))
													  ((type . "STRING")
													   (value . "any"))
													  ((type . "STRING")
													   (value . "number"))
													  ((type . "STRING")
													   (value . "boolean"))
													  ((type . "STRING")
													   (value . "string"))
													  ((type . "STRING")
													   (value . "symbol"))
													  ((type . "STRING")
													   (value . "export"))
													  ((type . "CHOICE")
													   (members ((type . "STRING")
														     (value . "get"))
														    ((type . "STRING")
														     (value . "set"))
														    ((type . "STRING")
														     (value . "async"))
														    ((type . "STRING")
														     (value . "static"))
														    ((type . "STRING")
														     (value . "export"))))))
											(named . t)
											(value . identifier))
										       ((type . "CHOICE")
											(members ((type . "SYMBOL")
												  (name . object_pattern))
												 ((type . "SYMBOL")
												  (name . array_pattern))))))
									     ((type . "SYMBOL")
									      (name . non_null_expression))))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "SEQ")
						 (members ((type . "CHOICE")
							   (members ((type . "STRING")
								     (value . "var"))
								    ((type . "STRING")
								     (value . "let"))
								    ((type . "STRING")
								     (value . "const"))))
							  ((type . "FIELD")
							   (name . "left")
							   (content (type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "CHOICE")
									      (members ((type . "SYMBOL")
											(name . object_pattern))
										       ((type . "SYMBOL")
											(name . array_pattern)))))))))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "in"))
						((type . "STRING")
						 (value . "of"))))
				      ((type . "FIELD")
				       (name . "right")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "SYMBOL")
							  (name . sequence_expression)))))
				      ((type . "STRING")
				       (value . ")"))))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "SYMBOL") (name . statement)))))
 (_for_header (type . "SEQ")
	      (members ((type . "STRING")
			(value . "("))
		       ((type . "CHOICE")
			(members ((type . "FIELD")
				  (name . "left")
				  (content (type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . member_expression))
									((type . "SYMBOL")
									 (name . subscript_expression))
									((type . "SYMBOL")
									 (name . identifier))
									((type . "ALIAS")
									 (content (type . "CHOICE")
										  (members ((type . "STRING")
											    (value . "declare"))
											   ((type . "STRING")
											    (value . "namespace"))
											   ((type . "STRING")
											    (value . "type"))
											   ((type . "STRING")
											    (value . "public"))
											   ((type . "STRING")
											    (value . "private"))
											   ((type . "STRING")
											    (value . "protected"))
											   ((type . "STRING")
											    (value . "readonly"))
											   ((type . "STRING")
											    (value . "module"))
											   ((type . "STRING")
											    (value . "any"))
											   ((type . "STRING")
											    (value . "number"))
											   ((type . "STRING")
											    (value . "boolean"))
											   ((type . "STRING")
											    (value . "string"))
											   ((type . "STRING")
											    (value . "symbol"))
											   ((type . "STRING")
											    (value . "export"))
											   ((type . "CHOICE")
											    (members ((type . "STRING")
												      (value . "get"))
												     ((type . "STRING")
												      (value . "set"))
												     ((type . "STRING")
												      (value . "async"))
												     ((type . "STRING")
												      (value . "static"))
												     ((type . "STRING")
												      (value . "export"))))))
									 (named . t)
									 (value . identifier))
									((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . object_pattern))
										  ((type . "SYMBOL")
										   (name . array_pattern))))))
							      ((type . "SYMBOL")
							       (name . non_null_expression))))
						    ((type . "SYMBOL")
						     (name . parenthesized_expression)))))
				 ((type . "SEQ")
				  (members ((type . "CHOICE")
					    (members ((type . "STRING")
						      (value . "var"))
						     ((type . "STRING")
						      (value . "let"))
						     ((type . "STRING")
						      (value . "const"))))
					   ((type . "FIELD")
					    (name . "left")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . object_pattern))
									((type . "SYMBOL")
									 (name . array_pattern)))))))))))
		       ((type . "CHOICE")
			(members ((type . "STRING")
				  (value . "in"))
				 ((type . "STRING")
				  (value . "of"))))
		       ((type . "FIELD")
			(name . "right")
			(content (type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . expression))
					  ((type . "SYMBOL")
					   (name . sequence_expression)))))
		       ((type . "STRING")
			(value . ")"))))
 (while_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "while"))
			   ((type . "FIELD")
			    (name . "condition")
			    (content (type . "SYMBOL")
				     (name . parenthesized_expression)))
			   ((type . "FIELD")
			    (name . "body")
			    (content (type . "SYMBOL") (name . statement)))))
 (do_statement (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "do"))
			((type . "FIELD")
			 (name . "body")
			 (content (type . "SYMBOL") (name . statement)))
			((type . "STRING")
			 (value . "while"))
			((type . "FIELD")
			 (name . "condition")
			 (content (type . "SYMBOL")
				  (name . parenthesized_expression)))
			((type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . _automatic_semicolon))
				  ((type . "STRING")
				   (value . ";"))))))
 (try_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "try"))
			 ((type . "FIELD")
			  (name . "body")
			  (content (type . "SYMBOL")
				   (name . statement_block)))
			 ((type . "CHOICE")
			  (members ((type . "FIELD")
				    (name . "handler")
				    (content (type . "SYMBOL")
					     (name . catch_clause)))
				   ((type . "BLANK"))))
			 ((type . "CHOICE")
			  (members ((type . "FIELD")
				    (name . "finalizer")
				    (content (type . "SYMBOL")
					     (name . finally_clause)))
				   ((type . "BLANK"))))))
 (with_statement (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "with"))
			  ((type . "FIELD")
			   (name . "object")
			   (content (type . "SYMBOL")
				    (name . parenthesized_expression)))
			  ((type . "FIELD")
			   (name . "body")
			   (content (type . "SYMBOL") (name . statement)))))
 (break_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "break"))
			   ((type . "FIELD")
			    (name . "label")
			    (content (type . "CHOICE")
				     (members ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . statement_identifier))
					      ((type . "BLANK")))))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . _automatic_semicolon))
				     ((type . "STRING")
				      (value . ";"))))))
 (continue_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "continue"))
			      ((type . "FIELD")
			       (name . "label")
			       (content (type . "CHOICE")
					(members ((type . "ALIAS")
						  (content (type . "SYMBOL")
							   (name . identifier))
						  (named . t)
						  (value . statement_identifier))
						 ((type . "BLANK")))))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . _automatic_semicolon))
					((type . "STRING")
					 (value . ";"))))))
 (debugger_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "debugger"))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . _automatic_semicolon))
					((type . "STRING")
					 (value . ";"))))))
 (return_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "return"))
			    ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . expression))
						((type . "SYMBOL")
						 (name . sequence_expression))))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . _automatic_semicolon))
				      ((type . "STRING")
				       (value . ";"))))))
 (throw_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "throw"))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . expression))
				     ((type . "SYMBOL")
				      (name . sequence_expression))))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . _automatic_semicolon))
				     ((type . "STRING")
				      (value . ";"))))))
 (empty_statement (type . "STRING") (value . ";"))
 (labeled_statement (type . "PREC_DYNAMIC")
		    (value . -1)
		    (content (type . "SEQ")
			     (members ((type . "FIELD")
				       (name . "label")
				       (content (type . "ALIAS")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . identifier))
								  ((type . "CHOICE")
								   (members ((type . "STRING")
									     (value . "declare"))
									    ((type . "STRING")
									     (value . "namespace"))
									    ((type . "STRING")
									     (value . "type"))
									    ((type . "STRING")
									     (value . "public"))
									    ((type . "STRING")
									     (value . "private"))
									    ((type . "STRING")
									     (value . "protected"))
									    ((type . "STRING")
									     (value . "readonly"))
									    ((type . "STRING")
									     (value . "module"))
									    ((type . "STRING")
									     (value . "any"))
									    ((type . "STRING")
									     (value . "number"))
									    ((type . "STRING")
									     (value . "boolean"))
									    ((type . "STRING")
									     (value . "string"))
									    ((type . "STRING")
									     (value . "symbol"))
									    ((type . "STRING")
									     (value . "export"))
									    ((type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "get"))
										      ((type . "STRING")
										       (value . "set"))
										      ((type . "STRING")
										       (value . "async"))
										      ((type . "STRING")
										       (value . "static"))
										      ((type . "STRING")
										       (value . "export"))))))))
						(named . t)
						(value . statement_identifier)))
				      ((type . "STRING")
				       (value . ":"))
				      ((type . "SYMBOL")
				       (name . statement)))))
 (switch_body (type . "SEQ")
	      (members ((type . "STRING")
			(value . "{"))
		       ((type . "REPEAT")
			(content (type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . switch_case))
					  ((type . "SYMBOL")
					   (name . switch_default)))))
		       ((type . "STRING")
			(value . "}"))))
 (switch_case (type . "SEQ")
	      (members ((type . "STRING")
			(value . "case"))
		       ((type . "FIELD")
			(name . "value")
			(content (type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . expression))
					  ((type . "SYMBOL")
					   (name . sequence_expression)))))
		       ((type . "STRING")
			(value . ":"))
		       ((type . "REPEAT")
			(content (type . "SYMBOL") (name . statement)))))
 (switch_default (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "default"))
			  ((type . "STRING")
			   (value . ":"))
			  ((type . "REPEAT")
			   (content (type . "SYMBOL") (name . statement)))))
 (catch_clause (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "catch"))
			((type . "CHOICE")
			 (members ((type . "SEQ")
				   (members ((type . "STRING")
					     (value . "("))
					    ((type . "FIELD")
					     (name . "parameter")
					     (content (type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . identifier))
							       ((type . "CHOICE")
								(members ((type . "SYMBOL")
									  (name . object_pattern))
									 ((type . "SYMBOL")
									  (name . array_pattern)))))))
					    ((type . "STRING")
					     (value . ")"))))
				  ((type . "BLANK"))))
			((type . "FIELD")
			 (name . "body")
			 (content (type . "SYMBOL") (name . statement_block)))))
 (finally_clause (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "finally"))
			  ((type . "FIELD")
			   (name . "body")
			   (content (type . "SYMBOL")
				    (name . statement_block)))))
 (parenthesized_expression (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "CHOICE")
				     (members ((type . "SEQ")
					       (members ((type . "SYMBOL")
							 (name . expression))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . type_annotation))
								  ((type . "BLANK"))))))
					      ((type . "SYMBOL")
					       (name . sequence_expression))))
				    ((type . "STRING")
				     (value . ")"))))
 (_expressions (type . "CHOICE")
	       (members ((type . "SYMBOL")
			 (name . expression))
			((type . "SYMBOL")
			 (name . sequence_expression))))
 (expression (type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . as_expression))
		      ((type . "SYMBOL")
		       (name . internal_module))
		      ((type . "SYMBOL")
		       (name . type_assertion))
		      ((type . "SYMBOL")
		       (name . primary_expression))
		      ((type . "SYMBOL")
		       (name . assignment_expression))
		      ((type . "SYMBOL")
		       (name . augmented_assignment_expression))
		      ((type . "SYMBOL")
		       (name . await_expression))
		      ((type . "SYMBOL")
		       (name . unary_expression))
		      ((type . "SYMBOL")
		       (name . binary_expression))
		      ((type . "SYMBOL")
		       (name . ternary_expression))
		      ((type . "SYMBOL")
		       (name . update_expression))
		      ((type . "SYMBOL")
		       (name . new_expression))
		      ((type . "SYMBOL")
		       (name . yield_expression))))
 (primary_expression (type . "CHOICE")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . subscript_expression))
					((type . "SYMBOL")
					 (name . member_expression))
					((type . "SYMBOL")
					 (name . parenthesized_expression))
					((type . "SYMBOL")
					 (name . identifier))
					((type . "ALIAS")
					 (content (type . "CHOICE")
						  (members ((type . "STRING")
							    (value . "declare"))
							   ((type . "STRING")
							    (value . "namespace"))
							   ((type . "STRING")
							    (value . "type"))
							   ((type . "STRING")
							    (value . "public"))
							   ((type . "STRING")
							    (value . "private"))
							   ((type . "STRING")
							    (value . "protected"))
							   ((type . "STRING")
							    (value . "readonly"))
							   ((type . "STRING")
							    (value . "module"))
							   ((type . "STRING")
							    (value . "any"))
							   ((type . "STRING")
							    (value . "number"))
							   ((type . "STRING")
							    (value . "boolean"))
							   ((type . "STRING")
							    (value . "string"))
							   ((type . "STRING")
							    (value . "symbol"))
							   ((type . "STRING")
							    (value . "export"))
							   ((type . "CHOICE")
							    (members ((type . "STRING")
								      (value . "get"))
								     ((type . "STRING")
								      (value . "set"))
								     ((type . "STRING")
								      (value . "async"))
								     ((type . "STRING")
								      (value . "static"))
								     ((type . "STRING")
								      (value . "export"))))))
					 (named . t)
					 (value . identifier))
					((type . "SYMBOL")
					 (name . this))
					((type . "SYMBOL")
					 (name . super))
					((type . "SYMBOL")
					 (name . number))
					((type . "SYMBOL")
					 (name . string))
					((type . "SYMBOL")
					 (name . template_string))
					((type . "SYMBOL")
					 (name . regex))
					((type . "SYMBOL")
					 (name . true))
					((type . "SYMBOL")
					 (name . false))
					((type . "SYMBOL")
					 (name . null))
					((type . "SYMBOL")
					 (name . undefined))
					((type . "SYMBOL")
					 (name . import))
					((type . "SYMBOL")
					 (name . object))
					((type . "SYMBOL")
					 (name . array))
					((type . "SYMBOL")
					 (name . function))
					((type . "SYMBOL")
					 (name . arrow_function))
					((type . "SYMBOL")
					 (name . generator_function))
					((type . "SYMBOL")
					 (name . class))
					((type . "SYMBOL")
					 (name . meta_property))
					((type . "SYMBOL")
					 (name . call_expression))))
			      ((type . "SYMBOL")
			       (name . non_null_expression))))
 (yield_expression (type . "PREC_RIGHT")
		   (value . 0)
		   (content (type . "SEQ")
			    (members ((type . "STRING")
				      (value . "yield"))
				     ((type . "CHOICE")
				      (members ((type . "SEQ")
						(members ((type . "STRING")
							  (value . "*"))
							 ((type . "SYMBOL")
							  (name . expression))))
					       ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "BLANK")))))))))
 (object (type . "PREC")
	 (value . "object")
	 (content (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "{"))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . pair))
								   ((type . "SYMBOL")
								    (name . spread_element))
								   ((type . "SYMBOL")
								    (name . method_definition))
								   ((type . "ALIAS")
								    (content (type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . identifier))
										      ((type . "CHOICE")
										       (members ((type . "STRING")
												 (value . "declare"))
												((type . "STRING")
												 (value . "namespace"))
												((type . "STRING")
												 (value . "type"))
												((type . "STRING")
												 (value . "public"))
												((type . "STRING")
												 (value . "private"))
												((type . "STRING")
												 (value . "protected"))
												((type . "STRING")
												 (value . "readonly"))
												((type . "STRING")
												 (value . "module"))
												((type . "STRING")
												 (value . "any"))
												((type . "STRING")
												 (value . "number"))
												((type . "STRING")
												 (value . "boolean"))
												((type . "STRING")
												 (value . "string"))
												((type . "STRING")
												 (value . "symbol"))
												((type . "STRING")
												 (value . "export"))
												((type . "CHOICE")
												 (members ((type . "STRING")
													   (value . "get"))
													  ((type . "STRING")
													   (value . "set"))
													  ((type . "STRING")
													   (value . "async"))
													  ((type . "STRING")
													   (value . "static"))
													  ((type . "STRING")
													   (value . "export"))))))))
								    (named . t)
								    (value . shorthand_property_identifier))))
							 ((type . "BLANK"))))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . ","))
								  ((type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . pair))
										      ((type . "SYMBOL")
										       (name . spread_element))
										      ((type . "SYMBOL")
										       (name . method_definition))
										      ((type . "ALIAS")
										       (content (type . "CHOICE")
												(members ((type . "SYMBOL")
													  (name . identifier))
													 ((type . "CHOICE")
													  (members ((type . "STRING")
														    (value . "declare"))
														   ((type . "STRING")
														    (value . "namespace"))
														   ((type . "STRING")
														    (value . "type"))
														   ((type . "STRING")
														    (value . "public"))
														   ((type . "STRING")
														    (value . "private"))
														   ((type . "STRING")
														    (value . "protected"))
														   ((type . "STRING")
														    (value . "readonly"))
														   ((type . "STRING")
														    (value . "module"))
														   ((type . "STRING")
														    (value . "any"))
														   ((type . "STRING")
														    (value . "number"))
														   ((type . "STRING")
														    (value . "boolean"))
														   ((type . "STRING")
														    (value . "string"))
														   ((type . "STRING")
														    (value . "symbol"))
														   ((type . "STRING")
														    (value . "export"))
														   ((type . "CHOICE")
														    (members ((type . "STRING")
															      (value . "get"))
															     ((type . "STRING")
															      (value . "set"))
															     ((type . "STRING")
															      (value . "async"))
															     ((type . "STRING")
															      (value . "static"))
															     ((type . "STRING")
															      (value . "export"))))))))
										       (named . t)
										       (value . shorthand_property_identifier))))
									    ((type . "BLANK")))))))))
				     ((type . "BLANK"))))
			   ((type . "STRING")
			    (value . "}")))))
 (object_pattern (type . "PREC")
		 (value . "object")
		 (content (type . "SEQ")
			  (members ((type . "STRING")
				    (value . "{"))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . pair_pattern))
									   ((type . "SYMBOL")
									    (name . rest_pattern))
									   ((type . "SYMBOL")
									    (name . object_assignment_pattern))
									   ((type . "ALIAS")
									    (content (type . "CHOICE")
										     (members ((type . "SYMBOL")
											       (name . identifier))
											      ((type . "CHOICE")
											       (members ((type . "STRING")
													 (value . "declare"))
													((type . "STRING")
													 (value . "namespace"))
													((type . "STRING")
													 (value . "type"))
													((type . "STRING")
													 (value . "public"))
													((type . "STRING")
													 (value . "private"))
													((type . "STRING")
													 (value . "protected"))
													((type . "STRING")
													 (value . "readonly"))
													((type . "STRING")
													 (value . "module"))
													((type . "STRING")
													 (value . "any"))
													((type . "STRING")
													 (value . "number"))
													((type . "STRING")
													 (value . "boolean"))
													((type . "STRING")
													 (value . "string"))
													((type . "STRING")
													 (value . "symbol"))
													((type . "STRING")
													 (value . "export"))
													((type . "CHOICE")
													 (members ((type . "STRING")
														   (value . "get"))
														  ((type . "STRING")
														   (value . "set"))
														  ((type . "STRING")
														   (value . "async"))
														  ((type . "STRING")
														   (value . "static"))
														  ((type . "STRING")
														   (value . "export"))))))))
									    (named . t)
									    (value . shorthand_property_identifier_pattern))))
								 ((type . "BLANK"))))
						       ((type . "REPEAT")
							(content (type . "SEQ")
								 (members ((type . "STRING")
									   (value . ","))
									  ((type . "CHOICE")
									   (members ((type . "CHOICE")
										     (members ((type . "SYMBOL")
											       (name . pair_pattern))
											      ((type . "SYMBOL")
											       (name . rest_pattern))
											      ((type . "SYMBOL")
											       (name . object_assignment_pattern))
											      ((type . "ALIAS")
											       (content (type . "CHOICE")
													(members ((type . "SYMBOL")
														  (name . identifier))
														 ((type . "CHOICE")
														  (members ((type . "STRING")
															    (value . "declare"))
															   ((type . "STRING")
															    (value . "namespace"))
															   ((type . "STRING")
															    (value . "type"))
															   ((type . "STRING")
															    (value . "public"))
															   ((type . "STRING")
															    (value . "private"))
															   ((type . "STRING")
															    (value . "protected"))
															   ((type . "STRING")
															    (value . "readonly"))
															   ((type . "STRING")
															    (value . "module"))
															   ((type . "STRING")
															    (value . "any"))
															   ((type . "STRING")
															    (value . "number"))
															   ((type . "STRING")
															    (value . "boolean"))
															   ((type . "STRING")
															    (value . "string"))
															   ((type . "STRING")
															    (value . "symbol"))
															   ((type . "STRING")
															    (value . "export"))
															   ((type . "CHOICE")
															    (members ((type . "STRING")
																      (value . "get"))
																     ((type . "STRING")
																      (value . "set"))
																     ((type . "STRING")
																      (value . "async"))
																     ((type . "STRING")
																      (value . "static"))
																     ((type . "STRING")
																      (value . "export"))))))))
											       (named . t)
											       (value . shorthand_property_identifier_pattern))))
										    ((type . "BLANK")))))))))
					     ((type . "BLANK"))))
				   ((type . "STRING")
				    (value . "}")))))
 (assignment_pattern (type . "SEQ")
		     (members ((type . "FIELD")
			       (name . "left")
			       (content (type . "SYMBOL") (name . pattern)))
			      ((type . "STRING")
			       (value . "="))
			      ((type . "FIELD")
			       (name . "right")
			       (content (type . "SYMBOL")
					(name . expression)))))
 (object_assignment_pattern (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "left")
				      (content (type . "CHOICE")
					       (members ((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "CHOICE")
									    (members ((type . "STRING")
										      (value . "declare"))
										     ((type . "STRING")
										      (value . "namespace"))
										     ((type . "STRING")
										      (value . "type"))
										     ((type . "STRING")
										      (value . "public"))
										     ((type . "STRING")
										      (value . "private"))
										     ((type . "STRING")
										      (value . "protected"))
										     ((type . "STRING")
										      (value . "readonly"))
										     ((type . "STRING")
										      (value . "module"))
										     ((type . "STRING")
										      (value . "any"))
										     ((type . "STRING")
										      (value . "number"))
										     ((type . "STRING")
										      (value . "boolean"))
										     ((type . "STRING")
										      (value . "string"))
										     ((type . "STRING")
										      (value . "symbol"))
										     ((type . "STRING")
										      (value . "export"))
										     ((type . "CHOICE")
										      (members ((type . "STRING")
												(value . "get"))
											       ((type . "STRING")
												(value . "set"))
											       ((type . "STRING")
												(value . "async"))
											       ((type . "STRING")
												(value . "static"))
											       ((type . "STRING")
												(value . "export"))))))
									   ((type . "SYMBOL")
									    (name . identifier))))
							 (named . t)
							 (value . shorthand_property_identifier_pattern))
							((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . object_pattern))
								  ((type . "SYMBOL")
								   (name . array_pattern)))))))
				     ((type . "STRING")
				      (value . "="))
				     ((type . "FIELD")
				      (name . "right")
				      (content (type . "SYMBOL")
					       (name . expression)))))
 (array (type . "SEQ")
	(members ((type . "STRING")
		  (value . "["))
		 ((type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "SYMBOL")
							  (name . spread_element))))
					       ((type . "BLANK"))))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . expression))
									    ((type . "SYMBOL")
									     (name . spread_element))))
								  ((type . "BLANK")))))))))
			   ((type . "BLANK"))))
		 ((type . "STRING")
		  (value . "]"))))
 (array_pattern (type . "SEQ")
		(members ((type . "STRING")
			  (value . "["))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . pattern))
								 ((type . "SYMBOL")
								  (name . assignment_pattern))))
						       ((type . "BLANK"))))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "CHOICE")
								 (members ((type . "CHOICE")
									   (members ((type . "SYMBOL")
										     (name . pattern))
										    ((type . "SYMBOL")
										     (name . assignment_pattern))))
									  ((type . "BLANK")))))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . "]"))))
 (_jsx_element (type . "CHOICE")
	       (members ((type . "SYMBOL")
			 (name . jsx_element))
			((type . "SYMBOL")
			 (name . jsx_self_closing_element))))
 (jsx_element (type . "SEQ")
	      (members ((type . "FIELD")
			(name . "open_tag")
			(content (type . "SYMBOL")
				 (name . jsx_opening_element)))
		       ((type . "REPEAT")
			(content (type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . jsx_text))
					  ((type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . jsx_element))
						    ((type . "SYMBOL")
						     (name . jsx_self_closing_element))))
					  ((type . "SYMBOL")
					   (name . jsx_fragment))
					  ((type . "SYMBOL")
					   (name . jsx_expression)))))
		       ((type . "FIELD")
			(name . "close_tag")
			(content (type . "SYMBOL")
				 (name . jsx_closing_element)))))
 (jsx_fragment (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "<"))
			((type . "STRING")
			 (value . ">"))
			((type . "REPEAT")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . jsx_text))
					   ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . jsx_element))
						     ((type . "SYMBOL")
						      (name . jsx_self_closing_element))))
					   ((type . "SYMBOL")
					    (name . jsx_fragment))
					   ((type . "SYMBOL")
					    (name . jsx_expression)))))
			((type . "STRING")
			 (value . "<"))
			((type . "STRING")
			 (value . "/"))
			((type . "STRING")
			 (value . ">"))))
 (jsx_text (type . "PATTERN") (value . "[^{}<>]+"))
 (jsx_expression (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "{"))
			  ((type . "CHOICE")
			   (members ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . expression))
					      ((type . "SYMBOL")
					       (name . sequence_expression))
					      ((type . "SYMBOL")
					       (name . spread_element))))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . "}"))))
 (_jsx_child (type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . jsx_text))
		      ((type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . jsx_element))
				((type . "SYMBOL")
				 (name . jsx_self_closing_element))))
		      ((type . "SYMBOL")
		       (name . jsx_fragment))
		      ((type . "SYMBOL")
		       (name . jsx_expression))))
 (jsx_opening_element (type . "PREC_DYNAMIC")
		      (value . -1)
		      (content (type . "SEQ")
			       (members ((type . "SEQ")
					 (members ((type . "STRING")
						   (value . "<"))
						  ((type . "CHOICE")
						   (members ((type . "FIELD")
							     (name . "name")
							     (content (type . "CHOICE")
								      (members ((type . "CHOICE")
										(members ((type . "ALIAS")
											  (content (type . "SYMBOL")
												   (name . jsx_identifier))
											  (named . t)
											  (value . identifier))
											 ((type . "SYMBOL")
											  (name . identifier))))
									       ((type . "SYMBOL")
										(name . jsx_namespace_name)))))
							    ((type . "SEQ")
							     (members ((type . "FIELD")
								       (name . "name")
								       (content (type . "CHOICE")
										(members ((type . "SYMBOL")
											  (name . identifier))
											 ((type . "SYMBOL")
											  (name . nested_identifier)))))
								      ((type . "FIELD")
								       (name . "type_arguments")
								       (content (type . "CHOICE")
										(members ((type . "SYMBOL")
											  (name . type_arguments))
											 ((type . "BLANK")))))))))
						  ((type . "REPEAT")
						   (content (type . "FIELD")
							    (name . "attribute")
							    (content (type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . jsx_attribute))
									      ((type . "SYMBOL")
									       (name . jsx_expression))))))))
					((type . "STRING")
					 (value . ">")))))
 (jsx_identifier (type . "PATTERN")
		 (value . "[a-zA-Z_$][a-zA-Z\\d_$]*-[a-zA-Z\\d_$\\-]*"))
 (_jsx_identifier (type . "CHOICE")
		  (members ((type . "ALIAS")
			    (content (type . "SYMBOL")
				     (name . jsx_identifier))
			    (named . t)
			    (value . identifier))
			   ((type . "SYMBOL")
			    (name . identifier))))
 (nested_identifier (type . "PREC")
		    (value . "member")
		    (content (type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . identifier))
						((type . "SYMBOL")
						 (name . nested_identifier))))
				      ((type . "STRING")
				       (value . "."))
				      ((type . "SYMBOL")
				       (name . identifier)))))
 (jsx_namespace_name (type . "SEQ")
		     (members ((type . "CHOICE")
			       (members ((type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . jsx_identifier))
					 (named . t)
					 (value . identifier))
					((type . "SYMBOL")
					 (name . identifier))))
			      ((type . "STRING")
			       (value . ":"))
			      ((type . "CHOICE")
			       (members ((type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . jsx_identifier))
					 (named . t)
					 (value . identifier))
					((type . "SYMBOL")
					 (name . identifier))))))
 (_jsx_element_name (type . "CHOICE")
		    (members ((type . "CHOICE")
			      (members ((type . "ALIAS")
					(content (type . "SYMBOL")
						 (name . jsx_identifier))
					(named . t)
					(value . identifier))
				       ((type . "SYMBOL")
					(name . identifier))))
			     ((type . "SYMBOL")
			      (name . nested_identifier))
			     ((type . "SYMBOL")
			      (name . jsx_namespace_name))))
 (jsx_closing_element (type . "SEQ")
		      (members ((type . "STRING")
				(value . "<"))
			       ((type . "STRING")
				(value . "/"))
			       ((type . "FIELD")
				(name . "name")
				(content (type . "CHOICE")
					 (members ((type . "CHOICE")
						   (members ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . jsx_identifier))
							     (named . t)
							     (value . identifier))
							    ((type . "SYMBOL")
							     (name . identifier))))
						  ((type . "SYMBOL")
						   (name . nested_identifier))
						  ((type . "SYMBOL")
						   (name . jsx_namespace_name)))))
			       ((type . "STRING")
				(value . ">"))))
 (jsx_self_closing_element (type . "PREC_DYNAMIC")
			   (value . -1)
			   (content (type . "SEQ")
				    (members ((type . "SEQ")
					      (members ((type . "STRING")
							(value . "<"))
						       ((type . "CHOICE")
							(members ((type . "FIELD")
								  (name . "name")
								  (content (type . "CHOICE")
									   (members ((type . "CHOICE")
										     (members ((type . "ALIAS")
											       (content (type . "SYMBOL")
													(name . jsx_identifier))
											       (named . t)
											       (value . identifier))
											      ((type . "SYMBOL")
											       (name . identifier))))
										    ((type . "SYMBOL")
										     (name . jsx_namespace_name)))))
								 ((type . "SEQ")
								  (members ((type . "FIELD")
									    (name . "name")
									    (content (type . "CHOICE")
										     (members ((type . "SYMBOL")
											       (name . identifier))
											      ((type . "SYMBOL")
											       (name . nested_identifier)))))
									   ((type . "FIELD")
									    (name . "type_arguments")
									    (content (type . "CHOICE")
										     (members ((type . "SYMBOL")
											       (name . type_arguments))
											      ((type . "BLANK")))))))))
						       ((type . "REPEAT")
							(content (type . "FIELD")
								 (name . "attribute")
								 (content (type . "CHOICE")
									  (members ((type . "SYMBOL")
										    (name . jsx_attribute))
										   ((type . "SYMBOL")
										    (name . jsx_expression))))))))
					     ((type . "STRING")
					      (value . "/"))
					     ((type . "STRING")
					      (value . ">")))))
 (_jsx_attribute (type . "CHOICE")
		 (members ((type . "SYMBOL")
			   (name . jsx_attribute))
			  ((type . "SYMBOL")
			   (name . jsx_expression))))
 (_jsx_attribute_name (type . "CHOICE")
		      (members ((type . "ALIAS")
				(content (type . "CHOICE")
					 (members ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . jsx_identifier))
						   (named . t)
						   (value . identifier))
						  ((type . "SYMBOL")
						   (name . identifier))))
				(named . t)
				(value . property_identifier))
			       ((type . "SYMBOL")
				(name . jsx_namespace_name))))
 (jsx_attribute (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "ALIAS")
				    (content (type . "CHOICE")
					     (members ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . jsx_identifier))
						       (named . t)
						       (value . identifier))
						      ((type . "SYMBOL")
						       (name . identifier))))
				    (named . t)
				    (value . property_identifier))
				   ((type . "SYMBOL")
				    (name . jsx_namespace_name))))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "STRING")
					      (value . "="))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . string))
						       ((type . "SYMBOL")
							(name . jsx_expression))
						       ((type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . jsx_element))
								 ((type . "SYMBOL")
								  (name . jsx_self_closing_element))))
						       ((type . "SYMBOL")
							(name . jsx_fragment))))))
				   ((type . "BLANK"))))))
 (_jsx_attribute_value (type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . string))
				((type . "SYMBOL")
				 (name . jsx_expression))
				((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . jsx_element))
					  ((type . "SYMBOL")
					   (name . jsx_self_closing_element))))
				((type . "SYMBOL")
				 (name . jsx_fragment))))
 (class (type . "PREC")
	(value . "literal")
	(content (type . "SEQ")
		 (members ((type . "REPEAT")
			   (content (type . "FIELD")
				    (name . "decorator")
				    (content (type . "SYMBOL")
					     (name . decorator))))
			  ((type . "STRING")
			   (value . "class"))
			  ((type . "FIELD")
			   (name . "name")
			   (content (type . "CHOICE")
				    (members ((type . "ALIAS")
					      (content (type . "SYMBOL")
						       (name . identifier))
					      (named . t)
					      (value . type_identifier))
					     ((type . "BLANK")))))
			  ((type . "FIELD")
			   (name . "type_parameters")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . type_parameters))
					     ((type . "BLANK")))))
			  ((type . "CHOICE")
			   (members ((type . "SYMBOL")
				     (name . class_heritage))
				    ((type . "BLANK"))))
			  ((type . "FIELD")
			   (name . "body")
			   (content (type . "SYMBOL") (name . class_body))))))
 (class_declaration (type . "PREC_LEFT")
		    (value . "declaration")
		    (content (type . "SEQ")
			     (members ((type . "REPEAT")
				       (content (type . "FIELD")
						(name . "decorator")
						(content (type . "SYMBOL")
							 (name . decorator))))
				      ((type . "STRING")
				       (value . "class"))
				      ((type . "FIELD")
				       (name . "name")
				       (content (type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . identifier))
						(named . t)
						(value . type_identifier)))
				      ((type . "FIELD")
				       (name . "type_parameters")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . type_parameters))
							 ((type . "BLANK")))))
				      ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . class_heritage))
						((type . "BLANK"))))
				      ((type . "FIELD")
				       (name . "body")
				       (content (type . "SYMBOL")
						(name . class_body)))
				      ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . _automatic_semicolon))
						((type . "BLANK")))))))
 (class_heritage (type . "CHOICE")
		 (members ((type . "SEQ")
			   (members ((type . "SYMBOL")
				     (name . extends_clause))
				    ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . implements_clause))
					      ((type . "BLANK"))))))
			  ((type . "SYMBOL")
			   (name . implements_clause))))
 (function
  (type . "PREC")
  (value . "literal")
  (content (type . "SEQ")
	   (members ((type . "CHOICE")
		     (members ((type . "STRING")
			       (value . "async"))
			      ((type . "BLANK"))))
		    ((type . "STRING")
		     (value . "function"))
		    ((type . "FIELD")
		     (name . "name")
		     (content (type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . identifier))
				       ((type . "BLANK")))))
		    ((type . "SEQ")
		     (members ((type . "FIELD")
			       (name . "type_parameters")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . type_parameters))
						 ((type . "BLANK")))))
			      ((type . "FIELD")
			       (name . "parameters")
			       (content (type . "SYMBOL")
					(name . formal_parameters)))
			      ((type . "FIELD")
			       (name . "return_type")
			       (content (type . "CHOICE")
					(members ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . type_annotation))
							   ((type . "SYMBOL")
							    (name . asserts))
							   ((type . "SYMBOL")
							    (name . type_predicate_annotation))))
						 ((type . "BLANK")))))))
		    ((type . "FIELD")
		     (name . "body")
		     (content (type . "SYMBOL") (name . statement_block))))))
 (function_declaration (type . "PREC_RIGHT")
		       (value . "declaration")
		       (content (type . "SEQ")
				(members ((type . "CHOICE")
					  (members ((type . "STRING")
						    (value . "async"))
						   ((type . "BLANK"))))
					 ((type . "STRING")
					  (value . "function"))
					 ((type . "FIELD")
					  (name . "name")
					  (content (type . "SYMBOL")
						   (name . identifier)))
					 ((type . "SEQ")
					  (members ((type . "FIELD")
						    (name . "type_parameters")
						    (content (type . "CHOICE")
							     (members ((type . "SYMBOL")
								       (name . type_parameters))
								      ((type . "BLANK")))))
						   ((type . "FIELD")
						    (name . "parameters")
						    (content (type . "SYMBOL")
							     (name . formal_parameters)))
						   ((type . "FIELD")
						    (name . "return_type")
						    (content (type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . type_annotation))
										((type . "SYMBOL")
										 (name . asserts))
										((type . "SYMBOL")
										 (name . type_predicate_annotation))))
								      ((type . "BLANK")))))))
					 ((type . "FIELD")
					  (name . "body")
					  (content (type . "SYMBOL")
						   (name . statement_block)))
					 ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . _automatic_semicolon))
						   ((type . "BLANK")))))))
 (generator_function (type . "PREC")
		     (value . "literal")
		     (content (type . "SEQ")
			      (members ((type . "CHOICE")
					(members ((type . "STRING")
						  (value . "async"))
						 ((type . "BLANK"))))
				       ((type . "STRING")
					(value . "function"))
				       ((type . "STRING")
					(value . "*"))
				       ((type . "FIELD")
					(name . "name")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "BLANK")))))
				       ((type . "SEQ")
					(members ((type . "FIELD")
						  (name . "type_parameters")
						  (content (type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . type_parameters))
								    ((type . "BLANK")))))
						 ((type . "FIELD")
						  (name . "parameters")
						  (content (type . "SYMBOL")
							   (name . formal_parameters)))
						 ((type . "FIELD")
						  (name . "return_type")
						  (content (type . "CHOICE")
							   (members ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . type_annotation))
									      ((type . "SYMBOL")
									       (name . asserts))
									      ((type . "SYMBOL")
									       (name . type_predicate_annotation))))
								    ((type . "BLANK")))))))
				       ((type . "FIELD")
					(name . "body")
					(content (type . "SYMBOL")
						 (name . statement_block))))))
 (generator_function_declaration (type . "PREC_RIGHT")
				 (value . "declaration")
				 (content (type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "STRING")
							      (value . "async"))
							     ((type . "BLANK"))))
						   ((type . "STRING")
						    (value . "function"))
						   ((type . "STRING")
						    (value . "*"))
						   ((type . "FIELD")
						    (name . "name")
						    (content (type . "SYMBOL")
							     (name . identifier)))
						   ((type . "SEQ")
						    (members ((type . "FIELD")
							      (name . "type_parameters")
							      (content (type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . type_parameters))
										((type . "BLANK")))))
							     ((type . "FIELD")
							      (name . "parameters")
							      (content (type . "SYMBOL")
								       (name . formal_parameters)))
							     ((type . "FIELD")
							      (name . "return_type")
							      (content (type . "CHOICE")
								       (members ((type . "CHOICE")
										 (members ((type . "SYMBOL")
											   (name . type_annotation))
											  ((type . "SYMBOL")
											   (name . asserts))
											  ((type . "SYMBOL")
											   (name . type_predicate_annotation))))
										((type . "BLANK")))))))
						   ((type . "FIELD")
						    (name . "body")
						    (content (type . "SYMBOL")
							     (name . statement_block)))
						   ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . _automatic_semicolon))
							     ((type . "BLANK")))))))
 (arrow_function (type . "SEQ")
		 (members ((type . "CHOICE")
			   (members ((type . "STRING")
				     (value . "async"))
				    ((type . "BLANK"))))
			  ((type . "CHOICE")
			   (members ((type . "FIELD")
				     (name . "parameter")
				     (content (type . "CHOICE")
					      (members ((type . "ALIAS")
							(content (type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "declare"))
									  ((type . "STRING")
									   (value . "namespace"))
									  ((type . "STRING")
									   (value . "type"))
									  ((type . "STRING")
									   (value . "public"))
									  ((type . "STRING")
									   (value . "private"))
									  ((type . "STRING")
									   (value . "protected"))
									  ((type . "STRING")
									   (value . "readonly"))
									  ((type . "STRING")
									   (value . "module"))
									  ((type . "STRING")
									   (value . "any"))
									  ((type . "STRING")
									   (value . "number"))
									  ((type . "STRING")
									   (value . "boolean"))
									  ((type . "STRING")
									   (value . "string"))
									  ((type . "STRING")
									   (value . "symbol"))
									  ((type . "STRING")
									   (value . "export"))
									  ((type . "CHOICE")
									   (members ((type . "STRING")
										     (value . "get"))
										    ((type . "STRING")
										     (value . "set"))
										    ((type . "STRING")
										     (value . "async"))
										    ((type . "STRING")
										     (value . "static"))
										    ((type . "STRING")
										     (value . "export"))))))
							(named . t)
							(value . identifier))
						       ((type . "SYMBOL")
							(name . identifier)))))
				    ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "type_parameters")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . type_parameters))
								 ((type . "BLANK")))))
					      ((type . "FIELD")
					       (name . "parameters")
					       (content (type . "SYMBOL")
							(name . formal_parameters)))
					      ((type . "FIELD")
					       (name . "return_type")
					       (content (type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . type_annotation))
									   ((type . "SYMBOL")
									    (name . asserts))
									   ((type . "SYMBOL")
									    (name . type_predicate_annotation))))
								 ((type . "BLANK")))))))))
			  ((type . "STRING")
			   (value . "=>"))
			  ((type . "FIELD")
			   (name . "body")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . expression))
					     ((type . "SYMBOL")
					      (name . statement_block)))))))
 (_call_signature (type . "SEQ")
		  (members ((type . "FIELD")
			    (name . "type_parameters")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . type_parameters))
					      ((type . "BLANK")))))
			   ((type . "FIELD")
			    (name . "parameters")
			    (content (type . "SYMBOL")
				     (name . formal_parameters)))
			   ((type . "FIELD")
			    (name . "return_type")
			    (content (type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . type_annotation))
							((type . "SYMBOL")
							 (name . asserts))
							((type . "SYMBOL")
							 (name . type_predicate_annotation))))
					      ((type . "BLANK")))))))
 (_formal_parameter (type . "CHOICE")
		    (members ((type . "SYMBOL")
			      (name . required_parameter))
			     ((type . "SYMBOL")
			      (name . optional_parameter))))
 (call_expression (type . "CHOICE")
		  (members ((type . "PREC")
			    (value . "call")
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "function")
					       (content (type . "SYMBOL")
							(name . expression)))
					      ((type . "FIELD")
					       (name . "type_arguments")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . type_arguments))
								 ((type . "BLANK")))))
					      ((type . "FIELD")
					       (name . "arguments")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . arguments))
								 ((type . "SYMBOL")
								  (name . template_string))))))))
			   ((type . "PREC")
			    (value . "member")
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "function")
					       (content (type . "SYMBOL")
							(name . primary_expression)))
					      ((type . "STRING")
					       (value . "?."))
					      ((type . "FIELD")
					       (name . "type_arguments")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . type_arguments))
								 ((type . "BLANK")))))
					      ((type . "FIELD")
					       (name . "arguments")
					       (content (type . "SYMBOL")
							(name . arguments))))))))
 (new_expression (type . "PREC_RIGHT")
		 (value . "new")
		 (content (type . "SEQ")
			  (members ((type . "STRING")
				    (value . "new"))
				   ((type . "FIELD")
				    (name . "constructor")
				    (content (type . "SYMBOL")
					     (name . primary_expression)))
				   ((type . "FIELD")
				    (name . "type_arguments")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . type_arguments))
						      ((type . "BLANK")))))
				   ((type . "FIELD")
				    (name . "arguments")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . arguments))
						      ((type . "BLANK"))))))))
 (await_expression (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "await"))
			    ((type . "SYMBOL")
			     (name . expression))))
 (member_expression (type . "PREC")
		    (value . "member")
		    (content (type . "SEQ")
			     (members ((type . "FIELD")
				       (name . "object")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . expression))
							 ((type . "SYMBOL")
							  (name . primary_expression)))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "."))
						((type . "STRING")
						 (value . "?."))))
				      ((type . "FIELD")
				       (name . "property")
				       (content (type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . identifier))
						(named . t)
						(value . property_identifier))))))
 (subscript_expression (type . "PREC_RIGHT")
		       (value . "member")
		       (content (type . "SEQ")
				(members ((type . "FIELD")
					  (name . "object")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . expression))
							    ((type . "SYMBOL")
							     (name . primary_expression)))))
					 ((type . "CHOICE")
					  (members ((type . "STRING")
						    (value . "?."))
						   ((type . "BLANK"))))
					 ((type . "STRING")
					  (value . "["))
					 ((type . "FIELD")
					  (name . "index")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . expression))
							    ((type . "SYMBOL")
							     (name . sequence_expression)))))
					 ((type . "STRING")
					  (value . "]")))))
 (_lhs_expression (type . "CHOICE")
		  (members ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . member_expression))
				     ((type . "SYMBOL")
				      (name . subscript_expression))
				     ((type . "SYMBOL")
				      (name . identifier))
				     ((type . "ALIAS")
				      (content (type . "CHOICE")
					       (members ((type . "STRING")
							 (value . "declare"))
							((type . "STRING")
							 (value . "namespace"))
							((type . "STRING")
							 (value . "type"))
							((type . "STRING")
							 (value . "public"))
							((type . "STRING")
							 (value . "private"))
							((type . "STRING")
							 (value . "protected"))
							((type . "STRING")
							 (value . "readonly"))
							((type . "STRING")
							 (value . "module"))
							((type . "STRING")
							 (value . "any"))
							((type . "STRING")
							 (value . "number"))
							((type . "STRING")
							 (value . "boolean"))
							((type . "STRING")
							 (value . "string"))
							((type . "STRING")
							 (value . "symbol"))
							((type . "STRING")
							 (value . "export"))
							((type . "CHOICE")
							 (members ((type . "STRING")
								   (value . "get"))
								  ((type . "STRING")
								   (value . "set"))
								  ((type . "STRING")
								   (value . "async"))
								  ((type . "STRING")
								   (value . "static"))
								  ((type . "STRING")
								   (value . "export"))))))
				      (named . t)
				      (value . identifier))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . object_pattern))
					       ((type . "SYMBOL")
						(name . array_pattern))))))
			   ((type . "SYMBOL")
			    (name . non_null_expression))))
 (assignment_expression (type . "PREC_RIGHT")
			(value . "assign")
			(content (type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "left")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . parenthesized_expression))
							     ((type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . member_expression))
										 ((type . "SYMBOL")
										  (name . subscript_expression))
										 ((type . "SYMBOL")
										  (name . identifier))
										 ((type . "ALIAS")
										  (content (type . "CHOICE")
											   (members ((type . "STRING")
												     (value . "declare"))
												    ((type . "STRING")
												     (value . "namespace"))
												    ((type . "STRING")
												     (value . "type"))
												    ((type . "STRING")
												     (value . "public"))
												    ((type . "STRING")
												     (value . "private"))
												    ((type . "STRING")
												     (value . "protected"))
												    ((type . "STRING")
												     (value . "readonly"))
												    ((type . "STRING")
												     (value . "module"))
												    ((type . "STRING")
												     (value . "any"))
												    ((type . "STRING")
												     (value . "number"))
												    ((type . "STRING")
												     (value . "boolean"))
												    ((type . "STRING")
												     (value . "string"))
												    ((type . "STRING")
												     (value . "symbol"))
												    ((type . "STRING")
												     (value . "export"))
												    ((type . "CHOICE")
												     (members ((type . "STRING")
													       (value . "get"))
													      ((type . "STRING")
													       (value . "set"))
													      ((type . "STRING")
													       (value . "async"))
													      ((type . "STRING")
													       (value . "static"))
													      ((type . "STRING")
													       (value . "export"))))))
										  (named . t)
										  (value . identifier))
										 ((type . "CHOICE")
										  (members ((type . "SYMBOL")
											    (name . object_pattern))
											   ((type . "SYMBOL")
											    (name . array_pattern))))))
								       ((type . "SYMBOL")
									(name . non_null_expression)))))))
					  ((type . "STRING")
					   (value . "="))
					  ((type . "FIELD")
					   (name . "right")
					   (content (type . "SYMBOL")
						    (name . expression))))))
 (_augmented_assignment_lhs (type . "CHOICE")
			    (members ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . member_expression))
					       ((type . "SYMBOL")
						(name . subscript_expression))
					       ((type . "ALIAS")
						(content (type . "CHOICE")
							 (members ((type . "STRING")
								   (value . "declare"))
								  ((type . "STRING")
								   (value . "namespace"))
								  ((type . "STRING")
								   (value . "type"))
								  ((type . "STRING")
								   (value . "public"))
								  ((type . "STRING")
								   (value . "private"))
								  ((type . "STRING")
								   (value . "protected"))
								  ((type . "STRING")
								   (value . "readonly"))
								  ((type . "STRING")
								   (value . "module"))
								  ((type . "STRING")
								   (value . "any"))
								  ((type . "STRING")
								   (value . "number"))
								  ((type . "STRING")
								   (value . "boolean"))
								  ((type . "STRING")
								   (value . "string"))
								  ((type . "STRING")
								   (value . "symbol"))
								  ((type . "STRING")
								   (value . "export"))
								  ((type . "CHOICE")
								   (members ((type . "STRING")
									     (value . "get"))
									    ((type . "STRING")
									     (value . "set"))
									    ((type . "STRING")
									     (value . "async"))
									    ((type . "STRING")
									     (value . "static"))
									    ((type . "STRING")
									     (value . "export"))))))
						(named . t)
						(value . identifier))
					       ((type . "SYMBOL")
						(name . identifier))
					       ((type . "SYMBOL")
						(name . parenthesized_expression))))
				     ((type . "SYMBOL")
				      (name . non_null_expression))))
 (augmented_assignment_expression (type . "PREC_RIGHT")
				  (value . "assign")
				  (content (type . "SEQ")
					   (members ((type . "FIELD")
						     (name . "left")
						     (content (type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . member_expression))
										 ((type . "SYMBOL")
										  (name . subscript_expression))
										 ((type . "ALIAS")
										  (content (type . "CHOICE")
											   (members ((type . "STRING")
												     (value . "declare"))
												    ((type . "STRING")
												     (value . "namespace"))
												    ((type . "STRING")
												     (value . "type"))
												    ((type . "STRING")
												     (value . "public"))
												    ((type . "STRING")
												     (value . "private"))
												    ((type . "STRING")
												     (value . "protected"))
												    ((type . "STRING")
												     (value . "readonly"))
												    ((type . "STRING")
												     (value . "module"))
												    ((type . "STRING")
												     (value . "any"))
												    ((type . "STRING")
												     (value . "number"))
												    ((type . "STRING")
												     (value . "boolean"))
												    ((type . "STRING")
												     (value . "string"))
												    ((type . "STRING")
												     (value . "symbol"))
												    ((type . "STRING")
												     (value . "export"))
												    ((type . "CHOICE")
												     (members ((type . "STRING")
													       (value . "get"))
													      ((type . "STRING")
													       (value . "set"))
													      ((type . "STRING")
													       (value . "async"))
													      ((type . "STRING")
													       (value . "static"))
													      ((type . "STRING")
													       (value . "export"))))))
										  (named . t)
										  (value . identifier))
										 ((type . "SYMBOL")
										  (name . identifier))
										 ((type . "SYMBOL")
										  (name . parenthesized_expression))))
								       ((type . "SYMBOL")
									(name . non_null_expression)))))
						    ((type . "CHOICE")
						     (members ((type . "STRING")
							       (value . "+="))
							      ((type . "STRING")
							       (value . "-="))
							      ((type . "STRING")
							       (value . "*="))
							      ((type . "STRING")
							       (value . "/="))
							      ((type . "STRING")
							       (value . "%="))
							      ((type . "STRING")
							       (value . "^="))
							      ((type . "STRING")
							       (value . "&="))
							      ((type . "STRING")
							       (value . "|="))
							      ((type . "STRING")
							       (value . ">>="))
							      ((type . "STRING")
							       (value . ">>>="))
							      ((type . "STRING")
							       (value . "<<="))
							      ((type . "STRING")
							       (value . "**="))
							      ((type . "STRING")
							       (value . "&&="))
							      ((type . "STRING")
							       (value . "||="))
							      ((type . "STRING")
							       (value . "??="))))
						    ((type . "FIELD")
						     (name . "right")
						     (content (type . "SYMBOL")
							      (name . expression))))))
 (_initializer (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "="))
			((type . "FIELD")
			 (name . "value")
			 (content (type . "SYMBOL") (name . expression)))))
 (_destructuring_pattern (type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . object_pattern))
				  ((type . "SYMBOL")
				   (name . array_pattern))))
 (spread_element (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "..."))
			  ((type . "SYMBOL")
			   (name . expression))))
 (ternary_expression (type . "PREC_RIGHT")
		     (value . "ternary")
		     (content (type . "SEQ")
			      (members ((type . "FIELD")
					(name . "condition")
					(content (type . "SYMBOL")
						 (name . expression)))
				       ((type . "STRING")
					(value . "?"))
				       ((type . "FIELD")
					(name . "consequence")
					(content (type . "SYMBOL")
						 (name . expression)))
				       ((type . "STRING")
					(value . ":"))
				       ((type . "FIELD")
					(name . "alternative")
					(content (type . "SYMBOL")
						 (name . expression))))))
 (binary_expression (type . "CHOICE")
		    (members ((type . "PREC_LEFT")
			      (value . "binary_and")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_or")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "||")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_times")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">>")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_times")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">>>")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_times")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<<")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_and")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_or")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "^")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_or")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "|")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_plus")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "+")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_plus")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "-")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_times")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "*")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_times")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "/")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_times")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "%")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_exp")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "**")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "==")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "===")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "!=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "!==")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "ternary")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "??")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_relation")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "instanceof")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))
			     ((type . "PREC_LEFT")
			      (value . "binary_in")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "in")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "SYMBOL")
							  (name . expression))))))))
 (unary_expression (type . "CHOICE")
		   (members ((type . "PREC_LEFT")
			     (value . "unary_not")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "!")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . "unary_not")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "~")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . "unary_not")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "-")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . "unary_not")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "+")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . "unary_void")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "typeof")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . "unary_void")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "void")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))
			    ((type . "PREC_LEFT")
			     (value . "unary_void")
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "operator")
						(content (type . "STRING")
							 (value . "delete")))
					       ((type . "FIELD")
						(name . "argument")
						(content (type . "SYMBOL")
							 (name . expression))))))))
 (update_expression (type . "PREC_LEFT")
		    (value . 0)
		    (content (type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "argument")
						 (content (type . "SYMBOL")
							  (name . expression)))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "++"))
								   ((type . "STRING")
								    (value . "--")))))))
				      ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "++"))
								   ((type . "STRING")
								    (value . "--")))))
						((type . "FIELD")
						 (name . "argument")
						 (content (type . "SYMBOL")
							  (name . expression))))))))
 (sequence_expression (type . "SEQ")
		      (members ((type . "FIELD")
				(name . "left")
				(content (type . "SYMBOL")
					 (name . expression)))
			       ((type . "STRING")
				(value . ","))
			       ((type . "FIELD")
				(name . "right")
				(content (type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . sequence_expression))
						  ((type . "SYMBOL")
						   (name . expression)))))))
 (string (type . "CHOICE")
	 (members ((type . "SEQ")
		   (members ((type . "STRING")
			     (value . "\""))
			    ((type . "REPEAT")
			     (content (type . "CHOICE")
				      (members ((type . "IMMEDIATE_TOKEN")
						(content (type . "PREC")
							 (value . 1)
							 (content (type . "PATTERN")
								  (value . "[^\"\\\\]+"))))
					       ((type . "SYMBOL")
						(name . escape_sequence)))))
			    ((type . "STRING")
			     (value . "\""))))
		  ((type . "SEQ")
		   (members ((type . "STRING")
			     (value . "'"))
			    ((type . "REPEAT")
			     (content (type . "CHOICE")
				      (members ((type . "IMMEDIATE_TOKEN")
						(content (type . "PREC")
							 (value . 1)
							 (content (type . "PATTERN")
								  (value . "[^'\\\\]+"))))
					       ((type . "SYMBOL")
						(name . escape_sequence)))))
			    ((type . "STRING")
			     (value . "'"))))))
 (escape_sequence (type . "IMMEDIATE_TOKEN")
		  (content (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "\\"))
				    ((type . "CHOICE")
				     (members ((type . "PATTERN")
					       (value . "[^xu0-7]"))
					      ((type . "PATTERN")
					       (value . "[0-7]{1,3}"))
					      ((type . "PATTERN")
					       (value . "x[0-9a-fA-F]{2}"))
					      ((type . "PATTERN")
					       (value . "u[0-9a-fA-F]{4}"))
					      ((type . "PATTERN")
					       (value . "u{[0-9a-fA-F]+}")))))))
 (comment (type . "TOKEN")
	  (content (type . "CHOICE")
		   (members ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "//"))
				      ((type . "PATTERN")
				       (value . ".*"))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "/*"))
				      ((type . "PATTERN")
				       (value . "[^*]*\\*+([^/*][^*]*\\*+)*"))
				      ((type . "STRING")
				       (value . "/")))))))
 (template_string (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "`"))
			   ((type . "REPEAT")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . _template_chars))
					      ((type . "SYMBOL")
					       (name . escape_sequence))
					      ((type . "SYMBOL")
					       (name . template_substitution)))))
			   ((type . "STRING")
			    (value . "`"))))
 (template_substitution (type . "SEQ")
			(members ((type . "STRING")
				  (value . "${"))
				 ((type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . expression))
					   ((type . "SYMBOL")
					    (name . sequence_expression))))
				 ((type . "STRING")
				  (value . "}"))))
 (regex (type . "SEQ")
	(members ((type . "STRING")
		  (value . "/"))
		 ((type . "FIELD")
		  (name . "pattern")
		  (content (type . "SYMBOL") (name . regex_pattern)))
		 ((type . "IMMEDIATE_TOKEN")
		  (content (type . "STRING") (value . "/")))
		 ((type . "CHOICE")
		  (members ((type . "FIELD")
			    (name . "flags")
			    (content (type . "SYMBOL") (name . regex_flags)))
			   ((type . "BLANK"))))))
 (regex_pattern (type . "IMMEDIATE_TOKEN")
		(content (type . "PREC")
			 (value . -1)
			 (content (type . "REPEAT1")
				  (content (type . "CHOICE")
					   (members ((type . "SEQ")
						     (members ((type . "STRING")
							       (value . "["))
							      ((type . "REPEAT")
							       (content (type . "CHOICE")
									(members ((type . "SEQ")
										  (members ((type . "STRING")
											    (value . "\\"))
											   ((type . "PATTERN")
											    (value . "."))))
										 ((type . "PATTERN")
										  (value . "[^\\]\\n\\\\]")))))
							      ((type . "STRING")
							       (value . "]"))))
						    ((type . "SEQ")
						     (members ((type . "STRING")
							       (value . "\\"))
							      ((type . "PATTERN")
							       (value . "."))))
						    ((type . "PATTERN")
						     (value . "[^/\\\\\\[\\n]")))))))
 (regex_flags (type . "IMMEDIATE_TOKEN")
	      (content (type . "PATTERN") (value . "[a-z]+")))
 (number (type . "TOKEN")
	 (content (type . "CHOICE")
		  (members ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . "0x"))
					       ((type . "STRING")
						(value . "0X"))))
				     ((type . "PATTERN")
				      (value . "[\\da-fA-F](_?[\\da-fA-F])*"))))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . "0"))
							 ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "0"))
									     ((type . "BLANK"))))
								   ((type . "PATTERN")
								    (value . "[1-9]"))
								   ((type . "CHOICE")
								    (members ((type . "SEQ")
									      (members ((type . "CHOICE")
											(members ((type . "STRING")
												  (value . "_"))
												 ((type . "BLANK"))))
										       ((type . "PATTERN")
											(value . "\\d(_?\\d)*"))))
									     ((type . "BLANK"))))))))
					       ((type . "STRING")
						(value . "."))
					       ((type . "CHOICE")
						(members ((type . "PATTERN")
							  (value . "\\d(_?\\d)*"))
							 ((type . "BLANK"))))
					       ((type . "CHOICE")
						(members ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "e"))
									     ((type . "STRING")
									      (value . "E"))))
								   ((type . "SEQ")
								    (members ((type . "CHOICE")
									      (members ((type . "CHOICE")
											(members ((type . "STRING")
												  (value . "-"))
												 ((type . "STRING")
												  (value . "+"))))
										       ((type . "BLANK"))))
									     ((type . "PATTERN")
									      (value . "\\d(_?\\d)*"))))))
							 ((type . "BLANK"))))))
				     ((type . "SEQ")
				      (members ((type . "STRING")
						(value . "."))
					       ((type . "PATTERN")
						(value . "\\d(_?\\d)*"))
					       ((type . "CHOICE")
						(members ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "e"))
									     ((type . "STRING")
									      (value . "E"))))
								   ((type . "SEQ")
								    (members ((type . "CHOICE")
									      (members ((type . "CHOICE")
											(members ((type . "STRING")
												  (value . "-"))
												 ((type . "STRING")
												  (value . "+"))))
										       ((type . "BLANK"))))
									     ((type . "PATTERN")
									      (value . "\\d(_?\\d)*"))))))
							 ((type . "BLANK"))))))
				     ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . "0"))
							 ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "STRING")
									      (value . "0"))
									     ((type . "BLANK"))))
								   ((type . "PATTERN")
								    (value . "[1-9]"))
								   ((type . "CHOICE")
								    (members ((type . "SEQ")
									      (members ((type . "CHOICE")
											(members ((type . "STRING")
												  (value . "_"))
												 ((type . "BLANK"))))
										       ((type . "PATTERN")
											(value . "\\d(_?\\d)*"))))
									     ((type . "BLANK"))))))))
					       ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "e"))
								   ((type . "STRING")
								    (value . "E"))))
							 ((type . "SEQ")
							  (members ((type . "CHOICE")
								    (members ((type . "CHOICE")
									      (members ((type . "STRING")
											(value . "-"))
										       ((type . "STRING")
											(value . "+"))))
									     ((type . "BLANK"))))
								   ((type . "PATTERN")
								    (value . "\\d(_?\\d)*"))))))))
				     ((type . "SEQ")
				      (members ((type . "PATTERN")
						(value . "\\d(_?\\d)*"))))))
			   ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . "0b"))
					       ((type . "STRING")
						(value . "0B"))))
				     ((type . "PATTERN")
				      (value . "[0-1](_?[0-1])*"))))
			   ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . "0o"))
					       ((type . "STRING")
						(value . "0O"))))
				     ((type . "PATTERN")
				      (value . "[0-7](_?[0-7])*"))))
			   ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "0x"))
								   ((type . "STRING")
								    (value . "0X"))))
							 ((type . "PATTERN")
							  (value . "[\\da-fA-F](_?[\\da-fA-F])*"))))
					       ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "0b"))
								   ((type . "STRING")
								    (value . "0B"))))
							 ((type . "PATTERN")
							  (value . "[0-1](_?[0-1])*"))))
					       ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "0o"))
								   ((type . "STRING")
								    (value . "0O"))))
							 ((type . "PATTERN")
							  (value . "[0-7](_?[0-7])*"))))
					       ((type . "PATTERN")
						(value . "\\d(_?\\d)*"))))
				     ((type . "STRING")
				      (value . "n")))))))
 (identifier (type . "TOKEN")
	     (content (type . "SEQ")
		      (members ((type . "PATTERN")
				(value . "[^\\x00-\\x1F\\s0-9:;`\"'@#.,|^&<=>+\\-*/\\\\%?!~()\\[\\]{}\\uFEFF\\u2060\\u200B\\u00A0]|\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]+\\}"))
			       ((type . "REPEAT")
				(content (type . "PATTERN")
					 (value . "[^\\x00-\\x1F\\s:;`\"'@#.,|^&<=>+\\-*/\\\\%?!~()\\[\\]{}\\uFEFF\\u2060\\u200B\\u00A0]|\\\\u[0-9a-fA-F]{4}|\\\\u\\{[0-9a-fA-F]+\\}"))))))
 (meta_property (type . "SEQ")
		(members ((type . "STRING")
			  (value . "new"))
			 ((type . "STRING")
			  (value . "."))
			 ((type . "STRING")
			  (value . "target"))))
 (this (type . "STRING") (value . "this"))
 (super (type . "STRING") (value . "super"))
 (true (type . "STRING") (value . "true"))
 (false (type . "STRING") (value . "false"))
 (null (type . "STRING") (value . "null"))
 (undefined (type . "STRING") (value . "undefined"))
 (arguments (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "("))
		     ((type . "CHOICE")
		      (members ((type . "SEQ")
				(members ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . expression))
							     ((type . "SYMBOL")
							      (name . spread_element))))
						   ((type . "BLANK"))))
					 ((type . "REPEAT")
					  (content (type . "SEQ")
						   (members ((type . "STRING")
							     (value . ","))
							    ((type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "SYMBOL")
										 (name . expression))
										((type . "SYMBOL")
										 (name . spread_element))))
								      ((type . "BLANK")))))))))
			       ((type . "BLANK"))))
		     ((type . "STRING")
		      (value . ")"))))
 (decorator (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "@"))
		     ((type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . identifier))
			       ((type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . decorator_member_expression))
				(named . t)
				(value . member_expression))
			       ((type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . decorator_call_expression))
				(named . t)
				(value . call_expression))))))
 (decorator_member_expression (type . "PREC")
			      (value . "member")
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "object")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . decorator_member_expression))
								    (named . t)
								    (value . member_expression)))))
						((type . "STRING")
						 (value . "."))
						((type . "FIELD")
						 (name . "property")
						 (content (type . "ALIAS")
							  (content (type . "SYMBOL")
								   (name . identifier))
							  (named . t)
							  (value . property_identifier))))))
 (decorator_call_expression (type . "PREC")
			    (value . "call")
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "function")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . identifier))
								 ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . decorator_member_expression))
								  (named . t)
								  (value . member_expression)))))
					      ((type . "FIELD")
					       (name . "arguments")
					       (content (type . "SYMBOL")
							(name . arguments))))))
 (class_body (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "{"))
		      ((type . "REPEAT")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . decorator))
					 ((type . "SEQ")
					  (members ((type . "SYMBOL")
						    (name . method_definition))
						   ((type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . _automatic_semicolon))
								       ((type . "STRING")
									(value . ";"))))
							     ((type . "BLANK"))))))
					 ((type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . abstract_method_signature))
							     ((type . "SYMBOL")
							      (name . index_signature))
							     ((type . "SYMBOL")
							      (name . method_signature))
							     ((type . "SYMBOL")
							      (name . public_field_definition))))
						   ((type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . _automatic_semicolon))
								       ((type . "STRING")
									(value . ";"))))
							     ((type . "STRING")
							      (value . ",")))))))))
		      ((type . "STRING")
		       (value . "}"))))
 (public_field_definition (type . "SEQ")
			  (members ((type . "CHOICE")
				    (members ((type . "STRING")
					      (value . "declare"))
					     ((type . "BLANK"))))
				   ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . accessibility_modifier))
					     ((type . "BLANK"))))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "static"))
								 ((type . "BLANK"))))
						       ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "readonly"))
								 ((type . "BLANK"))))))
					     ((type . "SEQ")
					      (members ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "abstract"))
								 ((type . "BLANK"))))
						       ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "readonly"))
								 ((type . "BLANK"))))))
					     ((type . "SEQ")
					      (members ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "readonly"))
								 ((type . "BLANK"))))
						       ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "abstract"))
								 ((type . "BLANK"))))))))
				   ((type . "FIELD")
				    (name . "name")
				    (content (type . "CHOICE")
					     (members ((type . "ALIAS")
						       (content (type . "CHOICE")
								(members ((type . "SYMBOL")
									  (name . identifier))
									 ((type . "CHOICE")
									  (members ((type . "STRING")
										    (value . "declare"))
										   ((type . "STRING")
										    (value . "namespace"))
										   ((type . "STRING")
										    (value . "type"))
										   ((type . "STRING")
										    (value . "public"))
										   ((type . "STRING")
										    (value . "private"))
										   ((type . "STRING")
										    (value . "protected"))
										   ((type . "STRING")
										    (value . "readonly"))
										   ((type . "STRING")
										    (value . "module"))
										   ((type . "STRING")
										    (value . "any"))
										   ((type . "STRING")
										    (value . "number"))
										   ((type . "STRING")
										    (value . "boolean"))
										   ((type . "STRING")
										    (value . "string"))
										   ((type . "STRING")
										    (value . "symbol"))
										   ((type . "STRING")
										    (value . "export"))
										   ((type . "CHOICE")
										    (members ((type . "STRING")
											      (value . "get"))
											     ((type . "STRING")
											      (value . "set"))
											     ((type . "STRING")
											      (value . "async"))
											     ((type . "STRING")
											      (value . "static"))
											     ((type . "STRING")
											      (value . "export"))))))))
						       (named . t)
						       (value . property_identifier))
						      ((type . "SYMBOL")
						       (name . string))
						      ((type . "SYMBOL")
						       (name . number))
						      ((type . "SYMBOL")
						       (name . computed_property_name)))))
				   ((type . "CHOICE")
				    (members ((type . "CHOICE")
					      (members ((type . "STRING")
							(value . "?"))
						       ((type . "STRING")
							(value . "!"))))
					     ((type . "BLANK"))))
				   ((type . "FIELD")
				    (name . "type")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . type_annotation))
						      ((type . "BLANK")))))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "STRING")
							(value . "="))
						       ((type . "FIELD")
							(name . "value")
							(content (type . "SYMBOL")
								 (name . expression)))))
					     ((type . "BLANK"))))))
 (formal_parameters (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "("))
			     ((type . "CHOICE")
			      (members ((type . "SEQ")
					(members ((type . "SEQ")
						  (members ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . required_parameter))
								     ((type . "SYMBOL")
								      (name . optional_parameter))))
							   ((type . "REPEAT")
							    (content (type . "SEQ")
								     (members ((type . "STRING")
									       (value . ","))
									      ((type . "CHOICE")
									       (members ((type . "SYMBOL")
											 (name . required_parameter))
											((type . "SYMBOL")
											 (name . optional_parameter)))))))))
						 ((type . "CHOICE")
						  (members ((type . "STRING")
							    (value . ","))
							   ((type . "BLANK"))))))
				       ((type . "BLANK"))))
			     ((type . "STRING")
			      (value . ")"))))
 (pattern (type . "PREC_DYNAMIC")
	  (value . -1)
	  (content (type . "CHOICE")
		   (members ((type . "SYMBOL")
			     (name . identifier))
			    ((type . "ALIAS")
			     (content (type . "CHOICE")
				      (members ((type . "STRING")
						(value . "declare"))
					       ((type . "STRING")
						(value . "namespace"))
					       ((type . "STRING")
						(value . "type"))
					       ((type . "STRING")
						(value . "public"))
					       ((type . "STRING")
						(value . "private"))
					       ((type . "STRING")
						(value . "protected"))
					       ((type . "STRING")
						(value . "readonly"))
					       ((type . "STRING")
						(value . "module"))
					       ((type . "STRING")
						(value . "any"))
					       ((type . "STRING")
						(value . "number"))
					       ((type . "STRING")
						(value . "boolean"))
					       ((type . "STRING")
						(value . "string"))
					       ((type . "STRING")
						(value . "symbol"))
					       ((type . "STRING")
						(value . "export"))
					       ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . "get"))
							 ((type . "STRING")
							  (value . "set"))
							 ((type . "STRING")
							  (value . "async"))
							 ((type . "STRING")
							  (value . "static"))
							 ((type . "STRING")
							  (value . "export"))))))
			     (named . t)
			     (value . identifier))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . object_pattern))
				      ((type . "SYMBOL")
				       (name . array_pattern))))
			    ((type . "SYMBOL")
			     (name . rest_pattern)))))
 (rest_pattern (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "..."))
			((type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . identifier))
				  ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . object_pattern))
					    ((type . "SYMBOL")
					     (name . array_pattern))))))))
 (method_definition (type . "PREC_LEFT")
		    (value . 0)
		    (content (type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "SYMBOL")
						 (name . accessibility_modifier))
						((type . "BLANK"))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "static"))
						((type . "BLANK"))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "readonly"))
						((type . "BLANK"))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "async"))
						((type . "BLANK"))))
				      ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "STRING")
							   (value . "get"))
							  ((type . "STRING")
							   (value . "set"))
							  ((type . "STRING")
							   (value . "*"))))
						((type . "BLANK"))))
				      ((type . "FIELD")
				       (name . "name")
				       (content (type . "CHOICE")
						(members ((type . "ALIAS")
							  (content (type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . identifier))
									    ((type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "declare"))
										      ((type . "STRING")
										       (value . "namespace"))
										      ((type . "STRING")
										       (value . "type"))
										      ((type . "STRING")
										       (value . "public"))
										      ((type . "STRING")
										       (value . "private"))
										      ((type . "STRING")
										       (value . "protected"))
										      ((type . "STRING")
										       (value . "readonly"))
										      ((type . "STRING")
										       (value . "module"))
										      ((type . "STRING")
										       (value . "any"))
										      ((type . "STRING")
										       (value . "number"))
										      ((type . "STRING")
										       (value . "boolean"))
										      ((type . "STRING")
										       (value . "string"))
										      ((type . "STRING")
										       (value . "symbol"))
										      ((type . "STRING")
										       (value . "export"))
										      ((type . "CHOICE")
										       (members ((type . "STRING")
												 (value . "get"))
												((type . "STRING")
												 (value . "set"))
												((type . "STRING")
												 (value . "async"))
												((type . "STRING")
												 (value . "static"))
												((type . "STRING")
												 (value . "export"))))))))
							  (named . t)
							  (value . property_identifier))
							 ((type . "SYMBOL")
							  (name . string))
							 ((type . "SYMBOL")
							  (name . number))
							 ((type . "SYMBOL")
							  (name . computed_property_name)))))
				      ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "?"))
						((type . "BLANK"))))
				      ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "type_parameters")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . type_parameters))
								   ((type . "BLANK")))))
						((type . "FIELD")
						 (name . "parameters")
						 (content (type . "SYMBOL")
							  (name . formal_parameters)))
						((type . "FIELD")
						 (name . "return_type")
						 (content (type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . type_annotation))
									     ((type . "SYMBOL")
									      (name . asserts))
									     ((type . "SYMBOL")
									      (name . type_predicate_annotation))))
								   ((type . "BLANK")))))))
				      ((type . "FIELD")
				       (name . "body")
				       (content (type . "SYMBOL")
						(name . statement_block))))))
 (pair (type . "SEQ")
       (members ((type . "FIELD")
		 (name . "key")
		 (content (type . "CHOICE")
			  (members ((type . "ALIAS")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . identifier))
						      ((type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "declare"))
								((type . "STRING")
								 (value . "namespace"))
								((type . "STRING")
								 (value . "type"))
								((type . "STRING")
								 (value . "public"))
								((type . "STRING")
								 (value . "private"))
								((type . "STRING")
								 (value . "protected"))
								((type . "STRING")
								 (value . "readonly"))
								((type . "STRING")
								 (value . "module"))
								((type . "STRING")
								 (value . "any"))
								((type . "STRING")
								 (value . "number"))
								((type . "STRING")
								 (value . "boolean"))
								((type . "STRING")
								 (value . "string"))
								((type . "STRING")
								 (value . "symbol"))
								((type . "STRING")
								 (value . "export"))
								((type . "CHOICE")
								 (members ((type . "STRING")
									   (value . "get"))
									  ((type . "STRING")
									   (value . "set"))
									  ((type . "STRING")
									   (value . "async"))
									  ((type . "STRING")
									   (value . "static"))
									  ((type . "STRING")
									   (value . "export"))))))))
				    (named . t)
				    (value . property_identifier))
				   ((type . "SYMBOL")
				    (name . string))
				   ((type . "SYMBOL")
				    (name . number))
				   ((type . "SYMBOL")
				    (name . computed_property_name)))))
		((type . "STRING")
		 (value . ":"))
		((type . "FIELD")
		 (name . "value")
		 (content (type . "SYMBOL") (name . expression)))))
 (pair_pattern (type . "SEQ")
	       (members ((type . "FIELD")
			 (name . "key")
			 (content (type . "CHOICE")
				  (members ((type . "ALIAS")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "CHOICE")
							       (members ((type . "STRING")
									 (value . "declare"))
									((type . "STRING")
									 (value . "namespace"))
									((type . "STRING")
									 (value . "type"))
									((type . "STRING")
									 (value . "public"))
									((type . "STRING")
									 (value . "private"))
									((type . "STRING")
									 (value . "protected"))
									((type . "STRING")
									 (value . "readonly"))
									((type . "STRING")
									 (value . "module"))
									((type . "STRING")
									 (value . "any"))
									((type . "STRING")
									 (value . "number"))
									((type . "STRING")
									 (value . "boolean"))
									((type . "STRING")
									 (value . "string"))
									((type . "STRING")
									 (value . "symbol"))
									((type . "STRING")
									 (value . "export"))
									((type . "CHOICE")
									 (members ((type . "STRING")
										   (value . "get"))
										  ((type . "STRING")
										   (value . "set"))
										  ((type . "STRING")
										   (value . "async"))
										  ((type . "STRING")
										   (value . "static"))
										  ((type . "STRING")
										   (value . "export"))))))))
					    (named . t)
					    (value . property_identifier))
					   ((type . "SYMBOL")
					    (name . string))
					   ((type . "SYMBOL")
					    (name . number))
					   ((type . "SYMBOL")
					    (name . computed_property_name)))))
			((type . "STRING")
			 (value . ":"))
			((type . "FIELD")
			 (name . "value")
			 (content (type . "SYMBOL") (name . pattern)))))
 (_property_name (type . "CHOICE")
		 (members ((type . "ALIAS")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . identifier))
					     ((type . "CHOICE")
					      (members ((type . "STRING")
							(value . "declare"))
						       ((type . "STRING")
							(value . "namespace"))
						       ((type . "STRING")
							(value . "type"))
						       ((type . "STRING")
							(value . "public"))
						       ((type . "STRING")
							(value . "private"))
						       ((type . "STRING")
							(value . "protected"))
						       ((type . "STRING")
							(value . "readonly"))
						       ((type . "STRING")
							(value . "module"))
						       ((type . "STRING")
							(value . "any"))
						       ((type . "STRING")
							(value . "number"))
						       ((type . "STRING")
							(value . "boolean"))
						       ((type . "STRING")
							(value . "string"))
						       ((type . "STRING")
							(value . "symbol"))
						       ((type . "STRING")
							(value . "export"))
						       ((type . "CHOICE")
							(members ((type . "STRING")
								  (value . "get"))
								 ((type . "STRING")
								  (value . "set"))
								 ((type . "STRING")
								  (value . "async"))
								 ((type . "STRING")
								  (value . "static"))
								 ((type . "STRING")
								  (value . "export"))))))))
			   (named . t)
			   (value . property_identifier))
			  ((type . "SYMBOL")
			   (name . string))
			  ((type . "SYMBOL")
			   (name . number))
			  ((type . "SYMBOL")
			   (name . computed_property_name))))
 (computed_property_name (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "["))
				  ((type . "SYMBOL")
				   (name . expression))
				  ((type . "STRING")
				   (value . "]"))))
 (_reserved_identifier (type . "CHOICE")
		       (members ((type . "STRING")
				 (value . "declare"))
				((type . "STRING")
				 (value . "namespace"))
				((type . "STRING")
				 (value . "type"))
				((type . "STRING")
				 (value . "public"))
				((type . "STRING")
				 (value . "private"))
				((type . "STRING")
				 (value . "protected"))
				((type . "STRING")
				 (value . "readonly"))
				((type . "STRING")
				 (value . "module"))
				((type . "STRING")
				 (value . "any"))
				((type . "STRING")
				 (value . "number"))
				((type . "STRING")
				 (value . "boolean"))
				((type . "STRING")
				 (value . "string"))
				((type . "STRING")
				 (value . "symbol"))
				((type . "STRING")
				 (value . "export"))
				((type . "CHOICE")
				 (members ((type . "STRING")
					   (value . "get"))
					  ((type . "STRING")
					   (value . "set"))
					  ((type . "STRING")
					   (value . "async"))
					  ((type . "STRING")
					   (value . "static"))
					  ((type . "STRING")
					   (value . "export"))))))
 (_semicolon (type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . _automatic_semicolon))
		      ((type . "STRING")
		       (value . ";"))))
 (_jsx_start_opening_element (type . "SEQ")
			     (members ((type . "STRING")
				       (value . "<"))
				      ((type . "CHOICE")
				       (members ((type . "FIELD")
						 (name . "name")
						 (content (type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "ALIAS")
									      (content (type . "SYMBOL")
										       (name . jsx_identifier))
									      (named . t)
									      (value . identifier))
									     ((type . "SYMBOL")
									      (name . identifier))))
								   ((type . "SYMBOL")
								    (name . jsx_namespace_name)))))
						((type . "SEQ")
						 (members ((type . "FIELD")
							   (name . "name")
							   (content (type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . identifier))
									     ((type . "SYMBOL")
									      (name . nested_identifier)))))
							  ((type . "FIELD")
							   (name . "type_arguments")
							   (content (type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . type_arguments))
									     ((type . "BLANK")))))))))
				      ((type . "REPEAT")
				       (content (type . "FIELD")
						(name . "attribute")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . jsx_attribute))
								  ((type . "SYMBOL")
								   (name . jsx_expression))))))))
 (non_null_expression (type . "PREC_LEFT")
		      (value . "unary")
		      (content (type . "SEQ")
			       (members ((type . "SYMBOL")
					 (name . expression))
					((type . "STRING")
					 (value . "!")))))
 (method_signature (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . accessibility_modifier))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "static"))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "readonly"))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "async"))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "STRING")
						 (value . "get"))
						((type . "STRING")
						 (value . "set"))
						((type . "STRING")
						 (value . "*"))))
				      ((type . "BLANK"))))
			    ((type . "FIELD")
			     (name . "name")
			     (content (type . "CHOICE")
				      (members ((type . "ALIAS")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . identifier))
								  ((type . "CHOICE")
								   (members ((type . "STRING")
									     (value . "declare"))
									    ((type . "STRING")
									     (value . "namespace"))
									    ((type . "STRING")
									     (value . "type"))
									    ((type . "STRING")
									     (value . "public"))
									    ((type . "STRING")
									     (value . "private"))
									    ((type . "STRING")
									     (value . "protected"))
									    ((type . "STRING")
									     (value . "readonly"))
									    ((type . "STRING")
									     (value . "module"))
									    ((type . "STRING")
									     (value . "any"))
									    ((type . "STRING")
									     (value . "number"))
									    ((type . "STRING")
									     (value . "boolean"))
									    ((type . "STRING")
									     (value . "string"))
									    ((type . "STRING")
									     (value . "symbol"))
									    ((type . "STRING")
									     (value . "export"))
									    ((type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "get"))
										      ((type . "STRING")
										       (value . "set"))
										      ((type . "STRING")
										       (value . "async"))
										      ((type . "STRING")
										       (value . "static"))
										      ((type . "STRING")
										       (value . "export"))))))))
						(named . t)
						(value . property_identifier))
					       ((type . "SYMBOL")
						(name . string))
					       ((type . "SYMBOL")
						(name . number))
					       ((type . "SYMBOL")
						(name . computed_property_name)))))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "?"))
				      ((type . "BLANK"))))
			    ((type . "SEQ")
			     (members ((type . "FIELD")
				       (name . "type_parameters")
				       (content (type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . type_parameters))
							 ((type . "BLANK")))))
				      ((type . "FIELD")
				       (name . "parameters")
				       (content (type . "SYMBOL")
						(name . formal_parameters)))
				      ((type . "FIELD")
				       (name . "return_type")
				       (content (type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . type_annotation))
								   ((type . "SYMBOL")
								    (name . asserts))
								   ((type . "SYMBOL")
								    (name . type_predicate_annotation))))
							 ((type . "BLANK")))))))))
 (abstract_method_signature (type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . accessibility_modifier))
					       ((type . "BLANK"))))
				     ((type . "STRING")
				      (value . "abstract"))
				     ((type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . "get"))
							 ((type . "STRING")
							  (value . "set"))
							 ((type . "STRING")
							  (value . "*"))))
					       ((type . "BLANK"))))
				     ((type . "FIELD")
				      (name . "name")
				      (content (type . "CHOICE")
					       (members ((type . "ALIAS")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "CHOICE")
									    (members ((type . "STRING")
										      (value . "declare"))
										     ((type . "STRING")
										      (value . "namespace"))
										     ((type . "STRING")
										      (value . "type"))
										     ((type . "STRING")
										      (value . "public"))
										     ((type . "STRING")
										      (value . "private"))
										     ((type . "STRING")
										      (value . "protected"))
										     ((type . "STRING")
										      (value . "readonly"))
										     ((type . "STRING")
										      (value . "module"))
										     ((type . "STRING")
										      (value . "any"))
										     ((type . "STRING")
										      (value . "number"))
										     ((type . "STRING")
										      (value . "boolean"))
										     ((type . "STRING")
										      (value . "string"))
										     ((type . "STRING")
										      (value . "symbol"))
										     ((type . "STRING")
										      (value . "export"))
										     ((type . "CHOICE")
										      (members ((type . "STRING")
												(value . "get"))
											       ((type . "STRING")
												(value . "set"))
											       ((type . "STRING")
												(value . "async"))
											       ((type . "STRING")
												(value . "static"))
											       ((type . "STRING")
												(value . "export"))))))))
							 (named . t)
							 (value . property_identifier))
							((type . "SYMBOL")
							 (name . string))
							((type . "SYMBOL")
							 (name . number))
							((type . "SYMBOL")
							 (name . computed_property_name)))))
				     ((type . "CHOICE")
				      (members ((type . "STRING")
						(value . "?"))
					       ((type . "BLANK"))))
				     ((type . "SEQ")
				      (members ((type . "FIELD")
						(name . "type_parameters")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . type_parameters))
								  ((type . "BLANK")))))
					       ((type . "FIELD")
						(name . "parameters")
						(content (type . "SYMBOL")
							 (name . formal_parameters)))
					       ((type . "FIELD")
						(name . "return_type")
						(content (type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . type_annotation))
									    ((type . "SYMBOL")
									     (name . asserts))
									    ((type . "SYMBOL")
									     (name . type_predicate_annotation))))
								  ((type . "BLANK")))))))))
 (function_signature (type . "SEQ")
		     (members ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . "async"))
					((type . "BLANK"))))
			      ((type . "STRING")
			       (value . "function"))
			      ((type . "FIELD")
			       (name . "name")
			       (content (type . "SYMBOL")
					(name . identifier)))
			      ((type . "SEQ")
			       (members ((type . "FIELD")
					 (name . "type_parameters")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . type_parameters))
							   ((type . "BLANK")))))
					((type . "FIELD")
					 (name . "parameters")
					 (content (type . "SYMBOL")
						  (name . formal_parameters)))
					((type . "FIELD")
					 (name . "return_type")
					 (content (type . "CHOICE")
						  (members ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . type_annotation))
								     ((type . "SYMBOL")
								      (name . asserts))
								     ((type . "SYMBOL")
								      (name . type_predicate_annotation))))
							   ((type . "BLANK")))))))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . _automatic_semicolon))
						  ((type . "STRING")
						   (value . ";"))))
					((type . "SYMBOL")
					 (name . _function_signature_automatic_semicolon))))))
 (type_assertion (type . "PREC_LEFT")
		 (value . "unary")
		 (content (type . "SEQ")
			  (members ((type . "SYMBOL")
				    (name . type_arguments))
				   ((type . "SYMBOL")
				    (name . expression)))))
 (as_expression (type . "PREC_LEFT")
		(value . "binary_as")
		(content (type . "SEQ")
			 (members ((type . "SYMBOL")
				   (name . expression))
				  ((type . "STRING")
				   (value . "as"))
				  ((type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . parenthesized_type))
								((type . "SYMBOL")
								 (name . predefined_type))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . identifier))
								 (named . t)
								 (value . type_identifier))
								((type . "SYMBOL")
								 (name . nested_type_identifier))
								((type . "SYMBOL")
								 (name . generic_type))
								((type . "SYMBOL")
								 (name . object_type))
								((type . "SYMBOL")
								 (name . array_type))
								((type . "SYMBOL")
								 (name . tuple_type))
								((type . "SYMBOL")
								 (name . flow_maybe_type))
								((type . "SYMBOL")
								 (name . type_query))
								((type . "SYMBOL")
								 (name . index_type_query))
								((type . "SYMBOL")
								 (name . this))
								((type . "SYMBOL")
								 (name . existential_type))
								((type . "SYMBOL")
								 (name . literal_type))
								((type . "SYMBOL")
								 (name . lookup_type))
								((type . "SYMBOL")
								 (name . conditional_type))))
						      ((type . "SYMBOL")
						       (name . union_type))
						      ((type . "SYMBOL")
						       (name . intersection_type))
						      ((type . "SYMBOL")
						       (name . function_type))
						      ((type . "SYMBOL")
						       (name . readonly_type))
						      ((type . "SYMBOL")
						       (name . constructor_type))
						      ((type . "SYMBOL")
						       (name . infer_type))))
					    ((type . "SYMBOL")
					     (name . template_string)))))))
 (import_require_clause (type . "SEQ")
			(members ((type . "SYMBOL")
				  (name . identifier))
				 ((type . "STRING")
				  (value . "="))
				 ((type . "STRING")
				  (value . "require"))
				 ((type . "STRING")
				  (value . "("))
				 ((type . "SYMBOL")
				  (name . string))
				 ((type . "STRING")
				  (value . ")"))))
 (implements_clause (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "implements"))
			     ((type . "SEQ")
			      (members ((type . "CHOICE")
					(members ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . parenthesized_type))
							   ((type . "SYMBOL")
							    (name . predefined_type))
							   ((type . "ALIAS")
							    (content (type . "SYMBOL")
								     (name . identifier))
							    (named . t)
							    (value . type_identifier))
							   ((type . "SYMBOL")
							    (name . nested_type_identifier))
							   ((type . "SYMBOL")
							    (name . generic_type))
							   ((type . "SYMBOL")
							    (name . object_type))
							   ((type . "SYMBOL")
							    (name . array_type))
							   ((type . "SYMBOL")
							    (name . tuple_type))
							   ((type . "SYMBOL")
							    (name . flow_maybe_type))
							   ((type . "SYMBOL")
							    (name . type_query))
							   ((type . "SYMBOL")
							    (name . index_type_query))
							   ((type . "SYMBOL")
							    (name . this))
							   ((type . "SYMBOL")
							    (name . existential_type))
							   ((type . "SYMBOL")
							    (name . literal_type))
							   ((type . "SYMBOL")
							    (name . lookup_type))
							   ((type . "SYMBOL")
							    (name . conditional_type))))
						 ((type . "SYMBOL")
						  (name . union_type))
						 ((type . "SYMBOL")
						  (name . intersection_type))
						 ((type . "SYMBOL")
						  (name . function_type))
						 ((type . "SYMBOL")
						  (name . readonly_type))
						 ((type . "SYMBOL")
						  (name . constructor_type))
						 ((type . "SYMBOL")
						  (name . infer_type))))
				       ((type . "REPEAT")
					(content (type . "SEQ")
						 (members ((type . "STRING")
							   (value . ","))
							  ((type . "CHOICE")
							   (members ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . parenthesized_type))
									      ((type . "SYMBOL")
									       (name . predefined_type))
									      ((type . "ALIAS")
									       (content (type . "SYMBOL")
											(name . identifier))
									       (named . t)
									       (value . type_identifier))
									      ((type . "SYMBOL")
									       (name . nested_type_identifier))
									      ((type . "SYMBOL")
									       (name . generic_type))
									      ((type . "SYMBOL")
									       (name . object_type))
									      ((type . "SYMBOL")
									       (name . array_type))
									      ((type . "SYMBOL")
									       (name . tuple_type))
									      ((type . "SYMBOL")
									       (name . flow_maybe_type))
									      ((type . "SYMBOL")
									       (name . type_query))
									      ((type . "SYMBOL")
									       (name . index_type_query))
									      ((type . "SYMBOL")
									       (name . this))
									      ((type . "SYMBOL")
									       (name . existential_type))
									      ((type . "SYMBOL")
									       (name . literal_type))
									      ((type . "SYMBOL")
									       (name . lookup_type))
									      ((type . "SYMBOL")
									       (name . conditional_type))))
								    ((type . "SYMBOL")
								     (name . union_type))
								    ((type . "SYMBOL")
								     (name . intersection_type))
								    ((type . "SYMBOL")
								     (name . function_type))
								    ((type . "SYMBOL")
								     (name . readonly_type))
								    ((type . "SYMBOL")
								     (name . constructor_type))
								    ((type . "SYMBOL")
								     (name . infer_type)))))))))))
 (ambient_declaration (type . "SEQ")
		      (members ((type . "STRING")
				(value . "declare"))
			       ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . declaration))
					 ((type . "SEQ")
					  (members ((type . "STRING")
						    (value . "global"))
						   ((type . "SYMBOL")
						    (name . statement_block))))
					 ((type . "SEQ")
					  (members ((type . "STRING")
						    (value . "module"))
						   ((type . "STRING")
						    (value . "."))
						   ((type . "ALIAS")
						    (content (type . "SYMBOL")
							     (name . identifier))
						    (named . t)
						    (value . property_identifier))
						   ((type . "STRING")
						    (value . ":"))
						   ((type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "SYMBOL")
									(name . parenthesized_type))
								       ((type . "SYMBOL")
									(name . predefined_type))
								       ((type . "ALIAS")
									(content (type . "SYMBOL")
										 (name . identifier))
									(named . t)
									(value . type_identifier))
								       ((type . "SYMBOL")
									(name . nested_type_identifier))
								       ((type . "SYMBOL")
									(name . generic_type))
								       ((type . "SYMBOL")
									(name . object_type))
								       ((type . "SYMBOL")
									(name . array_type))
								       ((type . "SYMBOL")
									(name . tuple_type))
								       ((type . "SYMBOL")
									(name . flow_maybe_type))
								       ((type . "SYMBOL")
									(name . type_query))
								       ((type . "SYMBOL")
									(name . index_type_query))
								       ((type . "SYMBOL")
									(name . this))
								       ((type . "SYMBOL")
									(name . existential_type))
								       ((type . "SYMBOL")
									(name . literal_type))
								       ((type . "SYMBOL")
									(name . lookup_type))
								       ((type . "SYMBOL")
									(name . conditional_type))))
							     ((type . "SYMBOL")
							      (name . union_type))
							     ((type . "SYMBOL")
							      (name . intersection_type))
							     ((type . "SYMBOL")
							      (name . function_type))
							     ((type . "SYMBOL")
							      (name . readonly_type))
							     ((type . "SYMBOL")
							      (name . constructor_type))
							     ((type . "SYMBOL")
							      (name . infer_type))))
						   ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . _automatic_semicolon))
							     ((type . "STRING")
							      (value . ";"))))))))))
 (abstract_class_declaration (type . "PREC")
			     (value . "declaration")
			     (content (type . "SEQ")
				      (members ((type . "REPEAT")
						(content (type . "FIELD")
							 (name . "decorator")
							 (content (type . "SYMBOL")
								  (name . decorator))))
					       ((type . "STRING")
						(value . "abstract"))
					       ((type . "STRING")
						(value . "class"))
					       ((type . "FIELD")
						(name . "name")
						(content (type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . identifier))
							 (named . t)
							 (value . type_identifier)))
					       ((type . "FIELD")
						(name . "type_parameters")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . type_parameters))
								  ((type . "BLANK")))))
					       ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . class_heritage))
							 ((type . "BLANK"))))
					       ((type . "FIELD")
						(name . "body")
						(content (type . "SYMBOL")
							 (name . class_body))))))
 (module (type . "SEQ")
	 (members ((type . "STRING")
		   (value . "module"))
		  ((type . "PREC_RIGHT")
		   (value . 0)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "name")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . string))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "SYMBOL")
							 (name . nested_identifier)))))
				     ((type . "FIELD")
				      (name . "body")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . statement_block))
							((type . "BLANK"))))))))))
 (internal_module (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "namespace"))
			   ((type . "PREC_RIGHT")
			    (value . 0)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "name")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . string))
								 ((type . "SYMBOL")
								  (name . identifier))
								 ((type . "SYMBOL")
								  (name . nested_identifier)))))
					      ((type . "FIELD")
					       (name . "body")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . statement_block))
								 ((type . "BLANK"))))))))))
 (_module (type . "PREC_RIGHT")
	  (value . 0)
	  (content (type . "SEQ")
		   (members ((type . "FIELD")
			     (name . "name")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . string))
					       ((type . "SYMBOL")
						(name . identifier))
					       ((type . "SYMBOL")
						(name . nested_identifier)))))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . statement_block))
					       ((type . "BLANK"))))))))
 (import_alias (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "import"))
			((type . "SYMBOL")
			 (name . identifier))
			((type . "STRING")
			 (value . "="))
			((type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . identifier))
				  ((type . "SYMBOL")
				   (name . nested_identifier))))
			((type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . _automatic_semicolon))
				  ((type . "STRING")
				   (value . ";"))))))
 (nested_type_identifier (type . "PREC")
			 (value . "member")
			 (content (type . "SEQ")
				  (members ((type . "FIELD")
					    (name . "module")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "SYMBOL")
							       (name . nested_identifier)))))
					   ((type . "STRING")
					    (value . "."))
					   ((type . "FIELD")
					    (name . "name")
					    (content (type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . identifier))
						     (named . t)
						     (value . type_identifier))))))
 (interface_declaration (type . "SEQ")
			(members ((type . "STRING")
				  (value . "interface"))
				 ((type . "FIELD")
				  (name . "name")
				  (content (type . "ALIAS")
					   (content (type . "SYMBOL")
						    (name . identifier))
					   (named . t)
					   (value . type_identifier)))
				 ((type . "FIELD")
				  (name . "type_parameters")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . type_parameters))
						    ((type . "BLANK")))))
				 ((type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . extends_clause))
					   ((type . "BLANK"))))
				 ((type . "FIELD")
				  (name . "body")
				  (content (type . "SYMBOL")
					   (name . object_type)))))
 (extends_clause (type . "PREC")
		 (value . "extends_type")
		 (content (type . "SEQ")
			  (members ((type . "STRING")
				    (value . "extends"))
				   ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "PREC")
							(value . "extends_type")
							(content (type . "CHOICE")
								 (members ((type . "ALIAS")
									   (content (type . "SYMBOL")
										    (name . identifier))
									   (named . t)
									   (value . type_identifier))
									  ((type . "SYMBOL")
									   (name . nested_type_identifier))
									  ((type . "SYMBOL")
									   (name . generic_type)))))
						       ((type . "SYMBOL")
							(name . expression))))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "CHOICE")
								 (members ((type . "PREC")
									   (value . "extends_type")
									   (content (type . "CHOICE")
										    (members ((type . "ALIAS")
											      (content (type . "SYMBOL")
												       (name . identifier))
											      (named . t)
											      (value . type_identifier))
											     ((type . "SYMBOL")
											      (name . nested_type_identifier))
											     ((type . "SYMBOL")
											      (name . generic_type)))))
									  ((type . "SYMBOL")
									   (name . expression))))))))))))
 (enum_declaration (type . "SEQ")
		   (members ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . "const"))
				      ((type . "BLANK"))))
			    ((type . "STRING")
			     (value . "enum"))
			    ((type . "FIELD")
			     (name . "name")
			     (content (type . "SYMBOL") (name . identifier)))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "SYMBOL") (name . enum_body)))))
 (enum_body (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "{"))
		     ((type . "CHOICE")
		      (members ((type . "SEQ")
				(members ((type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "ALIAS")
									(content (type . "CHOICE")
										 (members ((type . "SYMBOL")
											   (name . identifier))
											  ((type . "CHOICE")
											   (members ((type . "STRING")
												     (value . "declare"))
												    ((type . "STRING")
												     (value . "namespace"))
												    ((type . "STRING")
												     (value . "type"))
												    ((type . "STRING")
												     (value . "public"))
												    ((type . "STRING")
												     (value . "private"))
												    ((type . "STRING")
												     (value . "protected"))
												    ((type . "STRING")
												     (value . "readonly"))
												    ((type . "STRING")
												     (value . "module"))
												    ((type . "STRING")
												     (value . "any"))
												    ((type . "STRING")
												     (value . "number"))
												    ((type . "STRING")
												     (value . "boolean"))
												    ((type . "STRING")
												     (value . "string"))
												    ((type . "STRING")
												     (value . "symbol"))
												    ((type . "STRING")
												     (value . "export"))
												    ((type . "CHOICE")
												     (members ((type . "STRING")
													       (value . "get"))
													      ((type . "STRING")
													       (value . "set"))
													      ((type . "STRING")
													       (value . "async"))
													      ((type . "STRING")
													       (value . "static"))
													      ((type . "STRING")
													       (value . "export"))))))))
									(named . t)
									(value . property_identifier))
								       ((type . "SYMBOL")
									(name . string))
								       ((type . "SYMBOL")
									(name . number))
								       ((type . "SYMBOL")
									(name . computed_property_name))))
							     ((type . "SYMBOL")
							      (name . enum_assignment))))
						   ((type . "REPEAT")
						    (content (type . "SEQ")
							     (members ((type . "STRING")
								       (value . ","))
								      ((type . "CHOICE")
								       (members ((type . "CHOICE")
										 (members ((type . "ALIAS")
											   (content (type . "CHOICE")
												    (members ((type . "SYMBOL")
													      (name . identifier))
													     ((type . "CHOICE")
													      (members ((type . "STRING")
															(value . "declare"))
														       ((type . "STRING")
															(value . "namespace"))
														       ((type . "STRING")
															(value . "type"))
														       ((type . "STRING")
															(value . "public"))
														       ((type . "STRING")
															(value . "private"))
														       ((type . "STRING")
															(value . "protected"))
														       ((type . "STRING")
															(value . "readonly"))
														       ((type . "STRING")
															(value . "module"))
														       ((type . "STRING")
															(value . "any"))
														       ((type . "STRING")
															(value . "number"))
														       ((type . "STRING")
															(value . "boolean"))
														       ((type . "STRING")
															(value . "string"))
														       ((type . "STRING")
															(value . "symbol"))
														       ((type . "STRING")
															(value . "export"))
														       ((type . "CHOICE")
															(members ((type . "STRING")
																  (value . "get"))
																 ((type . "STRING")
																  (value . "set"))
																 ((type . "STRING")
																  (value . "async"))
																 ((type . "STRING")
																  (value . "static"))
																 ((type . "STRING")
																  (value . "export"))))))))
											   (named . t)
											   (value . property_identifier))
											  ((type . "SYMBOL")
											   (name . string))
											  ((type . "SYMBOL")
											   (name . number))
											  ((type . "SYMBOL")
											   (name . computed_property_name))))
										((type . "SYMBOL")
										 (name . enum_assignment)))))))))
					 ((type . "CHOICE")
					  (members ((type . "STRING")
						    (value . ","))
						   ((type . "BLANK"))))))
			       ((type . "BLANK"))))
		     ((type . "STRING")
		      (value . "}"))))
 (enum_assignment (type . "SEQ")
		  (members ((type . "CHOICE")
			    (members ((type . "ALIAS")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . identifier))
							((type . "CHOICE")
							 (members ((type . "STRING")
								   (value . "declare"))
								  ((type . "STRING")
								   (value . "namespace"))
								  ((type . "STRING")
								   (value . "type"))
								  ((type . "STRING")
								   (value . "public"))
								  ((type . "STRING")
								   (value . "private"))
								  ((type . "STRING")
								   (value . "protected"))
								  ((type . "STRING")
								   (value . "readonly"))
								  ((type . "STRING")
								   (value . "module"))
								  ((type . "STRING")
								   (value . "any"))
								  ((type . "STRING")
								   (value . "number"))
								  ((type . "STRING")
								   (value . "boolean"))
								  ((type . "STRING")
								   (value . "string"))
								  ((type . "STRING")
								   (value . "symbol"))
								  ((type . "STRING")
								   (value . "export"))
								  ((type . "CHOICE")
								   (members ((type . "STRING")
									     (value . "get"))
									    ((type . "STRING")
									     (value . "set"))
									    ((type . "STRING")
									     (value . "async"))
									    ((type . "STRING")
									     (value . "static"))
									    ((type . "STRING")
									     (value . "export"))))))))
				      (named . t)
				      (value . property_identifier))
				     ((type . "SYMBOL")
				      (name . string))
				     ((type . "SYMBOL")
				      (name . number))
				     ((type . "SYMBOL")
				      (name . computed_property_name))))
			   ((type . "SEQ")
			    (members ((type . "STRING")
				      (value . "="))
				     ((type . "FIELD")
				      (name . "value")
				      (content (type . "SYMBOL")
					       (name . expression)))))))
 (type_alias_declaration (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "type"))
				  ((type . "FIELD")
				   (name . "name")
				   (content (type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . identifier))
					    (named . t)
					    (value . type_identifier)))
				  ((type . "FIELD")
				   (name . "type_parameters")
				   (content (type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . type_parameters))
						     ((type . "BLANK")))))
				  ((type . "STRING")
				   (value . "="))
				  ((type . "FIELD")
				   (name . "value")
				   (content (type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . parenthesized_type))
							       ((type . "SYMBOL")
								(name . predefined_type))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . identifier))
								(named . t)
								(value . type_identifier))
							       ((type . "SYMBOL")
								(name . nested_type_identifier))
							       ((type . "SYMBOL")
								(name . generic_type))
							       ((type . "SYMBOL")
								(name . object_type))
							       ((type . "SYMBOL")
								(name . array_type))
							       ((type . "SYMBOL")
								(name . tuple_type))
							       ((type . "SYMBOL")
								(name . flow_maybe_type))
							       ((type . "SYMBOL")
								(name . type_query))
							       ((type . "SYMBOL")
								(name . index_type_query))
							       ((type . "SYMBOL")
								(name . this))
							       ((type . "SYMBOL")
								(name . existential_type))
							       ((type . "SYMBOL")
								(name . literal_type))
							       ((type . "SYMBOL")
								(name . lookup_type))
							       ((type . "SYMBOL")
								(name . conditional_type))))
						     ((type . "SYMBOL")
						      (name . union_type))
						     ((type . "SYMBOL")
						      (name . intersection_type))
						     ((type . "SYMBOL")
						      (name . function_type))
						     ((type . "SYMBOL")
						      (name . readonly_type))
						     ((type . "SYMBOL")
						      (name . constructor_type))
						     ((type . "SYMBOL")
						      (name . infer_type)))))
				  ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . _automatic_semicolon))
					    ((type . "STRING")
					     (value . ";"))))))
 (accessibility_modifier (type . "CHOICE")
			 (members ((type . "STRING")
				   (value . "public"))
				  ((type . "STRING")
				   (value . "private"))
				  ((type . "STRING")
				   (value . "protected"))))
 (required_parameter (type . "SEQ")
		     (members ((type . "SEQ")
			       (members ((type . "REPEAT")
					 (content (type . "FIELD")
						  (name . "decorator")
						  (content (type . "SYMBOL")
							   (name . decorator))))
					((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . accessibility_modifier))
						  ((type . "BLANK"))))
					((type . "CHOICE")
					 (members ((type . "STRING")
						   (value . "readonly"))
						  ((type . "BLANK"))))
					((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . pattern))
						  ((type . "SYMBOL")
						   (name . this))))))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . type_annotation))
					((type . "BLANK"))))
			      ((type . "CHOICE")
			       (members ((type . "SEQ")
					 (members ((type . "STRING")
						   (value . "="))
						  ((type . "FIELD")
						   (name . "value")
						   (content (type . "SYMBOL")
							    (name . expression)))))
					((type . "BLANK"))))))
 (optional_parameter (type . "SEQ")
		     (members ((type . "SEQ")
			       (members ((type . "REPEAT")
					 (content (type . "FIELD")
						  (name . "decorator")
						  (content (type . "SYMBOL")
							   (name . decorator))))
					((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . accessibility_modifier))
						  ((type . "BLANK"))))
					((type . "CHOICE")
					 (members ((type . "STRING")
						   (value . "readonly"))
						  ((type . "BLANK"))))
					((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . pattern))
						  ((type . "SYMBOL")
						   (name . this))))))
			      ((type . "STRING")
			       (value . "?"))
			      ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . type_annotation))
					((type . "BLANK"))))
			      ((type . "CHOICE")
			       (members ((type . "SEQ")
					 (members ((type . "STRING")
						   (value . "="))
						  ((type . "FIELD")
						   (name . "value")
						   (content (type . "SYMBOL")
							    (name . expression)))))
					((type . "BLANK"))))))
 (_parameter_name (type . "SEQ")
		  (members ((type . "REPEAT")
			    (content (type . "FIELD")
				     (name . "decorator")
				     (content (type . "SYMBOL")
					      (name . decorator))))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . accessibility_modifier))
				     ((type . "BLANK"))))
			   ((type . "CHOICE")
			    (members ((type . "STRING")
				      (value . "readonly"))
				     ((type . "BLANK"))))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . pattern))
				     ((type . "SYMBOL")
				      (name . this))))))
 (omitting_type_annotation (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "-?:"))
				    ((type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . parenthesized_type))
							((type . "SYMBOL")
							 (name . predefined_type))
							((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . identifier))
							 (named . t)
							 (value . type_identifier))
							((type . "SYMBOL")
							 (name . nested_type_identifier))
							((type . "SYMBOL")
							 (name . generic_type))
							((type . "SYMBOL")
							 (name . object_type))
							((type . "SYMBOL")
							 (name . array_type))
							((type . "SYMBOL")
							 (name . tuple_type))
							((type . "SYMBOL")
							 (name . flow_maybe_type))
							((type . "SYMBOL")
							 (name . type_query))
							((type . "SYMBOL")
							 (name . index_type_query))
							((type . "SYMBOL")
							 (name . this))
							((type . "SYMBOL")
							 (name . existential_type))
							((type . "SYMBOL")
							 (name . literal_type))
							((type . "SYMBOL")
							 (name . lookup_type))
							((type . "SYMBOL")
							 (name . conditional_type))))
					      ((type . "SYMBOL")
					       (name . union_type))
					      ((type . "SYMBOL")
					       (name . intersection_type))
					      ((type . "SYMBOL")
					       (name . function_type))
					      ((type . "SYMBOL")
					       (name . readonly_type))
					      ((type . "SYMBOL")
					       (name . constructor_type))
					      ((type . "SYMBOL")
					       (name . infer_type))))))
 (opting_type_annotation (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "?:"))
				  ((type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . parenthesized_type))
						      ((type . "SYMBOL")
						       (name . predefined_type))
						      ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . identifier))
						       (named . t)
						       (value . type_identifier))
						      ((type . "SYMBOL")
						       (name . nested_type_identifier))
						      ((type . "SYMBOL")
						       (name . generic_type))
						      ((type . "SYMBOL")
						       (name . object_type))
						      ((type . "SYMBOL")
						       (name . array_type))
						      ((type . "SYMBOL")
						       (name . tuple_type))
						      ((type . "SYMBOL")
						       (name . flow_maybe_type))
						      ((type . "SYMBOL")
						       (name . type_query))
						      ((type . "SYMBOL")
						       (name . index_type_query))
						      ((type . "SYMBOL")
						       (name . this))
						      ((type . "SYMBOL")
						       (name . existential_type))
						      ((type . "SYMBOL")
						       (name . literal_type))
						      ((type . "SYMBOL")
						       (name . lookup_type))
						      ((type . "SYMBOL")
						       (name . conditional_type))))
					    ((type . "SYMBOL")
					     (name . union_type))
					    ((type . "SYMBOL")
					     (name . intersection_type))
					    ((type . "SYMBOL")
					     (name . function_type))
					    ((type . "SYMBOL")
					     (name . readonly_type))
					    ((type . "SYMBOL")
					     (name . constructor_type))
					    ((type . "SYMBOL")
					     (name . infer_type))))))
 (type_annotation (type . "SEQ")
		  (members ((type . "STRING")
			    (value . ":"))
			   ((type . "CHOICE")
			    (members ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . parenthesized_type))
					       ((type . "SYMBOL")
						(name . predefined_type))
					       ((type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . identifier))
						(named . t)
						(value . type_identifier))
					       ((type . "SYMBOL")
						(name . nested_type_identifier))
					       ((type . "SYMBOL")
						(name . generic_type))
					       ((type . "SYMBOL")
						(name . object_type))
					       ((type . "SYMBOL")
						(name . array_type))
					       ((type . "SYMBOL")
						(name . tuple_type))
					       ((type . "SYMBOL")
						(name . flow_maybe_type))
					       ((type . "SYMBOL")
						(name . type_query))
					       ((type . "SYMBOL")
						(name . index_type_query))
					       ((type . "SYMBOL")
						(name . this))
					       ((type . "SYMBOL")
						(name . existential_type))
					       ((type . "SYMBOL")
						(name . literal_type))
					       ((type . "SYMBOL")
						(name . lookup_type))
					       ((type . "SYMBOL")
						(name . conditional_type))))
				     ((type . "SYMBOL")
				      (name . union_type))
				     ((type . "SYMBOL")
				      (name . intersection_type))
				     ((type . "SYMBOL")
				      (name . function_type))
				     ((type . "SYMBOL")
				      (name . readonly_type))
				     ((type . "SYMBOL")
				      (name . constructor_type))
				     ((type . "SYMBOL")
				      (name . infer_type))))))
 (asserts (type . "SEQ")
	  (members ((type . "STRING")
		    (value . ":"))
		   ((type . "STRING")
		    (value . "asserts"))
		   ((type . "CHOICE")
		    (members ((type . "SYMBOL")
			      (name . type_predicate))
			     ((type . "SYMBOL")
			      (name . identifier))
			     ((type . "SYMBOL")
			      (name . this))))))
 (_type (type . "CHOICE")
	(members ((type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . parenthesized_type))
			   ((type . "SYMBOL")
			    (name . predefined_type))
			   ((type . "ALIAS")
			    (content (type . "SYMBOL") (name . identifier))
			    (named . t)
			    (value . type_identifier))
			   ((type . "SYMBOL")
			    (name . nested_type_identifier))
			   ((type . "SYMBOL")
			    (name . generic_type))
			   ((type . "SYMBOL")
			    (name . object_type))
			   ((type . "SYMBOL")
			    (name . array_type))
			   ((type . "SYMBOL")
			    (name . tuple_type))
			   ((type . "SYMBOL")
			    (name . flow_maybe_type))
			   ((type . "SYMBOL")
			    (name . type_query))
			   ((type . "SYMBOL")
			    (name . index_type_query))
			   ((type . "SYMBOL")
			    (name . this))
			   ((type . "SYMBOL")
			    (name . existential_type))
			   ((type . "SYMBOL")
			    (name . literal_type))
			   ((type . "SYMBOL")
			    (name . lookup_type))
			   ((type . "SYMBOL")
			    (name . conditional_type))))
		 ((type . "SYMBOL")
		  (name . union_type))
		 ((type . "SYMBOL")
		  (name . intersection_type))
		 ((type . "SYMBOL")
		  (name . function_type))
		 ((type . "SYMBOL")
		  (name . readonly_type))
		 ((type . "SYMBOL")
		  (name . constructor_type))
		 ((type . "SYMBOL")
		  (name . infer_type))))
 (tuple_parameter (type . "SEQ")
		  (members ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . identifier))
				     ((type . "SYMBOL")
				      (name . rest_pattern))))
			   ((type . "SYMBOL")
			    (name . type_annotation))))
 (optional_tuple_parameter (type . "SEQ")
			   (members ((type . "SYMBOL")
				     (name . identifier))
				    ((type . "STRING")
				     (value . "?"))
				    ((type . "SYMBOL")
				     (name . type_annotation))))
 (optional_type (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . parenthesized_type))
					     ((type . "SYMBOL")
					      (name . predefined_type))
					     ((type . "ALIAS")
					      (content (type . "SYMBOL")
						       (name . identifier))
					      (named . t)
					      (value . type_identifier))
					     ((type . "SYMBOL")
					      (name . nested_type_identifier))
					     ((type . "SYMBOL")
					      (name . generic_type))
					     ((type . "SYMBOL")
					      (name . object_type))
					     ((type . "SYMBOL")
					      (name . array_type))
					     ((type . "SYMBOL")
					      (name . tuple_type))
					     ((type . "SYMBOL")
					      (name . flow_maybe_type))
					     ((type . "SYMBOL")
					      (name . type_query))
					     ((type . "SYMBOL")
					      (name . index_type_query))
					     ((type . "SYMBOL")
					      (name . this))
					     ((type . "SYMBOL")
					      (name . existential_type))
					     ((type . "SYMBOL")
					      (name . literal_type))
					     ((type . "SYMBOL")
					      (name . lookup_type))
					     ((type . "SYMBOL")
					      (name . conditional_type))))
				   ((type . "SYMBOL")
				    (name . union_type))
				   ((type . "SYMBOL")
				    (name . intersection_type))
				   ((type . "SYMBOL")
				    (name . function_type))
				   ((type . "SYMBOL")
				    (name . readonly_type))
				   ((type . "SYMBOL")
				    (name . constructor_type))
				   ((type . "SYMBOL")
				    (name . infer_type))))
			 ((type . "STRING")
			  (value . "?"))))
 (rest_type (type . "SEQ")
	    (members ((type . "STRING")
		      (value . "..."))
		     ((type . "CHOICE")
		      (members ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . parenthesized_type))
					 ((type . "SYMBOL")
					  (name . predefined_type))
					 ((type . "ALIAS")
					  (content (type . "SYMBOL")
						   (name . identifier))
					  (named . t)
					  (value . type_identifier))
					 ((type . "SYMBOL")
					  (name . nested_type_identifier))
					 ((type . "SYMBOL")
					  (name . generic_type))
					 ((type . "SYMBOL")
					  (name . object_type))
					 ((type . "SYMBOL")
					  (name . array_type))
					 ((type . "SYMBOL")
					  (name . tuple_type))
					 ((type . "SYMBOL")
					  (name . flow_maybe_type))
					 ((type . "SYMBOL")
					  (name . type_query))
					 ((type . "SYMBOL")
					  (name . index_type_query))
					 ((type . "SYMBOL")
					  (name . this))
					 ((type . "SYMBOL")
					  (name . existential_type))
					 ((type . "SYMBOL")
					  (name . literal_type))
					 ((type . "SYMBOL")
					  (name . lookup_type))
					 ((type . "SYMBOL")
					  (name . conditional_type))))
			       ((type . "SYMBOL")
				(name . union_type))
			       ((type . "SYMBOL")
				(name . intersection_type))
			       ((type . "SYMBOL")
				(name . function_type))
			       ((type . "SYMBOL")
				(name . readonly_type))
			       ((type . "SYMBOL")
				(name . constructor_type))
			       ((type . "SYMBOL")
				(name . infer_type))))))
 (_tuple_type_member (type . "CHOICE")
		     (members ((type . "ALIAS")
			       (content (type . "SYMBOL")
					(name . tuple_parameter))
			       (named . t)
			       (value . required_parameter))
			      ((type . "ALIAS")
			       (content (type . "SYMBOL")
					(name . optional_tuple_parameter))
			       (named . t)
			       (value . optional_parameter))
			      ((type . "SYMBOL")
			       (name . optional_type))
			      ((type . "SYMBOL")
			       (name . rest_type))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . parenthesized_type))
						  ((type . "SYMBOL")
						   (name . predefined_type))
						  ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . identifier))
						   (named . t)
						   (value . type_identifier))
						  ((type . "SYMBOL")
						   (name . nested_type_identifier))
						  ((type . "SYMBOL")
						   (name . generic_type))
						  ((type . "SYMBOL")
						   (name . object_type))
						  ((type . "SYMBOL")
						   (name . array_type))
						  ((type . "SYMBOL")
						   (name . tuple_type))
						  ((type . "SYMBOL")
						   (name . flow_maybe_type))
						  ((type . "SYMBOL")
						   (name . type_query))
						  ((type . "SYMBOL")
						   (name . index_type_query))
						  ((type . "SYMBOL")
						   (name . this))
						  ((type . "SYMBOL")
						   (name . existential_type))
						  ((type . "SYMBOL")
						   (name . literal_type))
						  ((type . "SYMBOL")
						   (name . lookup_type))
						  ((type . "SYMBOL")
						   (name . conditional_type))))
					((type . "SYMBOL")
					 (name . union_type))
					((type . "SYMBOL")
					 (name . intersection_type))
					((type . "SYMBOL")
					 (name . function_type))
					((type . "SYMBOL")
					 (name . readonly_type))
					((type . "SYMBOL")
					 (name . constructor_type))
					((type . "SYMBOL")
					 (name . infer_type))))))
 (constructor_type (type . "PREC_LEFT")
		   (value . 0)
		   (content (type . "SEQ")
			    (members ((type . "STRING")
				      (value . "new"))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . type_parameters))
					       ((type . "BLANK"))))
				     ((type . "SYMBOL")
				      (name . formal_parameters))
				     ((type . "STRING")
				      (value . "=>"))
				     ((type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . parenthesized_type))
							 ((type . "SYMBOL")
							  (name . predefined_type))
							 ((type . "ALIAS")
							  (content (type . "SYMBOL")
								   (name . identifier))
							  (named . t)
							  (value . type_identifier))
							 ((type . "SYMBOL")
							  (name . nested_type_identifier))
							 ((type . "SYMBOL")
							  (name . generic_type))
							 ((type . "SYMBOL")
							  (name . object_type))
							 ((type . "SYMBOL")
							  (name . array_type))
							 ((type . "SYMBOL")
							  (name . tuple_type))
							 ((type . "SYMBOL")
							  (name . flow_maybe_type))
							 ((type . "SYMBOL")
							  (name . type_query))
							 ((type . "SYMBOL")
							  (name . index_type_query))
							 ((type . "SYMBOL")
							  (name . this))
							 ((type . "SYMBOL")
							  (name . existential_type))
							 ((type . "SYMBOL")
							  (name . literal_type))
							 ((type . "SYMBOL")
							  (name . lookup_type))
							 ((type . "SYMBOL")
							  (name . conditional_type))))
					       ((type . "SYMBOL")
						(name . union_type))
					       ((type . "SYMBOL")
						(name . intersection_type))
					       ((type . "SYMBOL")
						(name . function_type))
					       ((type . "SYMBOL")
						(name . readonly_type))
					       ((type . "SYMBOL")
						(name . constructor_type))
					       ((type . "SYMBOL")
						(name . infer_type)))))))
 (_primary_type (type . "CHOICE")
		(members ((type . "SYMBOL")
			  (name . parenthesized_type))
			 ((type . "SYMBOL")
			  (name . predefined_type))
			 ((type . "ALIAS")
			  (content (type . "SYMBOL") (name . identifier))
			  (named . t)
			  (value . type_identifier))
			 ((type . "SYMBOL")
			  (name . nested_type_identifier))
			 ((type . "SYMBOL")
			  (name . generic_type))
			 ((type . "SYMBOL")
			  (name . object_type))
			 ((type . "SYMBOL")
			  (name . array_type))
			 ((type . "SYMBOL")
			  (name . tuple_type))
			 ((type . "SYMBOL")
			  (name . flow_maybe_type))
			 ((type . "SYMBOL")
			  (name . type_query))
			 ((type . "SYMBOL")
			  (name . index_type_query))
			 ((type . "SYMBOL")
			  (name . this))
			 ((type . "SYMBOL")
			  (name . existential_type))
			 ((type . "SYMBOL")
			  (name . literal_type))
			 ((type . "SYMBOL")
			  (name . lookup_type))
			 ((type . "SYMBOL")
			  (name . conditional_type))))
 (infer_type (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "infer"))
		      ((type . "ALIAS")
		       (content (type . "SYMBOL") (name . identifier))
		       (named . t)
		       (value . type_identifier))))
 (conditional_type (type . "PREC_LEFT")
		   (value . 0)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "left")
				      (content (type . "CHOICE")
					       (members ((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . parenthesized_type))
								  ((type . "SYMBOL")
								   (name . predefined_type))
								  ((type . "ALIAS")
								   (content (type . "SYMBOL")
									    (name . identifier))
								   (named . t)
								   (value . type_identifier))
								  ((type . "SYMBOL")
								   (name . nested_type_identifier))
								  ((type . "SYMBOL")
								   (name . generic_type))
								  ((type . "SYMBOL")
								   (name . object_type))
								  ((type . "SYMBOL")
								   (name . array_type))
								  ((type . "SYMBOL")
								   (name . tuple_type))
								  ((type . "SYMBOL")
								   (name . flow_maybe_type))
								  ((type . "SYMBOL")
								   (name . type_query))
								  ((type . "SYMBOL")
								   (name . index_type_query))
								  ((type . "SYMBOL")
								   (name . this))
								  ((type . "SYMBOL")
								   (name . existential_type))
								  ((type . "SYMBOL")
								   (name . literal_type))
								  ((type . "SYMBOL")
								   (name . lookup_type))
								  ((type . "SYMBOL")
								   (name . conditional_type))))
							((type . "SYMBOL")
							 (name . union_type))
							((type . "SYMBOL")
							 (name . intersection_type))
							((type . "SYMBOL")
							 (name . function_type))
							((type . "SYMBOL")
							 (name . readonly_type))
							((type . "SYMBOL")
							 (name . constructor_type))
							((type . "SYMBOL")
							 (name . infer_type)))))
				     ((type . "STRING")
				      (value . "extends"))
				     ((type . "FIELD")
				      (name . "right")
				      (content (type . "CHOICE")
					       (members ((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . parenthesized_type))
								  ((type . "SYMBOL")
								   (name . predefined_type))
								  ((type . "ALIAS")
								   (content (type . "SYMBOL")
									    (name . identifier))
								   (named . t)
								   (value . type_identifier))
								  ((type . "SYMBOL")
								   (name . nested_type_identifier))
								  ((type . "SYMBOL")
								   (name . generic_type))
								  ((type . "SYMBOL")
								   (name . object_type))
								  ((type . "SYMBOL")
								   (name . array_type))
								  ((type . "SYMBOL")
								   (name . tuple_type))
								  ((type . "SYMBOL")
								   (name . flow_maybe_type))
								  ((type . "SYMBOL")
								   (name . type_query))
								  ((type . "SYMBOL")
								   (name . index_type_query))
								  ((type . "SYMBOL")
								   (name . this))
								  ((type . "SYMBOL")
								   (name . existential_type))
								  ((type . "SYMBOL")
								   (name . literal_type))
								  ((type . "SYMBOL")
								   (name . lookup_type))
								  ((type . "SYMBOL")
								   (name . conditional_type))))
							((type . "SYMBOL")
							 (name . union_type))
							((type . "SYMBOL")
							 (name . intersection_type))
							((type . "SYMBOL")
							 (name . function_type))
							((type . "SYMBOL")
							 (name . readonly_type))
							((type . "SYMBOL")
							 (name . constructor_type))
							((type . "SYMBOL")
							 (name . infer_type)))))
				     ((type . "STRING")
				      (value . "?"))
				     ((type . "FIELD")
				      (name . "consequence")
				      (content (type . "CHOICE")
					       (members ((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . parenthesized_type))
								  ((type . "SYMBOL")
								   (name . predefined_type))
								  ((type . "ALIAS")
								   (content (type . "SYMBOL")
									    (name . identifier))
								   (named . t)
								   (value . type_identifier))
								  ((type . "SYMBOL")
								   (name . nested_type_identifier))
								  ((type . "SYMBOL")
								   (name . generic_type))
								  ((type . "SYMBOL")
								   (name . object_type))
								  ((type . "SYMBOL")
								   (name . array_type))
								  ((type . "SYMBOL")
								   (name . tuple_type))
								  ((type . "SYMBOL")
								   (name . flow_maybe_type))
								  ((type . "SYMBOL")
								   (name . type_query))
								  ((type . "SYMBOL")
								   (name . index_type_query))
								  ((type . "SYMBOL")
								   (name . this))
								  ((type . "SYMBOL")
								   (name . existential_type))
								  ((type . "SYMBOL")
								   (name . literal_type))
								  ((type . "SYMBOL")
								   (name . lookup_type))
								  ((type . "SYMBOL")
								   (name . conditional_type))))
							((type . "SYMBOL")
							 (name . union_type))
							((type . "SYMBOL")
							 (name . intersection_type))
							((type . "SYMBOL")
							 (name . function_type))
							((type . "SYMBOL")
							 (name . readonly_type))
							((type . "SYMBOL")
							 (name . constructor_type))
							((type . "SYMBOL")
							 (name . infer_type)))))
				     ((type . "STRING")
				      (value . ":"))
				     ((type . "FIELD")
				      (name . "alternative")
				      (content (type . "CHOICE")
					       (members ((type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . parenthesized_type))
								  ((type . "SYMBOL")
								   (name . predefined_type))
								  ((type . "ALIAS")
								   (content (type . "SYMBOL")
									    (name . identifier))
								   (named . t)
								   (value . type_identifier))
								  ((type . "SYMBOL")
								   (name . nested_type_identifier))
								  ((type . "SYMBOL")
								   (name . generic_type))
								  ((type . "SYMBOL")
								   (name . object_type))
								  ((type . "SYMBOL")
								   (name . array_type))
								  ((type . "SYMBOL")
								   (name . tuple_type))
								  ((type . "SYMBOL")
								   (name . flow_maybe_type))
								  ((type . "SYMBOL")
								   (name . type_query))
								  ((type . "SYMBOL")
								   (name . index_type_query))
								  ((type . "SYMBOL")
								   (name . this))
								  ((type . "SYMBOL")
								   (name . existential_type))
								  ((type . "SYMBOL")
								   (name . literal_type))
								  ((type . "SYMBOL")
								   (name . lookup_type))
								  ((type . "SYMBOL")
								   (name . conditional_type))))
							((type . "SYMBOL")
							 (name . union_type))
							((type . "SYMBOL")
							 (name . intersection_type))
							((type . "SYMBOL")
							 (name . function_type))
							((type . "SYMBOL")
							 (name . readonly_type))
							((type . "SYMBOL")
							 (name . constructor_type))
							((type . "SYMBOL")
							 (name . infer_type))))))))
 (generic_type (type . "PREC")
	       (value . "call")
	       (content (type . "SEQ")
			(members ((type . "CHOICE")
				  (members ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . identifier))
					    (named . t)
					    (value . type_identifier))
					   ((type . "SYMBOL")
					    (name . nested_type_identifier))))
				 ((type . "SYMBOL")
				  (name . type_arguments)))))
 (type_predicate (type . "SEQ")
		 (members ((type . "CHOICE")
			   (members ((type . "SYMBOL")
				     (name . identifier))
				    ((type . "SYMBOL")
				     (name . this))))
			  ((type . "STRING")
			   (value . "is"))
			  ((type . "CHOICE")
			   (members ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . parenthesized_type))
					      ((type . "SYMBOL")
					       (name . predefined_type))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . type_identifier))
					      ((type . "SYMBOL")
					       (name . nested_type_identifier))
					      ((type . "SYMBOL")
					       (name . generic_type))
					      ((type . "SYMBOL")
					       (name . object_type))
					      ((type . "SYMBOL")
					       (name . array_type))
					      ((type . "SYMBOL")
					       (name . tuple_type))
					      ((type . "SYMBOL")
					       (name . flow_maybe_type))
					      ((type . "SYMBOL")
					       (name . type_query))
					      ((type . "SYMBOL")
					       (name . index_type_query))
					      ((type . "SYMBOL")
					       (name . this))
					      ((type . "SYMBOL")
					       (name . existential_type))
					      ((type . "SYMBOL")
					       (name . literal_type))
					      ((type . "SYMBOL")
					       (name . lookup_type))
					      ((type . "SYMBOL")
					       (name . conditional_type))))
				    ((type . "SYMBOL")
				     (name . union_type))
				    ((type . "SYMBOL")
				     (name . intersection_type))
				    ((type . "SYMBOL")
				     (name . function_type))
				    ((type . "SYMBOL")
				     (name . readonly_type))
				    ((type . "SYMBOL")
				     (name . constructor_type))
				    ((type . "SYMBOL")
				     (name . infer_type))))))
 (type_predicate_annotation (type . "SEQ")
			    (members ((type . "SEQ")
				      (members ((type . "STRING")
						(value . ":"))
					       ((type . "SYMBOL")
						(name . type_predicate))))))
 (type_query (type . "PREC")
	     (value . "unary_void")
	     (content (type . "SEQ")
		      (members ((type . "STRING")
				(value . "typeof"))
			       ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . primary_expression))
					 ((type . "SYMBOL")
					  (name . generic_type)))))))
 (index_type_query (type . "PREC")
		   (value . "unary_void")
		   (content (type . "SEQ")
			    (members ((type . "STRING")
				      (value . "keyof"))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . generic_type))
					       ((type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . identifier))
						(named . t)
						(value . type_identifier))
					       ((type . "SYMBOL")
						(name . nested_type_identifier))
					       ((type . "SYMBOL")
						(name . type_query)))))))
 (lookup_type (type . "SEQ")
	      (members ((type . "CHOICE")
			(members ((type . "SYMBOL")
				  (name . parenthesized_type))
				 ((type . "SYMBOL")
				  (name . predefined_type))
				 ((type . "ALIAS")
				  (content (type . "SYMBOL")
					   (name . identifier))
				  (named . t)
				  (value . type_identifier))
				 ((type . "SYMBOL")
				  (name . nested_type_identifier))
				 ((type . "SYMBOL")
				  (name . generic_type))
				 ((type . "SYMBOL")
				  (name . object_type))
				 ((type . "SYMBOL")
				  (name . array_type))
				 ((type . "SYMBOL")
				  (name . tuple_type))
				 ((type . "SYMBOL")
				  (name . flow_maybe_type))
				 ((type . "SYMBOL")
				  (name . type_query))
				 ((type . "SYMBOL")
				  (name . index_type_query))
				 ((type . "SYMBOL")
				  (name . this))
				 ((type . "SYMBOL")
				  (name . existential_type))
				 ((type . "SYMBOL")
				  (name . literal_type))
				 ((type . "SYMBOL")
				  (name . lookup_type))
				 ((type . "SYMBOL")
				  (name . conditional_type))))
		       ((type . "STRING")
			(value . "["))
		       ((type . "CHOICE")
			(members ((type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . parenthesized_type))
					   ((type . "SYMBOL")
					    (name . predefined_type))
					   ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . identifier))
					    (named . t)
					    (value . type_identifier))
					   ((type . "SYMBOL")
					    (name . nested_type_identifier))
					   ((type . "SYMBOL")
					    (name . generic_type))
					   ((type . "SYMBOL")
					    (name . object_type))
					   ((type . "SYMBOL")
					    (name . array_type))
					   ((type . "SYMBOL")
					    (name . tuple_type))
					   ((type . "SYMBOL")
					    (name . flow_maybe_type))
					   ((type . "SYMBOL")
					    (name . type_query))
					   ((type . "SYMBOL")
					    (name . index_type_query))
					   ((type . "SYMBOL")
					    (name . this))
					   ((type . "SYMBOL")
					    (name . existential_type))
					   ((type . "SYMBOL")
					    (name . literal_type))
					   ((type . "SYMBOL")
					    (name . lookup_type))
					   ((type . "SYMBOL")
					    (name . conditional_type))))
				 ((type . "SYMBOL")
				  (name . union_type))
				 ((type . "SYMBOL")
				  (name . intersection_type))
				 ((type . "SYMBOL")
				  (name . function_type))
				 ((type . "SYMBOL")
				  (name . readonly_type))
				 ((type . "SYMBOL")
				  (name . constructor_type))
				 ((type . "SYMBOL")
				  (name . infer_type))))
		       ((type . "STRING")
			(value . "]"))))
 (mapped_type_clause (type . "SEQ")
		     (members ((type . "ALIAS")
			       (content (type . "SYMBOL")
					(name . identifier))
			       (named . t)
			       (value . type_identifier))
			      ((type . "STRING")
			       (value . "in"))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . parenthesized_type))
						  ((type . "SYMBOL")
						   (name . predefined_type))
						  ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . identifier))
						   (named . t)
						   (value . type_identifier))
						  ((type . "SYMBOL")
						   (name . nested_type_identifier))
						  ((type . "SYMBOL")
						   (name . generic_type))
						  ((type . "SYMBOL")
						   (name . object_type))
						  ((type . "SYMBOL")
						   (name . array_type))
						  ((type . "SYMBOL")
						   (name . tuple_type))
						  ((type . "SYMBOL")
						   (name . flow_maybe_type))
						  ((type . "SYMBOL")
						   (name . type_query))
						  ((type . "SYMBOL")
						   (name . index_type_query))
						  ((type . "SYMBOL")
						   (name . this))
						  ((type . "SYMBOL")
						   (name . existential_type))
						  ((type . "SYMBOL")
						   (name . literal_type))
						  ((type . "SYMBOL")
						   (name . lookup_type))
						  ((type . "SYMBOL")
						   (name . conditional_type))))
					((type . "SYMBOL")
					 (name . union_type))
					((type . "SYMBOL")
					 (name . intersection_type))
					((type . "SYMBOL")
					 (name . function_type))
					((type . "SYMBOL")
					 (name . readonly_type))
					((type . "SYMBOL")
					 (name . constructor_type))
					((type . "SYMBOL")
					 (name . infer_type))))))
 (literal_type (type . "CHOICE")
	       (members ((type . "ALIAS")
			 (content (type . "PREC_LEFT")
				  (value . 1)
				  (content (type . "SEQ")
					   (members ((type . "FIELD")
						     (name . "operator")
						     (content (type . "CHOICE")
							      (members ((type . "STRING")
									(value . "-"))
								       ((type . "STRING")
									(value . "+")))))
						    ((type . "FIELD")
						     (name . "argument")
						     (content (type . "SYMBOL")
							      (name . number))))))
			 (named . t)
			 (value . unary_expression))
			((type . "SYMBOL")
			 (name . number))
			((type . "SYMBOL")
			 (name . string))
			((type . "SYMBOL")
			 (name . true))
			((type . "SYMBOL")
			 (name . false))))
 (_number (type . "PREC_LEFT")
	  (value . 1)
	  (content (type . "SEQ")
		   (members ((type . "FIELD")
			     (name . "operator")
			     (content (type . "CHOICE")
				      (members ((type . "STRING")
						(value . "-"))
					       ((type . "STRING")
						(value . "+")))))
			    ((type . "FIELD")
			     (name . "argument")
			     (content (type . "SYMBOL") (name . number))))))
 (existential_type (type . "STRING") (value . "*"))
 (flow_maybe_type (type . "PREC_RIGHT")
		  (value . 0)
		  (content (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "?"))
				    ((type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . parenthesized_type))
					      ((type . "SYMBOL")
					       (name . predefined_type))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . type_identifier))
					      ((type . "SYMBOL")
					       (name . nested_type_identifier))
					      ((type . "SYMBOL")
					       (name . generic_type))
					      ((type . "SYMBOL")
					       (name . object_type))
					      ((type . "SYMBOL")
					       (name . array_type))
					      ((type . "SYMBOL")
					       (name . tuple_type))
					      ((type . "SYMBOL")
					       (name . flow_maybe_type))
					      ((type . "SYMBOL")
					       (name . type_query))
					      ((type . "SYMBOL")
					       (name . index_type_query))
					      ((type . "SYMBOL")
					       (name . this))
					      ((type . "SYMBOL")
					       (name . existential_type))
					      ((type . "SYMBOL")
					       (name . literal_type))
					      ((type . "SYMBOL")
					       (name . lookup_type))
					      ((type . "SYMBOL")
					       (name . conditional_type)))))))
 (parenthesized_type (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "("))
			      ((type . "CHOICE")
			       (members ((type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . parenthesized_type))
						  ((type . "SYMBOL")
						   (name . predefined_type))
						  ((type . "ALIAS")
						   (content (type . "SYMBOL")
							    (name . identifier))
						   (named . t)
						   (value . type_identifier))
						  ((type . "SYMBOL")
						   (name . nested_type_identifier))
						  ((type . "SYMBOL")
						   (name . generic_type))
						  ((type . "SYMBOL")
						   (name . object_type))
						  ((type . "SYMBOL")
						   (name . array_type))
						  ((type . "SYMBOL")
						   (name . tuple_type))
						  ((type . "SYMBOL")
						   (name . flow_maybe_type))
						  ((type . "SYMBOL")
						   (name . type_query))
						  ((type . "SYMBOL")
						   (name . index_type_query))
						  ((type . "SYMBOL")
						   (name . this))
						  ((type . "SYMBOL")
						   (name . existential_type))
						  ((type . "SYMBOL")
						   (name . literal_type))
						  ((type . "SYMBOL")
						   (name . lookup_type))
						  ((type . "SYMBOL")
						   (name . conditional_type))))
					((type . "SYMBOL")
					 (name . union_type))
					((type . "SYMBOL")
					 (name . intersection_type))
					((type . "SYMBOL")
					 (name . function_type))
					((type . "SYMBOL")
					 (name . readonly_type))
					((type . "SYMBOL")
					 (name . constructor_type))
					((type . "SYMBOL")
					 (name . infer_type))))
			      ((type . "STRING")
			       (value . ")"))))
 (predefined_type (type . "CHOICE")
		  (members ((type . "STRING")
			    (value . "any"))
			   ((type . "STRING")
			    (value . "number"))
			   ((type . "STRING")
			    (value . "boolean"))
			   ((type . "STRING")
			    (value . "string"))
			   ((type . "STRING")
			    (value . "symbol"))
			   ((type . "STRING")
			    (value . "void"))))
 (type_arguments (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "<"))
			  ((type . "SEQ")
			   (members ((type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . parenthesized_type))
							((type . "SYMBOL")
							 (name . predefined_type))
							((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . identifier))
							 (named . t)
							 (value . type_identifier))
							((type . "SYMBOL")
							 (name . nested_type_identifier))
							((type . "SYMBOL")
							 (name . generic_type))
							((type . "SYMBOL")
							 (name . object_type))
							((type . "SYMBOL")
							 (name . array_type))
							((type . "SYMBOL")
							 (name . tuple_type))
							((type . "SYMBOL")
							 (name . flow_maybe_type))
							((type . "SYMBOL")
							 (name . type_query))
							((type . "SYMBOL")
							 (name . index_type_query))
							((type . "SYMBOL")
							 (name . this))
							((type . "SYMBOL")
							 (name . existential_type))
							((type . "SYMBOL")
							 (name . literal_type))
							((type . "SYMBOL")
							 (name . lookup_type))
							((type . "SYMBOL")
							 (name . conditional_type))))
					      ((type . "SYMBOL")
					       (name . union_type))
					      ((type . "SYMBOL")
					       (name . intersection_type))
					      ((type . "SYMBOL")
					       (name . function_type))
					      ((type . "SYMBOL")
					       (name . readonly_type))
					      ((type . "SYMBOL")
					       (name . constructor_type))
					      ((type . "SYMBOL")
					       (name . infer_type))))
				    ((type . "REPEAT")
				     (content (type . "SEQ")
					      (members ((type . "STRING")
							(value . ","))
						       ((type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . parenthesized_type))
									   ((type . "SYMBOL")
									    (name . predefined_type))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . identifier))
									    (named . t)
									    (value . type_identifier))
									   ((type . "SYMBOL")
									    (name . nested_type_identifier))
									   ((type . "SYMBOL")
									    (name . generic_type))
									   ((type . "SYMBOL")
									    (name . object_type))
									   ((type . "SYMBOL")
									    (name . array_type))
									   ((type . "SYMBOL")
									    (name . tuple_type))
									   ((type . "SYMBOL")
									    (name . flow_maybe_type))
									   ((type . "SYMBOL")
									    (name . type_query))
									   ((type . "SYMBOL")
									    (name . index_type_query))
									   ((type . "SYMBOL")
									    (name . this))
									   ((type . "SYMBOL")
									    (name . existential_type))
									   ((type . "SYMBOL")
									    (name . literal_type))
									   ((type . "SYMBOL")
									    (name . lookup_type))
									   ((type . "SYMBOL")
									    (name . conditional_type))))
								 ((type . "SYMBOL")
								  (name . union_type))
								 ((type . "SYMBOL")
								  (name . intersection_type))
								 ((type . "SYMBOL")
								  (name . function_type))
								 ((type . "SYMBOL")
								  (name . readonly_type))
								 ((type . "SYMBOL")
								  (name . constructor_type))
								 ((type . "SYMBOL")
								  (name . infer_type)))))))))
			  ((type . "CHOICE")
			   (members ((type . "STRING")
				     (value . ","))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . ">"))))
 (object_type (type . "SEQ")
	      (members ((type . "CHOICE")
			(members ((type . "STRING")
				  (value . "{"))
				 ((type . "STRING")
				  (value . "{|"))))
		       ((type . "CHOICE")
			(members ((type . "SEQ")
				  (members ((type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "STRING")
								(value . ","))
							       ((type . "STRING")
								(value . ";"))))
						     ((type . "BLANK"))))
					   ((type . "SEQ")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . export_statement))
							       ((type . "SYMBOL")
								(name . property_signature))
							       ((type . "SYMBOL")
								(name . call_signature))
							       ((type . "SYMBOL")
								(name . construct_signature))
							       ((type . "SYMBOL")
								(name . index_signature))
							       ((type . "SYMBOL")
								(name . method_signature))))
						     ((type . "REPEAT")
						      (content (type . "SEQ")
							       (members ((type . "CHOICE")
									 (members ((type . "STRING")
										   (value . ","))
										  ((type . "CHOICE")
										   (members ((type . "SYMBOL")
											     (name . _automatic_semicolon))
											    ((type . "STRING")
											     (value . ";"))))))
									((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . export_statement))
										  ((type . "SYMBOL")
										   (name . property_signature))
										  ((type . "SYMBOL")
										   (name . call_signature))
										  ((type . "SYMBOL")
										   (name . construct_signature))
										  ((type . "SYMBOL")
										   (name . index_signature))
										  ((type . "SYMBOL")
										   (name . method_signature)))))))))
					   ((type . "CHOICE")
					    (members ((type . "CHOICE")
						      (members ((type . "STRING")
								(value . ","))
							       ((type . "CHOICE")
								(members ((type . "SYMBOL")
									  (name . _automatic_semicolon))
									 ((type . "STRING")
									  (value . ";"))))))
						     ((type . "BLANK"))))))
				 ((type . "BLANK"))))
		       ((type . "CHOICE")
			(members ((type . "STRING")
				  (value . "}"))
				 ((type . "STRING")
				  (value . "|}"))))))
 (call_signature (type . "SEQ")
		 (members ((type . "FIELD")
			   (name . "type_parameters")
			   (content (type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . type_parameters))
					     ((type . "BLANK")))))
			  ((type . "FIELD")
			   (name . "parameters")
			   (content (type . "SYMBOL")
				    (name . formal_parameters)))
			  ((type . "FIELD")
			   (name . "return_type")
			   (content (type . "CHOICE")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . type_annotation))
						       ((type . "SYMBOL")
							(name . asserts))
						       ((type . "SYMBOL")
							(name . type_predicate_annotation))))
					     ((type . "BLANK")))))))
 (property_signature (type . "SEQ")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . accessibility_modifier))
					((type . "BLANK"))))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . "static"))
					((type . "BLANK"))))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . "readonly"))
					((type . "BLANK"))))
			      ((type . "FIELD")
			       (name . "name")
			       (content (type . "CHOICE")
					(members ((type . "ALIAS")
						  (content (type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . identifier))
								    ((type . "CHOICE")
								     (members ((type . "STRING")
									       (value . "declare"))
									      ((type . "STRING")
									       (value . "namespace"))
									      ((type . "STRING")
									       (value . "type"))
									      ((type . "STRING")
									       (value . "public"))
									      ((type . "STRING")
									       (value . "private"))
									      ((type . "STRING")
									       (value . "protected"))
									      ((type . "STRING")
									       (value . "readonly"))
									      ((type . "STRING")
									       (value . "module"))
									      ((type . "STRING")
									       (value . "any"))
									      ((type . "STRING")
									       (value . "number"))
									      ((type . "STRING")
									       (value . "boolean"))
									      ((type . "STRING")
									       (value . "string"))
									      ((type . "STRING")
									       (value . "symbol"))
									      ((type . "STRING")
									       (value . "export"))
									      ((type . "CHOICE")
									       (members ((type . "STRING")
											 (value . "get"))
											((type . "STRING")
											 (value . "set"))
											((type . "STRING")
											 (value . "async"))
											((type . "STRING")
											 (value . "static"))
											((type . "STRING")
											 (value . "export"))))))))
						  (named . t)
						  (value . property_identifier))
						 ((type . "SYMBOL")
						  (name . string))
						 ((type . "SYMBOL")
						  (name . number))
						 ((type . "SYMBOL")
						  (name . computed_property_name)))))
			      ((type . "CHOICE")
			       (members ((type . "STRING")
					 (value . "?"))
					((type . "BLANK"))))
			      ((type . "FIELD")
			       (name . "type")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . type_annotation))
						 ((type . "BLANK")))))))
 (type_parameters (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "<"))
			   ((type . "SEQ")
			    (members ((type . "SYMBOL")
				      (name . type_parameter))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "SYMBOL")
							 (name . type_parameter)))))))
			   ((type . "CHOICE")
			    (members ((type . "STRING")
				      (value . ","))
				     ((type . "BLANK"))))
			   ((type . "STRING")
			    (value . ">"))))
 (type_parameter (type . "SEQ")
		 (members ((type . "ALIAS")
			   (content (type . "SYMBOL") (name . identifier))
			   (named . t)
			   (value . type_identifier))
			  ((type . "CHOICE")
			   (members ((type . "SYMBOL")
				     (name . constraint))
				    ((type . "BLANK"))))
			  ((type . "CHOICE")
			   (members ((type . "SYMBOL")
				     (name . default_type))
				    ((type . "BLANK"))))))
 (default_type (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "="))
			((type . "CHOICE")
			 (members ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . parenthesized_type))
					    ((type . "SYMBOL")
					     (name . predefined_type))
					    ((type . "ALIAS")
					     (content (type . "SYMBOL")
						      (name . identifier))
					     (named . t)
					     (value . type_identifier))
					    ((type . "SYMBOL")
					     (name . nested_type_identifier))
					    ((type . "SYMBOL")
					     (name . generic_type))
					    ((type . "SYMBOL")
					     (name . object_type))
					    ((type . "SYMBOL")
					     (name . array_type))
					    ((type . "SYMBOL")
					     (name . tuple_type))
					    ((type . "SYMBOL")
					     (name . flow_maybe_type))
					    ((type . "SYMBOL")
					     (name . type_query))
					    ((type . "SYMBOL")
					     (name . index_type_query))
					    ((type . "SYMBOL")
					     (name . this))
					    ((type . "SYMBOL")
					     (name . existential_type))
					    ((type . "SYMBOL")
					     (name . literal_type))
					    ((type . "SYMBOL")
					     (name . lookup_type))
					    ((type . "SYMBOL")
					     (name . conditional_type))))
				  ((type . "SYMBOL")
				   (name . union_type))
				  ((type . "SYMBOL")
				   (name . intersection_type))
				  ((type . "SYMBOL")
				   (name . function_type))
				  ((type . "SYMBOL")
				   (name . readonly_type))
				  ((type . "SYMBOL")
				   (name . constructor_type))
				  ((type . "SYMBOL")
				   (name . infer_type))))))
 (constraint (type . "SEQ")
	     (members ((type . "CHOICE")
		       (members ((type . "STRING")
				 (value . "extends"))
				((type . "STRING")
				 (value . ":"))))
		      ((type . "CHOICE")
		       (members ((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . parenthesized_type))
					  ((type . "SYMBOL")
					   (name . predefined_type))
					  ((type . "ALIAS")
					   (content (type . "SYMBOL")
						    (name . identifier))
					   (named . t)
					   (value . type_identifier))
					  ((type . "SYMBOL")
					   (name . nested_type_identifier))
					  ((type . "SYMBOL")
					   (name . generic_type))
					  ((type . "SYMBOL")
					   (name . object_type))
					  ((type . "SYMBOL")
					   (name . array_type))
					  ((type . "SYMBOL")
					   (name . tuple_type))
					  ((type . "SYMBOL")
					   (name . flow_maybe_type))
					  ((type . "SYMBOL")
					   (name . type_query))
					  ((type . "SYMBOL")
					   (name . index_type_query))
					  ((type . "SYMBOL")
					   (name . this))
					  ((type . "SYMBOL")
					   (name . existential_type))
					  ((type . "SYMBOL")
					   (name . literal_type))
					  ((type . "SYMBOL")
					   (name . lookup_type))
					  ((type . "SYMBOL")
					   (name . conditional_type))))
				((type . "SYMBOL")
				 (name . union_type))
				((type . "SYMBOL")
				 (name . intersection_type))
				((type . "SYMBOL")
				 (name . function_type))
				((type . "SYMBOL")
				 (name . readonly_type))
				((type . "SYMBOL")
				 (name . constructor_type))
				((type . "SYMBOL")
				 (name . infer_type))))))
 (construct_signature (type . "SEQ")
		      (members ((type . "STRING")
				(value . "new"))
			       ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . type_parameters))
					 ((type . "BLANK"))))
			       ((type . "SYMBOL")
				(name . formal_parameters))
			       ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . type_annotation))
					 ((type . "BLANK"))))))
 (index_signature (type . "SEQ")
		  (members ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "FIELD")
						(name . "sign")
						(content (type . "CHOICE")
							 (members ((type . "STRING")
								   (value . "-"))
								  ((type . "BLANK")))))
					       ((type . "STRING")
						(value . "readonly"))))
				     ((type . "BLANK"))))
			   ((type . "STRING")
			    (value . "["))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . identifier))
							 ((type . "ALIAS")
							  (content (type . "CHOICE")
								   (members ((type . "STRING")
									     (value . "declare"))
									    ((type . "STRING")
									     (value . "namespace"))
									    ((type . "STRING")
									     (value . "type"))
									    ((type . "STRING")
									     (value . "public"))
									    ((type . "STRING")
									     (value . "private"))
									    ((type . "STRING")
									     (value . "protected"))
									    ((type . "STRING")
									     (value . "readonly"))
									    ((type . "STRING")
									     (value . "module"))
									    ((type . "STRING")
									     (value . "any"))
									    ((type . "STRING")
									     (value . "number"))
									    ((type . "STRING")
									     (value . "boolean"))
									    ((type . "STRING")
									     (value . "string"))
									    ((type . "STRING")
									     (value . "symbol"))
									    ((type . "STRING")
									     (value . "export"))
									    ((type . "CHOICE")
									     (members ((type . "STRING")
										       (value . "get"))
										      ((type . "STRING")
										       (value . "set"))
										      ((type . "STRING")
										       (value . "async"))
										      ((type . "STRING")
										       (value . "static"))
										      ((type . "STRING")
										       (value . "export"))))))
							  (named . t)
							  (value . identifier))))
					       ((type . "STRING")
						(value . ":"))
					       ((type . "CHOICE")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . parenthesized_type))
								   ((type . "SYMBOL")
								    (name . predefined_type))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . identifier))
								    (named . t)
								    (value . type_identifier))
								   ((type . "SYMBOL")
								    (name . nested_type_identifier))
								   ((type . "SYMBOL")
								    (name . generic_type))
								   ((type . "SYMBOL")
								    (name . object_type))
								   ((type . "SYMBOL")
								    (name . array_type))
								   ((type . "SYMBOL")
								    (name . tuple_type))
								   ((type . "SYMBOL")
								    (name . flow_maybe_type))
								   ((type . "SYMBOL")
								    (name . type_query))
								   ((type . "SYMBOL")
								    (name . index_type_query))
								   ((type . "SYMBOL")
								    (name . this))
								   ((type . "SYMBOL")
								    (name . existential_type))
								   ((type . "SYMBOL")
								    (name . literal_type))
								   ((type . "SYMBOL")
								    (name . lookup_type))
								   ((type . "SYMBOL")
								    (name . conditional_type))))
							 ((type . "SYMBOL")
							  (name . union_type))
							 ((type . "SYMBOL")
							  (name . intersection_type))
							 ((type . "SYMBOL")
							  (name . function_type))
							 ((type . "SYMBOL")
							  (name . readonly_type))
							 ((type . "SYMBOL")
							  (name . constructor_type))
							 ((type . "SYMBOL")
							  (name . infer_type))))))
				     ((type . "SYMBOL")
				      (name . mapped_type_clause))))
			   ((type . "STRING")
			    (value . "]"))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . type_annotation))
				     ((type . "SYMBOL")
				      (name . omitting_type_annotation))
				     ((type . "SYMBOL")
				      (name . opting_type_annotation))))))
 (array_type (type . "SEQ")
	     (members ((type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . parenthesized_type))
				((type . "SYMBOL")
				 (name . predefined_type))
				((type . "ALIAS")
				 (content (type . "SYMBOL")
					  (name . identifier))
				 (named . t)
				 (value . type_identifier))
				((type . "SYMBOL")
				 (name . nested_type_identifier))
				((type . "SYMBOL")
				 (name . generic_type))
				((type . "SYMBOL")
				 (name . object_type))
				((type . "SYMBOL")
				 (name . array_type))
				((type . "SYMBOL")
				 (name . tuple_type))
				((type . "SYMBOL")
				 (name . flow_maybe_type))
				((type . "SYMBOL")
				 (name . type_query))
				((type . "SYMBOL")
				 (name . index_type_query))
				((type . "SYMBOL")
				 (name . this))
				((type . "SYMBOL")
				 (name . existential_type))
				((type . "SYMBOL")
				 (name . literal_type))
				((type . "SYMBOL")
				 (name . lookup_type))
				((type . "SYMBOL")
				 (name . conditional_type))))
		      ((type . "STRING")
		       (value . "["))
		      ((type . "STRING")
		       (value . "]"))))
 (tuple_type (type . "SEQ")
	     (members ((type . "STRING")
		       (value . "["))
		      ((type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "CHOICE")
					   (members ((type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . tuple_parameter))
						     (named . t)
						     (value . required_parameter))
						    ((type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . optional_tuple_parameter))
						     (named . t)
						     (value . optional_parameter))
						    ((type . "SYMBOL")
						     (name . optional_type))
						    ((type . "SYMBOL")
						     (name . rest_type))
						    ((type . "CHOICE")
						     (members ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . parenthesized_type))
									((type . "SYMBOL")
									 (name . predefined_type))
									((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . identifier))
									 (named . t)
									 (value . type_identifier))
									((type . "SYMBOL")
									 (name . nested_type_identifier))
									((type . "SYMBOL")
									 (name . generic_type))
									((type . "SYMBOL")
									 (name . object_type))
									((type . "SYMBOL")
									 (name . array_type))
									((type . "SYMBOL")
									 (name . tuple_type))
									((type . "SYMBOL")
									 (name . flow_maybe_type))
									((type . "SYMBOL")
									 (name . type_query))
									((type . "SYMBOL")
									 (name . index_type_query))
									((type . "SYMBOL")
									 (name . this))
									((type . "SYMBOL")
									 (name . existential_type))
									((type . "SYMBOL")
									 (name . literal_type))
									((type . "SYMBOL")
									 (name . lookup_type))
									((type . "SYMBOL")
									 (name . conditional_type))))
							      ((type . "SYMBOL")
							       (name . union_type))
							      ((type . "SYMBOL")
							       (name . intersection_type))
							      ((type . "SYMBOL")
							       (name . function_type))
							      ((type . "SYMBOL")
							       (name . readonly_type))
							      ((type . "SYMBOL")
							       (name . constructor_type))
							      ((type . "SYMBOL")
							       (name . infer_type))))))
					  ((type . "REPEAT")
					   (content (type . "SEQ")
						    (members ((type . "STRING")
							      (value . ","))
							     ((type . "CHOICE")
							      (members ((type . "ALIAS")
									(content (type . "SYMBOL")
										 (name . tuple_parameter))
									(named . t)
									(value . required_parameter))
								       ((type . "ALIAS")
									(content (type . "SYMBOL")
										 (name . optional_tuple_parameter))
									(named . t)
									(value . optional_parameter))
								       ((type . "SYMBOL")
									(name . optional_type))
								       ((type . "SYMBOL")
									(name . rest_type))
								       ((type . "CHOICE")
									(members ((type . "CHOICE")
										  (members ((type . "SYMBOL")
											    (name . parenthesized_type))
											   ((type . "SYMBOL")
											    (name . predefined_type))
											   ((type . "ALIAS")
											    (content (type . "SYMBOL")
												     (name . identifier))
											    (named . t)
											    (value . type_identifier))
											   ((type . "SYMBOL")
											    (name . nested_type_identifier))
											   ((type . "SYMBOL")
											    (name . generic_type))
											   ((type . "SYMBOL")
											    (name . object_type))
											   ((type . "SYMBOL")
											    (name . array_type))
											   ((type . "SYMBOL")
											    (name . tuple_type))
											   ((type . "SYMBOL")
											    (name . flow_maybe_type))
											   ((type . "SYMBOL")
											    (name . type_query))
											   ((type . "SYMBOL")
											    (name . index_type_query))
											   ((type . "SYMBOL")
											    (name . this))
											   ((type . "SYMBOL")
											    (name . existential_type))
											   ((type . "SYMBOL")
											    (name . literal_type))
											   ((type . "SYMBOL")
											    (name . lookup_type))
											   ((type . "SYMBOL")
											    (name . conditional_type))))
										 ((type . "SYMBOL")
										  (name . union_type))
										 ((type . "SYMBOL")
										  (name . intersection_type))
										 ((type . "SYMBOL")
										  (name . function_type))
										 ((type . "SYMBOL")
										  (name . readonly_type))
										 ((type . "SYMBOL")
										  (name . constructor_type))
										 ((type . "SYMBOL")
										  (name . infer_type)))))))))))
				((type . "BLANK"))))
		      ((type . "STRING")
		       (value . "]"))))
 (readonly_type (type . "SEQ")
		(members ((type . "STRING")
			  (value . "readonly"))
			 ((type . "CHOICE")
			  (members ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . parenthesized_type))
					     ((type . "SYMBOL")
					      (name . predefined_type))
					     ((type . "ALIAS")
					      (content (type . "SYMBOL")
						       (name . identifier))
					      (named . t)
					      (value . type_identifier))
					     ((type . "SYMBOL")
					      (name . nested_type_identifier))
					     ((type . "SYMBOL")
					      (name . generic_type))
					     ((type . "SYMBOL")
					      (name . object_type))
					     ((type . "SYMBOL")
					      (name . array_type))
					     ((type . "SYMBOL")
					      (name . tuple_type))
					     ((type . "SYMBOL")
					      (name . flow_maybe_type))
					     ((type . "SYMBOL")
					      (name . type_query))
					     ((type . "SYMBOL")
					      (name . index_type_query))
					     ((type . "SYMBOL")
					      (name . this))
					     ((type . "SYMBOL")
					      (name . existential_type))
					     ((type . "SYMBOL")
					      (name . literal_type))
					     ((type . "SYMBOL")
					      (name . lookup_type))
					     ((type . "SYMBOL")
					      (name . conditional_type))))
				   ((type . "SYMBOL")
				    (name . union_type))
				   ((type . "SYMBOL")
				    (name . intersection_type))
				   ((type . "SYMBOL")
				    (name . function_type))
				   ((type . "SYMBOL")
				    (name . readonly_type))
				   ((type . "SYMBOL")
				    (name . constructor_type))
				   ((type . "SYMBOL")
				    (name . infer_type))))))
 (union_type (type . "PREC_LEFT")
	     (value . 0)
	     (content (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . parenthesized_type))
							     ((type . "SYMBOL")
							      (name . predefined_type))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . type_identifier))
							     ((type . "SYMBOL")
							      (name . nested_type_identifier))
							     ((type . "SYMBOL")
							      (name . generic_type))
							     ((type . "SYMBOL")
							      (name . object_type))
							     ((type . "SYMBOL")
							      (name . array_type))
							     ((type . "SYMBOL")
							      (name . tuple_type))
							     ((type . "SYMBOL")
							      (name . flow_maybe_type))
							     ((type . "SYMBOL")
							      (name . type_query))
							     ((type . "SYMBOL")
							      (name . index_type_query))
							     ((type . "SYMBOL")
							      (name . this))
							     ((type . "SYMBOL")
							      (name . existential_type))
							     ((type . "SYMBOL")
							      (name . literal_type))
							     ((type . "SYMBOL")
							      (name . lookup_type))
							     ((type . "SYMBOL")
							      (name . conditional_type))))
						   ((type . "SYMBOL")
						    (name . union_type))
						   ((type . "SYMBOL")
						    (name . intersection_type))
						   ((type . "SYMBOL")
						    (name . function_type))
						   ((type . "SYMBOL")
						    (name . readonly_type))
						   ((type . "SYMBOL")
						    (name . constructor_type))
						   ((type . "SYMBOL")
						    (name . infer_type))))
					 ((type . "BLANK"))))
			       ((type . "STRING")
				(value . "|"))
			       ((type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . parenthesized_type))
						   ((type . "SYMBOL")
						    (name . predefined_type))
						   ((type . "ALIAS")
						    (content (type . "SYMBOL")
							     (name . identifier))
						    (named . t)
						    (value . type_identifier))
						   ((type . "SYMBOL")
						    (name . nested_type_identifier))
						   ((type . "SYMBOL")
						    (name . generic_type))
						   ((type . "SYMBOL")
						    (name . object_type))
						   ((type . "SYMBOL")
						    (name . array_type))
						   ((type . "SYMBOL")
						    (name . tuple_type))
						   ((type . "SYMBOL")
						    (name . flow_maybe_type))
						   ((type . "SYMBOL")
						    (name . type_query))
						   ((type . "SYMBOL")
						    (name . index_type_query))
						   ((type . "SYMBOL")
						    (name . this))
						   ((type . "SYMBOL")
						    (name . existential_type))
						   ((type . "SYMBOL")
						    (name . literal_type))
						   ((type . "SYMBOL")
						    (name . lookup_type))
						   ((type . "SYMBOL")
						    (name . conditional_type))))
					 ((type . "SYMBOL")
					  (name . union_type))
					 ((type . "SYMBOL")
					  (name . intersection_type))
					 ((type . "SYMBOL")
					  (name . function_type))
					 ((type . "SYMBOL")
					  (name . readonly_type))
					 ((type . "SYMBOL")
					  (name . constructor_type))
					 ((type . "SYMBOL")
					  (name . infer_type)))))))
 (intersection_type (type . "PREC_LEFT")
		    (value . 0)
		    (content (type . "SEQ")
			     (members ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . parenthesized_type))
								    ((type . "SYMBOL")
								     (name . predefined_type))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . type_identifier))
								    ((type . "SYMBOL")
								     (name . nested_type_identifier))
								    ((type . "SYMBOL")
								     (name . generic_type))
								    ((type . "SYMBOL")
								     (name . object_type))
								    ((type . "SYMBOL")
								     (name . array_type))
								    ((type . "SYMBOL")
								     (name . tuple_type))
								    ((type . "SYMBOL")
								     (name . flow_maybe_type))
								    ((type . "SYMBOL")
								     (name . type_query))
								    ((type . "SYMBOL")
								     (name . index_type_query))
								    ((type . "SYMBOL")
								     (name . this))
								    ((type . "SYMBOL")
								     (name . existential_type))
								    ((type . "SYMBOL")
								     (name . literal_type))
								    ((type . "SYMBOL")
								     (name . lookup_type))
								    ((type . "SYMBOL")
								     (name . conditional_type))))
							  ((type . "SYMBOL")
							   (name . union_type))
							  ((type . "SYMBOL")
							   (name . intersection_type))
							  ((type . "SYMBOL")
							   (name . function_type))
							  ((type . "SYMBOL")
							   (name . readonly_type))
							  ((type . "SYMBOL")
							   (name . constructor_type))
							  ((type . "SYMBOL")
							   (name . infer_type))))
						((type . "BLANK"))))
				      ((type . "STRING")
				       (value . "&"))
				      ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . parenthesized_type))
							  ((type . "SYMBOL")
							   (name . predefined_type))
							  ((type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . identifier))
							   (named . t)
							   (value . type_identifier))
							  ((type . "SYMBOL")
							   (name . nested_type_identifier))
							  ((type . "SYMBOL")
							   (name . generic_type))
							  ((type . "SYMBOL")
							   (name . object_type))
							  ((type . "SYMBOL")
							   (name . array_type))
							  ((type . "SYMBOL")
							   (name . tuple_type))
							  ((type . "SYMBOL")
							   (name . flow_maybe_type))
							  ((type . "SYMBOL")
							   (name . type_query))
							  ((type . "SYMBOL")
							   (name . index_type_query))
							  ((type . "SYMBOL")
							   (name . this))
							  ((type . "SYMBOL")
							   (name . existential_type))
							  ((type . "SYMBOL")
							   (name . literal_type))
							  ((type . "SYMBOL")
							   (name . lookup_type))
							  ((type . "SYMBOL")
							   (name . conditional_type))))
						((type . "SYMBOL")
						 (name . union_type))
						((type . "SYMBOL")
						 (name . intersection_type))
						((type . "SYMBOL")
						 (name . function_type))
						((type . "SYMBOL")
						 (name . readonly_type))
						((type . "SYMBOL")
						 (name . constructor_type))
						((type . "SYMBOL")
						 (name . infer_type)))))))
 (function_type (type . "PREC_LEFT")
		(value . 0)
		(content (type . "SEQ")
			 (members ((type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . type_parameters))
					    ((type . "BLANK"))))
				  ((type . "SYMBOL")
				   (name . formal_parameters))
				  ((type . "STRING")
				   (value . "=>"))
				  ((type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . parenthesized_type))
								((type . "SYMBOL")
								 (name . predefined_type))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . identifier))
								 (named . t)
								 (value . type_identifier))
								((type . "SYMBOL")
								 (name . nested_type_identifier))
								((type . "SYMBOL")
								 (name . generic_type))
								((type . "SYMBOL")
								 (name . object_type))
								((type . "SYMBOL")
								 (name . array_type))
								((type . "SYMBOL")
								 (name . tuple_type))
								((type . "SYMBOL")
								 (name . flow_maybe_type))
								((type . "SYMBOL")
								 (name . type_query))
								((type . "SYMBOL")
								 (name . index_type_query))
								((type . "SYMBOL")
								 (name . this))
								((type . "SYMBOL")
								 (name . existential_type))
								((type . "SYMBOL")
								 (name . literal_type))
								((type . "SYMBOL")
								 (name . lookup_type))
								((type . "SYMBOL")
								 (name . conditional_type))))
						      ((type . "SYMBOL")
						       (name . union_type))
						      ((type . "SYMBOL")
						       (name . intersection_type))
						      ((type . "SYMBOL")
						       (name . function_type))
						      ((type . "SYMBOL")
						       (name . readonly_type))
						      ((type . "SYMBOL")
						       (name . constructor_type))
						      ((type . "SYMBOL")
						       (name . infer_type))))
					    ((type . "SYMBOL")
					     (name . type_predicate)))))))
 (_type_identifier (type . "ALIAS")
		   (content (type . "SYMBOL") (name . identifier))
		   (named . t)
		   (value . type_identifier)))


 tree-edit--identifier-regex
 nil

 tree-edit--supertypes
 '
((program
  program)
 (hash_bang_line hash_bang_line)
 (export_statement export_statement statement)
 (export_clause export_clause)
 (_import_export_specifier _import_export_specifier)
 (declaration declaration statement)
 (import import primary_expression expression _expressions)
 (import_statement import_statement statement)
 (import_clause import_clause)
 (_from_clause _from_clause)
 (namespace_import namespace_import)
 (named_imports named_imports)
 (statement statement)
 (expression_statement expression_statement statement)
 (variable_declaration variable_declaration declaration statement)
 (lexical_declaration lexical_declaration declaration statement)
 (variable_declarator variable_declarator)
 (statement_block statement_block statement)
 (else_clause else_clause)
 (if_statement if_statement statement)
 (switch_statement switch_statement statement)
 (for_statement for_statement statement)
 (for_in_statement for_in_statement statement)
 (_for_header _for_header)
 (while_statement while_statement statement)
 (do_statement do_statement statement)
 (try_statement try_statement statement)
 (with_statement with_statement statement)
 (break_statement break_statement statement)
 (continue_statement continue_statement statement)
 (debugger_statement debugger_statement statement)
 (return_statement return_statement statement)
 (throw_statement throw_statement statement)
 (empty_statement empty_statement statement)
 (labeled_statement labeled_statement statement)
 (switch_body switch_body)
 (switch_case switch_case)
 (switch_default switch_default)
 (catch_clause catch_clause)
 (finally_clause finally_clause)
 (parenthesized_expression parenthesized_expression
			   primary_expression
			   expression
			   _expressions
			   _augmented_assignment_lhs)
 (_expressions _expressions)
 (expression expression _expressions)
 (primary_expression primary_expression expression _expressions)
 (yield_expression yield_expression expression _expressions)
 (object object primary_expression expression _expressions)
 (object_pattern object_pattern
		 _lhs_expression
		 _destructuring_pattern
		 pattern
		 _parameter_name)
 (assignment_pattern assignment_pattern)
 (object_assignment_pattern object_assignment_pattern)
 (array array primary_expression expression _expressions)
 (array_pattern array_pattern
		_lhs_expression
		_destructuring_pattern
		pattern
		_parameter_name)
 (_jsx_element _jsx_element)
 (jsx_element jsx_element _jsx_element _jsx_child _jsx_attribute_value)
 (jsx_fragment jsx_fragment _jsx_child _jsx_attribute_value)
 (jsx_text jsx_text _jsx_child)
 (jsx_expression jsx_expression
		 _jsx_child
		 _jsx_attribute
		 _jsx_attribute_value)
 (_jsx_child _jsx_child)
 (jsx_opening_element jsx_opening_element)
 (jsx_identifier jsx_identifier)
 (_jsx_identifier _jsx_identifier)
 (nested_identifier nested_identifier _jsx_element_name _module)
 (jsx_namespace_name jsx_namespace_name
		     _jsx_element_name
		     _jsx_attribute_name)
 (_jsx_element_name _jsx_element_name)
 (jsx_closing_element jsx_closing_element)
 (jsx_self_closing_element jsx_self_closing_element
			   _jsx_element
			   _jsx_child
			   _jsx_attribute_value)
 (_jsx_attribute _jsx_attribute)
 (_jsx_attribute_name _jsx_attribute_name)
 (jsx_attribute jsx_attribute _jsx_attribute)
 (_jsx_attribute_value _jsx_attribute_value)
 (class class primary_expression expression _expressions)
 (class_declaration class_declaration declaration statement)
 (class_heritage class_heritage)
 (function function primary_expression expression _expressions)
 (function_declaration function_declaration declaration statement)
 (generator_function generator_function
		     primary_expression
		     expression
		     _expressions)
 (generator_function_declaration generator_function_declaration
				 declaration
				 statement)
 (arrow_function arrow_function primary_expression expression _expressions)
 (_call_signature _call_signature)
 (_formal_parameter _formal_parameter)
 (call_expression call_expression primary_expression expression _expressions)
 (new_expression new_expression expression _expressions)
 (await_expression await_expression expression _expressions)
 (member_expression member_expression
		    primary_expression
		    expression
		    _expressions
		    _lhs_expression
		    _augmented_assignment_lhs)
 (subscript_expression subscript_expression
		       primary_expression
		       expression
		       _expressions
		       _lhs_expression
		       _augmented_assignment_lhs)
 (_lhs_expression _lhs_expression)
 (assignment_expression assignment_expression expression _expressions)
 (_augmented_assignment_lhs _augmented_assignment_lhs)
 (augmented_assignment_expression augmented_assignment_expression
				  expression
				  _expressions)
 (_initializer _initializer)
 (_destructuring_pattern _destructuring_pattern)
 (spread_element spread_element)
 (ternary_expression ternary_expression expression _expressions)
 (binary_expression binary_expression expression _expressions)
 (unary_expression unary_expression expression _expressions)
 (update_expression update_expression expression _expressions)
 (sequence_expression sequence_expression _expressions)
 (string string
	 primary_expression
	 expression
	 _expressions
	 _jsx_attribute_value
	 _property_name
	 _module)
 (escape_sequence escape_sequence)
 (comment comment)
 (template_string template_string primary_expression expression _expressions)
 (template_substitution template_substitution)
 (regex regex primary_expression expression _expressions)
 (regex_pattern regex_pattern)
 (regex_flags regex_flags)
 (number number primary_expression expression _expressions _property_name)
 (identifier identifier
	     _import_export_specifier
	     primary_expression
	     expression
	     _expressions
	     _jsx_identifier
	     _jsx_element_name
	     _lhs_expression
	     _augmented_assignment_lhs
	     pattern
	     _parameter_name
	     _module)
 (meta_property meta_property primary_expression expression _expressions)
 (this this
       primary_expression
       expression
       _expressions
       _parameter_name
       _type
       _tuple_type_member
       _primary_type)
 (super super primary_expression expression _expressions)
 (true true primary_expression expression _expressions)
 (false false primary_expression expression _expressions)
 (null null primary_expression expression _expressions)
 (undefined undefined primary_expression expression _expressions)
 (arguments arguments)
 (decorator decorator)
 (decorator_member_expression decorator_member_expression)
 (decorator_call_expression decorator_call_expression)
 (class_body class_body)
 (public_field_definition public_field_definition)
 (formal_parameters formal_parameters _call_signature)
 (pattern pattern _parameter_name)
 (rest_pattern rest_pattern pattern _parameter_name)
 (method_definition method_definition)
 (pair pair)
 (pair_pattern pair_pattern)
 (_property_name _property_name)
 (computed_property_name computed_property_name _property_name)
 (_reserved_identifier _reserved_identifier)
 (_semicolon _semicolon)
 (_jsx_start_opening_element _jsx_start_opening_element)
 (non_null_expression non_null_expression
		      primary_expression
		      expression
		      _expressions
		      _lhs_expression
		      _augmented_assignment_lhs)
 (method_signature method_signature)
 (abstract_method_signature abstract_method_signature)
 (function_signature function_signature declaration statement)
 (type_assertion type_assertion expression _expressions)
 (as_expression as_expression expression _expressions)
 (import_require_clause import_require_clause)
 (implements_clause implements_clause)
 (ambient_declaration ambient_declaration declaration statement)
 (abstract_class_declaration abstract_class_declaration
			     declaration
			     statement)
 (module module declaration statement)
 (internal_module internal_module
		  declaration
		  statement
		  expression
		  _expressions)
 (_module _module)
 (import_alias import_alias declaration statement)
 (nested_type_identifier nested_type_identifier
			 _type
			 _tuple_type_member
			 _primary_type)
 (interface_declaration interface_declaration declaration statement)
 (extends_clause extends_clause)
 (enum_declaration enum_declaration declaration statement)
 (enum_body enum_body)
 (enum_assignment enum_assignment)
 (type_alias_declaration type_alias_declaration declaration statement)
 (accessibility_modifier accessibility_modifier)
 (required_parameter required_parameter _formal_parameter _tuple_type_member)
 (optional_parameter optional_parameter _formal_parameter _tuple_type_member)
 (_parameter_name _parameter_name)
 (omitting_type_annotation omitting_type_annotation)
 (opting_type_annotation opting_type_annotation)
 (type_annotation type_annotation)
 (asserts asserts)
 (_type _type)
 (tuple_parameter tuple_parameter)
 (optional_tuple_parameter optional_tuple_parameter)
 (optional_type optional_type _tuple_type_member)
 (rest_type rest_type _tuple_type_member)
 (_tuple_type_member _tuple_type_member)
 (constructor_type constructor_type _type _tuple_type_member)
 (_primary_type _primary_type)
 (infer_type infer_type _type _tuple_type_member)
 (conditional_type conditional_type _type _tuple_type_member _primary_type)
 (generic_type generic_type _type _tuple_type_member _primary_type)
 (type_predicate type_predicate)
 (type_predicate_annotation type_predicate_annotation)
 (type_query type_query _type _tuple_type_member _primary_type)
 (index_type_query index_type_query _type _tuple_type_member _primary_type)
 (lookup_type lookup_type _type _tuple_type_member _primary_type)
 (mapped_type_clause mapped_type_clause)
 (literal_type literal_type _type _tuple_type_member _primary_type)
 (_number _number)
 (existential_type existential_type _type _tuple_type_member _primary_type)
 (flow_maybe_type flow_maybe_type _type _tuple_type_member _primary_type)
 (parenthesized_type parenthesized_type
		     _type
		     _tuple_type_member
		     _primary_type)
 (predefined_type predefined_type _type _tuple_type_member _primary_type)
 (type_arguments type_arguments)
 (object_type object_type _type _tuple_type_member _primary_type)
 (call_signature call_signature)
 (property_signature property_signature)
 (type_parameters type_parameters)
 (type_parameter type_parameter)
 (default_type default_type)
 (constraint constraint)
 (construct_signature construct_signature)
 (index_signature index_signature)
 (array_type array_type _type _tuple_type_member _primary_type)
 (tuple_type tuple_type _type _tuple_type_member _primary_type)
 (readonly_type readonly_type _type _tuple_type_member)
 (union_type union_type _type _tuple_type_member)
 (intersection_type intersection_type _type _tuple_type_member)
 (function_type function_type _type _tuple_type_member)
 (_type_identifier _type_identifier))


 tree-edit--subtypes
 '
((_type_identifier _type_identifier)
 (function_type function_type)
 (intersection_type intersection_type)
 (union_type union_type)
 (readonly_type readonly_type)
 (tuple_type tuple_type)
 (array_type array_type)
 (index_signature index_signature)
 (construct_signature construct_signature)
 (constraint constraint)
 (default_type default_type)
 (type_parameter type_parameter)
 (type_parameters type_parameters)
 (property_signature property_signature)
 (call_signature call_signature)
 (object_type object_type)
 (type_arguments type_arguments)
 (predefined_type predefined_type)
 (parenthesized_type parenthesized_type)
 (flow_maybe_type flow_maybe_type)
 (existential_type existential_type)
 (_number _number)
 (literal_type literal_type)
 (mapped_type_clause mapped_type_clause)
 (lookup_type lookup_type)
 (index_type_query index_type_query)
 (type_query type_query)
 (type_predicate_annotation type_predicate_annotation)
 (type_predicate type_predicate)
 (generic_type generic_type)
 (conditional_type conditional_type)
 (infer_type infer_type)
 (constructor_type constructor_type)
 (rest_type rest_type)
 (optional_type optional_type)
 (optional_tuple_parameter optional_tuple_parameter)
 (tuple_parameter tuple_parameter)
 (asserts asserts)
 (type_annotation type_annotation)
 (opting_type_annotation opting_type_annotation)
 (omitting_type_annotation omitting_type_annotation)
 (optional_parameter optional_parameter)
 (required_parameter required_parameter)
 (accessibility_modifier accessibility_modifier)
 (type_alias_declaration type_alias_declaration)
 (enum_assignment enum_assignment)
 (enum_body enum_body)
 (enum_declaration enum_declaration)
 (extends_clause extends_clause)
 (interface_declaration interface_declaration)
 (nested_type_identifier nested_type_identifier)
 (import_alias import_alias)
 (internal_module internal_module)
 (module module)
 (abstract_class_declaration abstract_class_declaration)
 (ambient_declaration ambient_declaration)
 (implements_clause implements_clause)
 (import_require_clause import_require_clause)
 (as_expression as_expression)
 (type_assertion type_assertion)
 (function_signature function_signature)
 (abstract_method_signature abstract_method_signature)
 (method_signature method_signature)
 (non_null_expression non_null_expression)
 (_jsx_start_opening_element _jsx_start_opening_element)
 (_semicolon _semicolon)
 (_reserved_identifier _reserved_identifier)
 (computed_property_name computed_property_name)
 (pair_pattern pair_pattern)
 (pair pair)
 (method_definition method_definition)
 (rest_pattern rest_pattern)
 (formal_parameters formal_parameters)
 (public_field_definition public_field_definition)
 (class_body class_body)
 (decorator_call_expression decorator_call_expression)
 (decorator_member_expression decorator_member_expression)
 (decorator decorator)
 (arguments arguments)
 (undefined undefined)
 (null null)
 (false false)
 (true true)
 (super super)
 (_primary_type tuple_type
		array_type
		object_type
		predefined_type
		parenthesized_type
		flow_maybe_type
		existential_type
		literal_type
		lookup_type
		index_type_query
		type_query
		generic_type
		conditional_type
		_primary_type
		nested_type_identifier
		this)
 (_tuple_type_member function_type
		     intersection_type
		     union_type
		     readonly_type
		     tuple_type
		     array_type
		     object_type
		     predefined_type
		     parenthesized_type
		     flow_maybe_type
		     existential_type
		     literal_type
		     lookup_type
		     index_type_query
		     type_query
		     generic_type
		     conditional_type
		     infer_type
		     constructor_type
		     _tuple_type_member
		     rest_type
		     optional_type
		     optional_parameter
		     required_parameter
		     nested_type_identifier
		     this)
 (_type function_type
	intersection_type
	union_type
	readonly_type
	tuple_type
	array_type
	object_type
	predefined_type
	parenthesized_type
	flow_maybe_type
	existential_type
	literal_type
	lookup_type
	index_type_query
	type_query
	generic_type
	conditional_type
	infer_type
	constructor_type
	_type
	nested_type_identifier
	this)
 (this this)
 (meta_property meta_property)
 (identifier identifier)
 (number number)
 (regex_flags regex_flags)
 (regex_pattern regex_pattern)
 (regex regex)
 (template_substitution template_substitution)
 (template_string template_string)
 (comment comment)
 (escape_sequence escape_sequence)
 (_property_name computed_property_name _property_name number string)
 (string string)
 (sequence_expression sequence_expression)
 (update_expression update_expression)
 (unary_expression unary_expression)
 (binary_expression binary_expression)
 (ternary_expression ternary_expression)
 (spread_element spread_element)
 (_initializer _initializer)
 (augmented_assignment_expression augmented_assignment_expression)
 (assignment_expression assignment_expression)
 (subscript_expression subscript_expression)
 (member_expression member_expression)
 (await_expression await_expression)
 (new_expression new_expression)
 (call_expression call_expression)
 (_formal_parameter optional_parameter required_parameter _formal_parameter)
 (_call_signature formal_parameters _call_signature)
 (arrow_function arrow_function)
 (generator_function_declaration generator_function_declaration)
 (generator_function generator_function)
 (function_declaration function_declaration)
 #'function
   (class_heritage class_heritage)
   (class_declaration class_declaration)
   (class class)
   (jsx_attribute jsx_attribute)
   (jsx_self_closing_element jsx_self_closing_element)
   (jsx_closing_element jsx_closing_element)
   (_jsx_attribute_name _jsx_attribute_name jsx_namespace_name)
   (jsx_namespace_name jsx_namespace_name)
   (_module _module identifier string nested_identifier)
   (_jsx_element_name identifier
		      _jsx_element_name
		      jsx_namespace_name
		      nested_identifier)
   (nested_identifier nested_identifier)
   (_jsx_identifier identifier _jsx_identifier)
   (jsx_identifier jsx_identifier)
   (jsx_opening_element jsx_opening_element)
   (_jsx_attribute jsx_attribute _jsx_attribute jsx_expression)
   (jsx_expression jsx_expression)
   (jsx_text jsx_text)
   (jsx_fragment jsx_fragment)
   (_jsx_attribute_value string
			 _jsx_attribute_value
			 jsx_self_closing_element
			 jsx_expression
			 jsx_fragment
			 jsx_element)
   (_jsx_child jsx_self_closing_element
	       _jsx_child
	       jsx_expression
	       jsx_text
	       jsx_fragment
	       jsx_element)
   (jsx_element jsx_element)
   (_jsx_element jsx_self_closing_element jsx_element _jsx_element)
   (array_pattern array_pattern)
   (array array)
   (object_assignment_pattern object_assignment_pattern)
   (assignment_pattern assignment_pattern)
   (_parameter_name _parameter_name
		    rest_pattern
		    pattern
		    this
		    identifier
		    array_pattern
		    object_pattern)
   (pattern rest_pattern pattern identifier array_pattern object_pattern)
   (_destructuring_pattern _destructuring_pattern
			   array_pattern
			   object_pattern)
   (_lhs_expression non_null_expression
		    identifier
		    _lhs_expression
		    subscript_expression
		    member_expression
		    array_pattern
		    object_pattern)
   (object_pattern object_pattern)
   (object object)
   (yield_expression yield_expression)
   (_augmented_assignment_lhs non_null_expression
			      identifier
			      _augmented_assignment_lhs
			      subscript_expression
			      member_expression
			      parenthesized_expression)
   (parenthesized_expression parenthesized_expression)
   (finally_clause finally_clause)
   (catch_clause catch_clause)
   (switch_default switch_default)
   (switch_case switch_case)
   (switch_body switch_body)
   (labeled_statement labeled_statement)
   (empty_statement empty_statement)
   (throw_statement throw_statement)
   (return_statement return_statement)
   (debugger_statement debugger_statement)
   (continue_statement continue_statement)
   (break_statement break_statement)
   (with_statement with_statement)
   (try_statement try_statement)
   (do_statement do_statement)
   (while_statement while_statement)
   (_for_header _for_header)
   (for_in_statement for_in_statement)
   (for_statement for_statement)
   (switch_statement switch_statement)
   (if_statement if_statement)
   (else_clause else_clause)
   (statement_block statement_block)
   (variable_declarator variable_declarator)
   (lexical_declaration lexical_declaration)
   (variable_declaration variable_declaration)
   (expression_statement expression_statement)
   (named_imports named_imports)
   (namespace_import namespace_import)
   (_from_clause _from_clause)
   (import_clause import_clause)
   (import_statement import_statement)
   (_expressions internal_module
		 as_expression
		 type_assertion
		 non_null_expression
		 undefined
		 null
		 false
		 true
		 super
		 this
		 meta_property
		 identifier
		 number
		 regex
		 template_string
		 string
		 sequence_expression
		 update_expression
		 unary_expression
		 binary_expression
		 ternary_expression
		 augmented_assignment_expression
		 assignment_expression
		 subscript_expression
		 member_expression
		 await_expression
		 new_expression
		 call_expression
		 arrow_function
		 generator_function
		 function
		 class
		 array
		 object
		 yield_expression
		 primary_expression
		 expression
		 _expressions
		 parenthesized_expression
		 import)
   (expression internal_module
	       as_expression
	       type_assertion
	       non_null_expression
	       undefined
	       null
	       false
	       true
	       super
	       this
	       meta_property
	       identifier
	       number
	       regex
	       template_string
	       string
	       update_expression
	       unary_expression
	       binary_expression
	       ternary_expression
	       augmented_assignment_expression
	       assignment_expression
	       subscript_expression
	       member_expression
	       await_expression
	       new_expression
	       call_expression
	       arrow_function
	       generator_function
	       function
	       class
	       array
	       object
	       yield_expression
	       primary_expression
	       expression
	       parenthesized_expression
	       import)
   (primary_expression non_null_expression
		       undefined
		       null
		       false
		       true
		       super
		       this
		       meta_property
		       identifier
		       number
		       regex
		       template_string
		       string
		       subscript_expression
		       member_expression
		       call_expression
		       arrow_function
		       generator_function
		       function
		       class
		       array
		       object
		       primary_expression
		       parenthesized_expression
		       import)
   (import import)
   (declaration type_alias_declaration
		enum_declaration
		interface_declaration
		import_alias
		internal_module
		module
		abstract_class_declaration
		ambient_declaration
		function_signature
		generator_function_declaration
		function_declaration
		class_declaration
		lexical_declaration
		variable_declaration
		declaration)
   (_import_export_specifier identifier _import_export_specifier)
   (export_clause export_clause)
   (statement type_alias_declaration
	      enum_declaration
	      interface_declaration
	      import_alias
	      internal_module
	      module
	      abstract_class_declaration
	      ambient_declaration
	      function_signature
	      generator_function_declaration
	      function_declaration
	      class_declaration
	      labeled_statement
	      empty_statement
	      throw_statement
	      return_statement
	      debugger_statement
	      continue_statement
	      break_statement
	      with_statement
	      try_statement
	      do_statement
	      while_statement
	      for_in_statement
	      for_statement
	      switch_statement
	      if_statement
	      statement_block
	      lexical_declaration
	      variable_declaration
	      expression_statement
	      statement
	      import_statement
	      declaration
	      export_statement)
   (export_statement export_statement)
   (hash_bang_line hash_bang_line)
   (program
    program))


 tree-edit--alias-map
 '
((program)
 (hash_bang_line)
 (export_statement)
 (export_clause)
 (_import_export_specifier)
 (declaration)
 (import)
 (import_statement)
 (import_clause)
 (_from_clause)
 (namespace_import)
 (named_imports)
 (statement)
 (expression_statement)
 (variable_declaration)
 (lexical_declaration)
 (variable_declarator)
 (statement_block)
 (else_clause)
 (if_statement)
 (switch_statement)
 (for_statement)
 (for_in_statement)
 (_for_header)
 (while_statement)
 (do_statement)
 (try_statement)
 (with_statement)
 (break_statement (identifier . statement_identifier))
 (continue_statement (identifier . statement_identifier))
 (debugger_statement)
 (return_statement)
 (throw_statement)
 (empty_statement)
 (labeled_statement)
 (switch_body)
 (switch_case)
 (switch_default)
 (catch_clause)
 (finally_clause)
 (parenthesized_expression)
 (_expressions)
 (expression)
 (primary_expression)
 (yield_expression)
 (object)
 (object_pattern)
 (assignment_pattern)
 (object_assignment_pattern)
 (array)
 (array_pattern)
 (_jsx_element)
 (jsx_element)
 (jsx_fragment)
 (jsx_text)
 (jsx_expression)
 (_jsx_child)
 (jsx_opening_element (jsx_identifier . identifier))
 (jsx_identifier)
 (_jsx_identifier (jsx_identifier . identifier))
 (nested_identifier)
 (jsx_namespace_name (jsx_identifier . identifier)
		     (jsx_identifier . identifier))
 (_jsx_element_name (jsx_identifier . identifier))
 (jsx_closing_element (jsx_identifier . identifier))
 (jsx_self_closing_element (jsx_identifier . identifier))
 (_jsx_attribute)
 (_jsx_attribute_name)
 (jsx_attribute)
 (_jsx_attribute_value)
 (class (identifier . type_identifier))
 (class_declaration (identifier . type_identifier))
 (class_heritage)
 (function)
 (function_declaration)
 (generator_function)
 (generator_function_declaration)
 (arrow_function)
 (_call_signature)
 (_formal_parameter)
 (call_expression)
 (new_expression)
 (await_expression)
 (member_expression (identifier . property_identifier))
 (subscript_expression)
 (_lhs_expression)
 (assignment_expression)
 (_augmented_assignment_lhs)
 (augmented_assignment_expression)
 (_initializer)
 (_destructuring_pattern)
 (spread_element)
 (ternary_expression)
 (binary_expression)
 (unary_expression)
 (update_expression)
 (sequence_expression)
 (string)
 (escape_sequence)
 (comment)
 (template_string)
 (template_substitution)
 (regex)
 (regex_pattern)
 (regex_flags)
 (number)
 (identifier)
 (meta_property)
 (this)
 (super)
 (true)
 (false)
 (null)
 (undefined)
 (arguments)
 (decorator (decorator_member_expression . member_expression)
	    (decorator_call_expression . call_expression))
 (decorator_member_expression (decorator_member_expression . member_expression)
			      (identifier . property_identifier))
 (decorator_call_expression (decorator_member_expression . member_expression))
 (class_body)
 (public_field_definition)
 (formal_parameters)
 (pattern)
 (rest_pattern)
 (method_definition)
 (pair)
 (pair_pattern)
 (_property_name)
 (computed_property_name)
 (_reserved_identifier)
 (_semicolon)
 (_jsx_start_opening_element (jsx_identifier . identifier))
 (non_null_expression)
 (method_signature)
 (abstract_method_signature)
 (function_signature)
 (type_assertion)
 (as_expression (identifier . type_identifier))
 (import_require_clause)
 (implements_clause (identifier . type_identifier)
		    (identifier . type_identifier))
 (ambient_declaration (identifier . property_identifier)
		      (identifier . type_identifier))
 (abstract_class_declaration (identifier . type_identifier))
 (module)
 (internal_module)
 (_module)
 (import_alias)
 (nested_type_identifier (identifier . type_identifier))
 (interface_declaration (identifier . type_identifier))
 (extends_clause (identifier . type_identifier)
		 (identifier . type_identifier))
 (enum_declaration)
 (enum_body)
 (enum_assignment)
 (type_alias_declaration (identifier . type_identifier)
			 (identifier . type_identifier))
 (accessibility_modifier)
 (required_parameter)
 (optional_parameter)
 (_parameter_name)
 (omitting_type_annotation (identifier . type_identifier))
 (opting_type_annotation (identifier . type_identifier))
 (type_annotation (identifier . type_identifier))
 (asserts)
 (_type (identifier . type_identifier))
 (tuple_parameter)
 (optional_tuple_parameter)
 (optional_type (identifier . type_identifier))
 (rest_type (identifier . type_identifier))
 (_tuple_type_member (tuple_parameter . required_parameter)
		     (optional_tuple_parameter . optional_parameter)
		     (identifier . type_identifier))
 (constructor_type (identifier . type_identifier))
 (_primary_type (identifier . type_identifier))
 (infer_type (identifier . type_identifier))
 (conditional_type (identifier . type_identifier)
		   (identifier . type_identifier)
		   (identifier . type_identifier)
		   (identifier . type_identifier))
 (generic_type (identifier . type_identifier))
 (type_predicate (identifier . type_identifier))
 (type_predicate_annotation)
 (type_query)
 (index_type_query (identifier . type_identifier))
 (lookup_type (identifier . type_identifier) (identifier . type_identifier))
 (mapped_type_clause (identifier . type_identifier)
		     (identifier . type_identifier))
 (literal_type)
 (_number)
 (existential_type)
 (flow_maybe_type (identifier . type_identifier))
 (parenthesized_type (identifier . type_identifier))
 (predefined_type)
 (type_arguments (identifier . type_identifier)
		 (identifier . type_identifier))
 (object_type)
 (call_signature)
 (property_signature)
 (type_parameters)
 (type_parameter (identifier . type_identifier))
 (default_type (identifier . type_identifier))
 (constraint (identifier . type_identifier))
 (construct_signature)
 (index_signature (identifier . type_identifier))
 (array_type (identifier . type_identifier))
 (tuple_type (tuple_parameter . required_parameter)
	     (optional_tuple_parameter . optional_parameter)
	     (identifier . type_identifier)
	     (tuple_parameter . required_parameter)
	     (optional_tuple_parameter . optional_parameter)
	     (identifier . type_identifier))
 (readonly_type (identifier . type_identifier))
 (union_type (identifier . type_identifier) (identifier . type_identifier))
 (intersection_type (identifier . type_identifier)
		    (identifier . type_identifier))
 (function_type (identifier . type_identifier))
 (_type_identifier (identifier . type_identifier)))


 tree-edit--containing-types
 '
((program
  hash_bang_line
  statement)
 (hash_bang_line)
 (export_statement string
		   _automatic_semicolon
		   export_clause
		   string
		   _automatic_semicolon
		   export_clause
		   _automatic_semicolon
		   decorator
		   declaration
		   expression
		   _automatic_semicolon
		   identifier
		   _automatic_semicolon
		   identifier
		   _automatic_semicolon
		   function_signature)
 (export_clause export_specifier export_specifier)
 (_import_export_specifier identifier identifier)
 (declaration function_declaration
	      generator_function_declaration
	      class_declaration
	      lexical_declaration
	      variable_declaration
	      function_signature
	      abstract_class_declaration
	      module
	      internal_module
	      type_alias_declaration
	      enum_declaration
	      interface_declaration
	      import_alias
	      ambient_declaration)
 (import)
 (import_statement import_clause
		   string
		   import_require_clause
		   string
		   _automatic_semicolon)
 (import_clause namespace_import
		named_imports
		identifier
		namespace_import
		named_imports)
 (_from_clause string)
 (namespace_import identifier)
 (named_imports import_specifier import_specifier)
 (statement export_statement
	    import_statement
	    debugger_statement
	    expression_statement
	    declaration
	    statement_block
	    if_statement
	    switch_statement
	    for_statement
	    for_in_statement
	    while_statement
	    do_statement
	    try_statement
	    with_statement
	    break_statement
	    continue_statement
	    return_statement
	    throw_statement
	    empty_statement
	    labeled_statement)
 (expression_statement expression sequence_expression _automatic_semicolon)
 (variable_declaration variable_declarator
		       variable_declarator
		       _automatic_semicolon)
 (lexical_declaration variable_declarator
		      variable_declarator
		      _automatic_semicolon)
 (variable_declarator identifier
		      object_pattern
		      array_pattern
		      type_annotation
		      expression
		      identifier
		      type_annotation)
 (statement_block statement _automatic_semicolon)
 (else_clause statement)
 (if_statement parenthesized_expression statement else_clause)
 (switch_statement parenthesized_expression switch_body)
 (for_statement lexical_declaration
		variable_declaration
		expression_statement
		empty_statement
		expression_statement
		empty_statement
		expression
		sequence_expression
		statement)
 (for_in_statement member_expression
		   subscript_expression
		   identifier
		   identifier
		   object_pattern
		   array_pattern
		   non_null_expression
		   parenthesized_expression
		   identifier
		   object_pattern
		   array_pattern
		   expression
		   sequence_expression
		   statement)
 (_for_header member_expression
	      subscript_expression
	      identifier
	      identifier
	      object_pattern
	      array_pattern
	      non_null_expression
	      parenthesized_expression
	      identifier
	      object_pattern
	      array_pattern
	      expression
	      sequence_expression)
 (while_statement parenthesized_expression statement)
 (do_statement statement parenthesized_expression _automatic_semicolon)
 (try_statement statement_block catch_clause finally_clause)
 (with_statement parenthesized_expression statement)
 (break_statement statement_identifier _automatic_semicolon)
 (continue_statement statement_identifier _automatic_semicolon)
 (debugger_statement _automatic_semicolon)
 (return_statement expression sequence_expression _automatic_semicolon)
 (throw_statement expression sequence_expression _automatic_semicolon)
 (empty_statement)
 (labeled_statement statement_identifier statement)
 (switch_body switch_case switch_default)
 (switch_case expression sequence_expression statement)
 (switch_default statement)
 (catch_clause identifier object_pattern array_pattern statement_block)
 (finally_clause statement_block)
 (parenthesized_expression expression type_annotation sequence_expression)
 (_expressions expression sequence_expression)
 (expression as_expression
	     internal_module
	     type_assertion
	     primary_expression
	     assignment_expression
	     augmented_assignment_expression
	     await_expression
	     unary_expression
	     binary_expression
	     ternary_expression
	     update_expression
	     new_expression
	     yield_expression)
 (primary_expression subscript_expression
		     member_expression
		     parenthesized_expression
		     identifier
		     identifier
		     this
		     super
		     number
		     string
		     template_string
		     regex
		     true
		     false
		     null
		     undefined
		     import
		     object
		     array
		     function
		     arrow_function
		     generator_function
		     class
		     meta_property
		     call_expression
		     non_null_expression)
 (yield_expression expression expression)
 (object pair
	 spread_element
	 method_definition
	 shorthand_property_identifier
	 pair
	 spread_element
	 method_definition
	 shorthand_property_identifier)
 (object_pattern pair_pattern
		 rest_pattern
		 object_assignment_pattern
		 shorthand_property_identifier_pattern
		 pair_pattern
		 rest_pattern
		 object_assignment_pattern
		 shorthand_property_identifier_pattern)
 (assignment_pattern pattern expression)
 (object_assignment_pattern shorthand_property_identifier_pattern
			    object_pattern
			    array_pattern
			    expression)
 (array expression spread_element expression spread_element)
 (array_pattern pattern assignment_pattern pattern assignment_pattern)
 (_jsx_element jsx_element jsx_self_closing_element)
 (jsx_element jsx_opening_element
	      jsx_text
	      jsx_element
	      jsx_self_closing_element
	      jsx_fragment
	      jsx_expression
	      jsx_closing_element)
 (jsx_fragment jsx_text
	       jsx_element
	       jsx_self_closing_element
	       jsx_fragment
	       jsx_expression)
 (jsx_text)
 (jsx_expression expression sequence_expression spread_element)
 (_jsx_child jsx_text
	     jsx_element
	     jsx_self_closing_element
	     jsx_fragment
	     jsx_expression)
 (jsx_opening_element identifier
		      identifier
		      jsx_namespace_name
		      identifier
		      nested_identifier
		      type_arguments
		      jsx_attribute
		      jsx_expression)
 (jsx_identifier)
 (_jsx_identifier identifier identifier)
 (nested_identifier identifier nested_identifier identifier)
 (jsx_namespace_name identifier identifier identifier identifier)
 (_jsx_element_name identifier
		    identifier
		    nested_identifier
		    jsx_namespace_name)
 (jsx_closing_element identifier
		      identifier
		      nested_identifier
		      jsx_namespace_name)
 (jsx_self_closing_element identifier
			   identifier
			   jsx_namespace_name
			   identifier
			   nested_identifier
			   type_arguments
			   jsx_attribute
			   jsx_expression)
 (_jsx_attribute jsx_attribute jsx_expression)
 (_jsx_attribute_name property_identifier jsx_namespace_name)
 (jsx_attribute property_identifier
		jsx_namespace_name
		string
		jsx_expression
		jsx_element
		jsx_self_closing_element
		jsx_fragment)
 (_jsx_attribute_value string
		       jsx_expression
		       jsx_element
		       jsx_self_closing_element
		       jsx_fragment)
 (class decorator type_identifier type_parameters class_heritage class_body)
 (class_declaration decorator
		    type_identifier
		    type_parameters
		    class_heritage
		    class_body
		    _automatic_semicolon)
 (class_heritage extends_clause implements_clause implements_clause)
 (function identifier
	   type_parameters
	   formal_parameters
	   type_annotation
	   asserts
	   type_predicate_annotation
	   statement_block)
 (function_declaration identifier
		       type_parameters
		       formal_parameters
		       type_annotation
		       asserts
		       type_predicate_annotation
		       statement_block
		       _automatic_semicolon)
 (generator_function identifier
		     type_parameters
		     formal_parameters
		     type_annotation
		     asserts
		     type_predicate_annotation
		     statement_block)
 (generator_function_declaration identifier
				 type_parameters
				 formal_parameters
				 type_annotation
				 asserts
				 type_predicate_annotation
				 statement_block
				 _automatic_semicolon)
 (arrow_function identifier
		 identifier
		 type_parameters
		 formal_parameters
		 type_annotation
		 asserts
		 type_predicate_annotation
		 expression
		 statement_block)
 (_call_signature type_parameters
		  formal_parameters
		  type_annotation
		  asserts
		  type_predicate_annotation)
 (_formal_parameter required_parameter optional_parameter)
 (call_expression expression
		  type_arguments
		  arguments
		  template_string
		  primary_expression
		  type_arguments
		  arguments)
 (new_expression primary_expression type_arguments arguments)
 (await_expression expression)
 (member_expression expression primary_expression property_identifier)
 (subscript_expression expression
		       primary_expression
		       expression
		       sequence_expression)
 (_lhs_expression member_expression
		  subscript_expression
		  identifier
		  identifier
		  object_pattern
		  array_pattern
		  non_null_expression)
 (assignment_expression parenthesized_expression
			member_expression
			subscript_expression
			identifier
			identifier
			object_pattern
			array_pattern
			non_null_expression
			expression)
 (_augmented_assignment_lhs member_expression
			    subscript_expression
			    identifier
			    identifier
			    parenthesized_expression
			    non_null_expression)
 (augmented_assignment_expression member_expression
				  subscript_expression
				  identifier
				  identifier
				  parenthesized_expression
				  non_null_expression
				  expression)
 (_initializer expression)
 (_destructuring_pattern object_pattern array_pattern)
 (spread_element expression)
 (ternary_expression expression expression expression)
 (binary_expression expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression
		    expression)
 (unary_expression expression
		   expression
		   expression
		   expression
		   expression
		   expression
		   expression)
 (update_expression expression expression)
 (sequence_expression expression sequence_expression expression)
 (string escape_sequence escape_sequence)
 (escape_sequence)
 (comment)
 (template_string _template_chars escape_sequence template_substitution)
 (template_substitution expression sequence_expression)
 (regex regex_pattern regex_flags)
 (regex_pattern)
 (regex_flags)
 (number)
 (identifier)
 (meta_property)
 (this)
 (super)
 (true)
 (false)
 (null)
 (undefined)
 (arguments expression spread_element expression spread_element)
 (decorator identifier member_expression call_expression)
 (decorator_member_expression identifier
			      member_expression
			      property_identifier)
 (decorator_call_expression identifier member_expression arguments)
 (class_body decorator
	     method_definition
	     _automatic_semicolon
	     abstract_method_signature
	     index_signature
	     method_signature
	     public_field_definition
	     _automatic_semicolon)
 (public_field_definition accessibility_modifier
			  property_identifier
			  string
			  number
			  computed_property_name
			  type_annotation
			  expression)
 (formal_parameters required_parameter
		    optional_parameter
		    required_parameter
		    optional_parameter)
 (pattern identifier identifier object_pattern array_pattern rest_pattern)
 (rest_pattern identifier object_pattern array_pattern)
 (method_definition accessibility_modifier
		    property_identifier
		    string
		    number
		    computed_property_name
		    type_parameters
		    formal_parameters
		    type_annotation
		    asserts
		    type_predicate_annotation
		    statement_block)
 (pair property_identifier string number computed_property_name expression)
 (pair_pattern property_identifier
	       string
	       number
	       computed_property_name
	       pattern)
 (_property_name property_identifier string number computed_property_name)
 (computed_property_name expression)
 (_reserved_identifier)
 (_semicolon _automatic_semicolon)
 (_jsx_start_opening_element identifier
			     identifier
			     jsx_namespace_name
			     identifier
			     nested_identifier
			     type_arguments
			     jsx_attribute
			     jsx_expression)
 (non_null_expression expression)
 (method_signature accessibility_modifier
		   property_identifier
		   string
		   number
		   computed_property_name
		   type_parameters
		   formal_parameters
		   type_annotation
		   asserts
		   type_predicate_annotation)
 (abstract_method_signature accessibility_modifier
			    property_identifier
			    string
			    number
			    computed_property_name
			    type_parameters
			    formal_parameters
			    type_annotation
			    asserts
			    type_predicate_annotation)
 (function_signature identifier
		     type_parameters
		     formal_parameters
		     type_annotation
		     asserts
		     type_predicate_annotation
		     _automatic_semicolon
		     _function_signature_automatic_semicolon)
 (type_assertion type_arguments expression)
 (as_expression expression
		parenthesized_type
		predefined_type
		type_identifier
		nested_type_identifier
		generic_type
		object_type
		array_type
		tuple_type
		flow_maybe_type
		type_query
		index_type_query
		this
		existential_type
		literal_type
		lookup_type
		conditional_type
		union_type
		intersection_type
		function_type
		readonly_type
		constructor_type
		infer_type
		template_string)
 (import_require_clause identifier string)
 (implements_clause parenthesized_type
		    predefined_type
		    type_identifier
		    nested_type_identifier
		    generic_type
		    object_type
		    array_type
		    tuple_type
		    flow_maybe_type
		    type_query
		    index_type_query
		    this
		    existential_type
		    literal_type
		    lookup_type
		    conditional_type
		    union_type
		    intersection_type
		    function_type
		    readonly_type
		    constructor_type
		    infer_type
		    parenthesized_type
		    predefined_type
		    type_identifier
		    nested_type_identifier
		    generic_type
		    object_type
		    array_type
		    tuple_type
		    flow_maybe_type
		    type_query
		    index_type_query
		    this
		    existential_type
		    literal_type
		    lookup_type
		    conditional_type
		    union_type
		    intersection_type
		    function_type
		    readonly_type
		    constructor_type
		    infer_type)
 (ambient_declaration declaration
		      statement_block
		      property_identifier
		      parenthesized_type
		      predefined_type
		      type_identifier
		      nested_type_identifier
		      generic_type
		      object_type
		      array_type
		      tuple_type
		      flow_maybe_type
		      type_query
		      index_type_query
		      this
		      existential_type
		      literal_type
		      lookup_type
		      conditional_type
		      union_type
		      intersection_type
		      function_type
		      readonly_type
		      constructor_type
		      infer_type
		      _automatic_semicolon)
 (abstract_class_declaration decorator
			     type_identifier
			     type_parameters
			     class_heritage
			     class_body)
 (module string identifier nested_identifier statement_block)
 (internal_module string identifier nested_identifier statement_block)
 (_module string identifier nested_identifier statement_block)
 (import_alias identifier identifier nested_identifier _automatic_semicolon)
 (nested_type_identifier identifier nested_identifier type_identifier)
 (interface_declaration type_identifier
			type_parameters
			extends_clause
			object_type)
 (extends_clause type_identifier
		 nested_type_identifier
		 generic_type
		 expression
		 type_identifier
		 nested_type_identifier
		 generic_type
		 expression)
 (enum_declaration identifier enum_body)
 (enum_body property_identifier
	    string
	    number
	    computed_property_name
	    enum_assignment
	    property_identifier
	    string
	    number
	    computed_property_name
	    enum_assignment)
 (enum_assignment property_identifier
		  string
		  number
		  computed_property_name
		  expression)
 (type_alias_declaration type_identifier
			 type_parameters
			 parenthesized_type
			 predefined_type
			 type_identifier
			 nested_type_identifier
			 generic_type
			 object_type
			 array_type
			 tuple_type
			 flow_maybe_type
			 type_query
			 index_type_query
			 this
			 existential_type
			 literal_type
			 lookup_type
			 conditional_type
			 union_type
			 intersection_type
			 function_type
			 readonly_type
			 constructor_type
			 infer_type
			 _automatic_semicolon)
 (accessibility_modifier)
 (required_parameter decorator
		     accessibility_modifier
		     pattern
		     this
		     type_annotation
		     expression)
 (optional_parameter decorator
		     accessibility_modifier
		     pattern
		     this
		     type_annotation
		     expression)
 (_parameter_name decorator accessibility_modifier pattern this)
 (omitting_type_annotation parenthesized_type
			   predefined_type
			   type_identifier
			   nested_type_identifier
			   generic_type
			   object_type
			   array_type
			   tuple_type
			   flow_maybe_type
			   type_query
			   index_type_query
			   this
			   existential_type
			   literal_type
			   lookup_type
			   conditional_type
			   union_type
			   intersection_type
			   function_type
			   readonly_type
			   constructor_type
			   infer_type)
 (opting_type_annotation parenthesized_type
			 predefined_type
			 type_identifier
			 nested_type_identifier
			 generic_type
			 object_type
			 array_type
			 tuple_type
			 flow_maybe_type
			 type_query
			 index_type_query
			 this
			 existential_type
			 literal_type
			 lookup_type
			 conditional_type
			 union_type
			 intersection_type
			 function_type
			 readonly_type
			 constructor_type
			 infer_type)
 (type_annotation parenthesized_type
		  predefined_type
		  type_identifier
		  nested_type_identifier
		  generic_type
		  object_type
		  array_type
		  tuple_type
		  flow_maybe_type
		  type_query
		  index_type_query
		  this
		  existential_type
		  literal_type
		  lookup_type
		  conditional_type
		  union_type
		  intersection_type
		  function_type
		  readonly_type
		  constructor_type
		  infer_type)
 (asserts type_predicate identifier this)
 (_type parenthesized_type
	predefined_type
	type_identifier
	nested_type_identifier
	generic_type
	object_type
	array_type
	tuple_type
	flow_maybe_type
	type_query
	index_type_query
	this
	existential_type
	literal_type
	lookup_type
	conditional_type
	union_type
	intersection_type
	function_type
	readonly_type
	constructor_type
	infer_type)
 (tuple_parameter identifier rest_pattern type_annotation)
 (optional_tuple_parameter identifier type_annotation)
 (optional_type parenthesized_type
		predefined_type
		type_identifier
		nested_type_identifier
		generic_type
		object_type
		array_type
		tuple_type
		flow_maybe_type
		type_query
		index_type_query
		this
		existential_type
		literal_type
		lookup_type
		conditional_type
		union_type
		intersection_type
		function_type
		readonly_type
		constructor_type
		infer_type)
 (rest_type parenthesized_type
	    predefined_type
	    type_identifier
	    nested_type_identifier
	    generic_type
	    object_type
	    array_type
	    tuple_type
	    flow_maybe_type
	    type_query
	    index_type_query
	    this
	    existential_type
	    literal_type
	    lookup_type
	    conditional_type
	    union_type
	    intersection_type
	    function_type
	    readonly_type
	    constructor_type
	    infer_type)
 (_tuple_type_member required_parameter
		     optional_parameter
		     optional_type
		     rest_type
		     parenthesized_type
		     predefined_type
		     type_identifier
		     nested_type_identifier
		     generic_type
		     object_type
		     array_type
		     tuple_type
		     flow_maybe_type
		     type_query
		     index_type_query
		     this
		     existential_type
		     literal_type
		     lookup_type
		     conditional_type
		     union_type
		     intersection_type
		     function_type
		     readonly_type
		     constructor_type
		     infer_type)
 (constructor_type type_parameters
		   formal_parameters
		   parenthesized_type
		   predefined_type
		   type_identifier
		   nested_type_identifier
		   generic_type
		   object_type
		   array_type
		   tuple_type
		   flow_maybe_type
		   type_query
		   index_type_query
		   this
		   existential_type
		   literal_type
		   lookup_type
		   conditional_type
		   union_type
		   intersection_type
		   function_type
		   readonly_type
		   constructor_type
		   infer_type)
 (_primary_type parenthesized_type
		predefined_type
		type_identifier
		nested_type_identifier
		generic_type
		object_type
		array_type
		tuple_type
		flow_maybe_type
		type_query
		index_type_query
		this
		existential_type
		literal_type
		lookup_type
		conditional_type)
 (infer_type type_identifier)
 (conditional_type parenthesized_type
		   predefined_type
		   type_identifier
		   nested_type_identifier
		   generic_type
		   object_type
		   array_type
		   tuple_type
		   flow_maybe_type
		   type_query
		   index_type_query
		   this
		   existential_type
		   literal_type
		   lookup_type
		   conditional_type
		   union_type
		   intersection_type
		   function_type
		   readonly_type
		   constructor_type
		   infer_type
		   parenthesized_type
		   predefined_type
		   type_identifier
		   nested_type_identifier
		   generic_type
		   object_type
		   array_type
		   tuple_type
		   flow_maybe_type
		   type_query
		   index_type_query
		   this
		   existential_type
		   literal_type
		   lookup_type
		   conditional_type
		   union_type
		   intersection_type
		   function_type
		   readonly_type
		   constructor_type
		   infer_type
		   parenthesized_type
		   predefined_type
		   type_identifier
		   nested_type_identifier
		   generic_type
		   object_type
		   array_type
		   tuple_type
		   flow_maybe_type
		   type_query
		   index_type_query
		   this
		   existential_type
		   literal_type
		   lookup_type
		   conditional_type
		   union_type
		   intersection_type
		   function_type
		   readonly_type
		   constructor_type
		   infer_type
		   parenthesized_type
		   predefined_type
		   type_identifier
		   nested_type_identifier
		   generic_type
		   object_type
		   array_type
		   tuple_type
		   flow_maybe_type
		   type_query
		   index_type_query
		   this
		   existential_type
		   literal_type
		   lookup_type
		   conditional_type
		   union_type
		   intersection_type
		   function_type
		   readonly_type
		   constructor_type
		   infer_type)
 (generic_type type_identifier nested_type_identifier type_arguments)
 (type_predicate identifier
		 this
		 parenthesized_type
		 predefined_type
		 type_identifier
		 nested_type_identifier
		 generic_type
		 object_type
		 array_type
		 tuple_type
		 flow_maybe_type
		 type_query
		 index_type_query
		 this
		 existential_type
		 literal_type
		 lookup_type
		 conditional_type
		 union_type
		 intersection_type
		 function_type
		 readonly_type
		 constructor_type
		 infer_type)
 (type_predicate_annotation type_predicate)
 (type_query primary_expression generic_type)
 (index_type_query generic_type
		   type_identifier
		   nested_type_identifier
		   type_query)
 (lookup_type parenthesized_type
	      predefined_type
	      type_identifier
	      nested_type_identifier
	      generic_type
	      object_type
	      array_type
	      tuple_type
	      flow_maybe_type
	      type_query
	      index_type_query
	      this
	      existential_type
	      literal_type
	      lookup_type
	      conditional_type
	      parenthesized_type
	      predefined_type
	      type_identifier
	      nested_type_identifier
	      generic_type
	      object_type
	      array_type
	      tuple_type
	      flow_maybe_type
	      type_query
	      index_type_query
	      this
	      existential_type
	      literal_type
	      lookup_type
	      conditional_type
	      union_type
	      intersection_type
	      function_type
	      readonly_type
	      constructor_type
	      infer_type)
 (mapped_type_clause type_identifier
		     parenthesized_type
		     predefined_type
		     type_identifier
		     nested_type_identifier
		     generic_type
		     object_type
		     array_type
		     tuple_type
		     flow_maybe_type
		     type_query
		     index_type_query
		     this
		     existential_type
		     literal_type
		     lookup_type
		     conditional_type
		     union_type
		     intersection_type
		     function_type
		     readonly_type
		     constructor_type
		     infer_type)
 (literal_type unary_expression number string true false)
 (_number number)
 (existential_type)
 (flow_maybe_type parenthesized_type
		  predefined_type
		  type_identifier
		  nested_type_identifier
		  generic_type
		  object_type
		  array_type
		  tuple_type
		  flow_maybe_type
		  type_query
		  index_type_query
		  this
		  existential_type
		  literal_type
		  lookup_type
		  conditional_type)
 (parenthesized_type parenthesized_type
		     predefined_type
		     type_identifier
		     nested_type_identifier
		     generic_type
		     object_type
		     array_type
		     tuple_type
		     flow_maybe_type
		     type_query
		     index_type_query
		     this
		     existential_type
		     literal_type
		     lookup_type
		     conditional_type
		     union_type
		     intersection_type
		     function_type
		     readonly_type
		     constructor_type
		     infer_type)
 (predefined_type)
 (type_arguments parenthesized_type
		 predefined_type
		 type_identifier
		 nested_type_identifier
		 generic_type
		 object_type
		 array_type
		 tuple_type
		 flow_maybe_type
		 type_query
		 index_type_query
		 this
		 existential_type
		 literal_type
		 lookup_type
		 conditional_type
		 union_type
		 intersection_type
		 function_type
		 readonly_type
		 constructor_type
		 infer_type
		 parenthesized_type
		 predefined_type
		 type_identifier
		 nested_type_identifier
		 generic_type
		 object_type
		 array_type
		 tuple_type
		 flow_maybe_type
		 type_query
		 index_type_query
		 this
		 existential_type
		 literal_type
		 lookup_type
		 conditional_type
		 union_type
		 intersection_type
		 function_type
		 readonly_type
		 constructor_type
		 infer_type)
 (object_type export_statement
	      property_signature
	      call_signature
	      construct_signature
	      index_signature
	      method_signature
	      _automatic_semicolon
	      export_statement
	      property_signature
	      call_signature
	      construct_signature
	      index_signature
	      method_signature
	      _automatic_semicolon)
 (call_signature type_parameters
		 formal_parameters
		 type_annotation
		 asserts
		 type_predicate_annotation)
 (property_signature accessibility_modifier
		     property_identifier
		     string
		     number
		     computed_property_name
		     type_annotation)
 (type_parameters type_parameter type_parameter)
 (type_parameter type_identifier constraint default_type)
 (default_type parenthesized_type
	       predefined_type
	       type_identifier
	       nested_type_identifier
	       generic_type
	       object_type
	       array_type
	       tuple_type
	       flow_maybe_type
	       type_query
	       index_type_query
	       this
	       existential_type
	       literal_type
	       lookup_type
	       conditional_type
	       union_type
	       intersection_type
	       function_type
	       readonly_type
	       constructor_type
	       infer_type)
 (constraint parenthesized_type
	     predefined_type
	     type_identifier
	     nested_type_identifier
	     generic_type
	     object_type
	     array_type
	     tuple_type
	     flow_maybe_type
	     type_query
	     index_type_query
	     this
	     existential_type
	     literal_type
	     lookup_type
	     conditional_type
	     union_type
	     intersection_type
	     function_type
	     readonly_type
	     constructor_type
	     infer_type)
 (construct_signature type_parameters formal_parameters type_annotation)
 (index_signature identifier
		  identifier
		  parenthesized_type
		  predefined_type
		  type_identifier
		  nested_type_identifier
		  generic_type
		  object_type
		  array_type
		  tuple_type
		  flow_maybe_type
		  type_query
		  index_type_query
		  this
		  existential_type
		  literal_type
		  lookup_type
		  conditional_type
		  union_type
		  intersection_type
		  function_type
		  readonly_type
		  constructor_type
		  infer_type
		  mapped_type_clause
		  type_annotation
		  omitting_type_annotation
		  opting_type_annotation)
 (array_type parenthesized_type
	     predefined_type
	     type_identifier
	     nested_type_identifier
	     generic_type
	     object_type
	     array_type
	     tuple_type
	     flow_maybe_type
	     type_query
	     index_type_query
	     this
	     existential_type
	     literal_type
	     lookup_type
	     conditional_type)
 (tuple_type required_parameter
	     optional_parameter
	     optional_type
	     rest_type
	     parenthesized_type
	     predefined_type
	     type_identifier
	     nested_type_identifier
	     generic_type
	     object_type
	     array_type
	     tuple_type
	     flow_maybe_type
	     type_query
	     index_type_query
	     this
	     existential_type
	     literal_type
	     lookup_type
	     conditional_type
	     union_type
	     intersection_type
	     function_type
	     readonly_type
	     constructor_type
	     infer_type
	     required_parameter
	     optional_parameter
	     optional_type
	     rest_type
	     parenthesized_type
	     predefined_type
	     type_identifier
	     nested_type_identifier
	     generic_type
	     object_type
	     array_type
	     tuple_type
	     flow_maybe_type
	     type_query
	     index_type_query
	     this
	     existential_type
	     literal_type
	     lookup_type
	     conditional_type
	     union_type
	     intersection_type
	     function_type
	     readonly_type
	     constructor_type
	     infer_type)
 (readonly_type parenthesized_type
		predefined_type
		type_identifier
		nested_type_identifier
		generic_type
		object_type
		array_type
		tuple_type
		flow_maybe_type
		type_query
		index_type_query
		this
		existential_type
		literal_type
		lookup_type
		conditional_type
		union_type
		intersection_type
		function_type
		readonly_type
		constructor_type
		infer_type)
 (union_type parenthesized_type
	     predefined_type
	     type_identifier
	     nested_type_identifier
	     generic_type
	     object_type
	     array_type
	     tuple_type
	     flow_maybe_type
	     type_query
	     index_type_query
	     this
	     existential_type
	     literal_type
	     lookup_type
	     conditional_type
	     union_type
	     intersection_type
	     function_type
	     readonly_type
	     constructor_type
	     infer_type
	     parenthesized_type
	     predefined_type
	     type_identifier
	     nested_type_identifier
	     generic_type
	     object_type
	     array_type
	     tuple_type
	     flow_maybe_type
	     type_query
	     index_type_query
	     this
	     existential_type
	     literal_type
	     lookup_type
	     conditional_type
	     union_type
	     intersection_type
	     function_type
	     readonly_type
	     constructor_type
	     infer_type)
 (intersection_type parenthesized_type
		    predefined_type
		    type_identifier
		    nested_type_identifier
		    generic_type
		    object_type
		    array_type
		    tuple_type
		    flow_maybe_type
		    type_query
		    index_type_query
		    this
		    existential_type
		    literal_type
		    lookup_type
		    conditional_type
		    union_type
		    intersection_type
		    function_type
		    readonly_type
		    constructor_type
		    infer_type
		    parenthesized_type
		    predefined_type
		    type_identifier
		    nested_type_identifier
		    generic_type
		    object_type
		    array_type
		    tuple_type
		    flow_maybe_type
		    type_query
		    index_type_query
		    this
		    existential_type
		    literal_type
		    lookup_type
		    conditional_type
		    union_type
		    intersection_type
		    function_type
		    readonly_type
		    constructor_type
		    infer_type)
 (function_type type_parameters
		formal_parameters
		parenthesized_type
		predefined_type
		type_identifier
		nested_type_identifier
		generic_type
		object_type
		array_type
		tuple_type
		flow_maybe_type
		type_query
		index_type_query
		this
		existential_type
		literal_type
		lookup_type
		conditional_type
		union_type
		intersection_type
		function_type
		readonly_type
		constructor_type
		infer_type
		type_predicate)
 (_type_identifier type_identifier))
)

(provide 'tree-edit-typescript-grammar)
;;; tree-edit-typescript-grammar.el ends here